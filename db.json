{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/varaint/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/varaint/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/module.js","path":"js/module.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/css/fonts/din.otf","path":"css/fonts/din.otf","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-aea.js","path":"js/google-code-prettify/lang-aea.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-Splus.js","path":"js/google-code-prettify/lang-Splus.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-agc.js","path":"js/google-code-prettify/lang-agc.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-apollo.js","path":"js/google-code-prettify/lang-apollo.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-basic.js","path":"js/google-code-prettify/lang-basic.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-cbm.js","path":"js/google-code-prettify/lang-cbm.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-cl.js","path":"js/google-code-prettify/lang-cl.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-clj.js","path":"js/google-code-prettify/lang-clj.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-dart.js","path":"js/google-code-prettify/lang-dart.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-el.js","path":"js/google-code-prettify/lang-el.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-css.js","path":"js/google-code-prettify/lang-css.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-erl.js","path":"js/google-code-prettify/lang-erl.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-erlang.js","path":"js/google-code-prettify/lang-erlang.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-fs.js","path":"js/google-code-prettify/lang-fs.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-go.js","path":"js/google-code-prettify/lang-go.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-hs.js","path":"js/google-code-prettify/lang-hs.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-lasso.js","path":"js/google-code-prettify/lang-lasso.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-lassoscript.js","path":"js/google-code-prettify/lang-lassoscript.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-latex.js","path":"js/google-code-prettify/lang-latex.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-lgt.js","path":"js/google-code-prettify/lang-lgt.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-ll.js","path":"js/google-code-prettify/lang-ll.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-lisp.js","path":"js/google-code-prettify/lang-lisp.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-llvm.js","path":"js/google-code-prettify/lang-llvm.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-logtalk.js","path":"js/google-code-prettify/lang-logtalk.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-ls.js","path":"js/google-code-prettify/lang-ls.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-lsp.js","path":"js/google-code-prettify/lang-lsp.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-lua.js","path":"js/google-code-prettify/lang-lua.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-matlab.js","path":"js/google-code-prettify/lang-matlab.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-ml.js","path":"js/google-code-prettify/lang-ml.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-mumps.js","path":"js/google-code-prettify/lang-mumps.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-n.js","path":"js/google-code-prettify/lang-n.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-pascal.js","path":"js/google-code-prettify/lang-pascal.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-nemerle.js","path":"js/google-code-prettify/lang-nemerle.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-proto.js","path":"js/google-code-prettify/lang-proto.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-r.js","path":"js/google-code-prettify/lang-r.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-rd.js","path":"js/google-code-prettify/lang-rd.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-rkt.js","path":"js/google-code-prettify/lang-rkt.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-rust.js","path":"js/google-code-prettify/lang-rust.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-s.js","path":"js/google-code-prettify/lang-s.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-scala.js","path":"js/google-code-prettify/lang-scala.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-scm.js","path":"js/google-code-prettify/lang-scm.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-sql.js","path":"js/google-code-prettify/lang-sql.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-ss.js","path":"js/google-code-prettify/lang-ss.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-swift.js","path":"js/google-code-prettify/lang-swift.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-tcl.js","path":"js/google-code-prettify/lang-tcl.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-tex.js","path":"js/google-code-prettify/lang-tex.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-vb.js","path":"js/google-code-prettify/lang-vb.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-vbs.js","path":"js/google-code-prettify/lang-vbs.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-vhdl.js","path":"js/google-code-prettify/lang-vhdl.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-wiki.js","path":"js/google-code-prettify/lang-wiki.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-xq.js","path":"js/google-code-prettify/lang-xq.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-yaml.js","path":"js/google-code-prettify/lang-yaml.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-xquery.js","path":"js/google-code-prettify/lang-xquery.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-yml.js","path":"js/google-code-prettify/lang-yml.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/tomorrow-night-eighties.min.css","path":"js/google-code-prettify/tomorrow-night-eighties.min.css","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/prettify.js","path":"js/google-code-prettify/prettify.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/run_prettify.js","path":"js/google-code-prettify/run_prettify.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/banner/2.jpg","path":"banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/prettify.css","path":"js/google-code-prettify/prettify.css","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/google-code-prettify/lang-vhd.js","path":"js/google-code-prettify/lang-vhd.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/css/fonts/iconfont/iconfont.eot","path":"css/fonts/iconfont/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/varaint/source/css/fonts/iconfont/iconfont.svg","path":"css/fonts/iconfont/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/varaint/source/css/fonts/iconfont/iconfont.ttf","path":"css/fonts/iconfont/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/varaint/source/css/fonts/iconfont/iconfont.woff","path":"css/fonts/iconfont/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/varaint/source/banner/1.jpg","path":"banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/varaint/source/js/lib.js","path":"js/lib.js","modified":0,"renderable":1},{"_id":"themes/varaint/source/banner/3.jpg","path":"banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/varaint/source/banner/4.jpg","path":"banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/varaint/source/banner/5.jpg","path":"banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/varaint/source/banner/6.jpg","path":"banner/6.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/varaint/README.md","hash":"868ebf590d2e6d36a7a88f11c48dd128cc5805b4","modified":1479181084000},{"_id":"themes/varaint/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1479196373000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1479211977000},{"_id":"themes/varaint/_config.yml","hash":"62ba61cc937f0c863fd3f4f24319772f8b248395","modified":1479217800000},{"_id":"source/_posts/gulp-入门教程.md","hash":"f7e44856488a4d0f5240ed82d1bfd4e2116f0de5","modified":1479302587000},{"_id":"source/_posts/hello-world.md","hash":"63e35031253b1e1f8813689b9e681d9bf32c7731","modified":1479289059000},{"_id":"source/_posts/基于 Vue 的直播播放器实战.md","hash":"c54bfcafe0014a6cc907c492e8c376c252e0ff44","modified":1479300609000},{"_id":"source/_posts/hanshu.md","hash":"bf56c558f561fd427d3676f5f19442db21db9b8d","modified":1479289221000},{"_id":"source/_posts/面试题.md","hash":"3049a642865f429a3194258a5cf3f031a3c45b46","modified":1479371128000},{"_id":"themes/varaint/layout/index.ejs","hash":"9f5f9e9a9eeb297782e34dfd10d608ee0ebd9a0b","modified":1479181084000},{"_id":"themes/varaint/layout/layout.ejs","hash":"d700ac5cc73361d54616525ab30ba9cd3939d299","modified":1479181084000},{"_id":"source/_posts/纯CSS3实现轮播图.md","hash":"f128de636338f7c02b0608399226950b1159634c","modified":1479288446000},{"_id":"themes/varaint/scripts/paging.js","hash":"81d67ff0e9e78f44b84ff042a7c0ab365ebfa7dd","modified":1479181084000},{"_id":"themes/varaint/layout/post.ejs","hash":"596a512dde277b33ec091e101f35c0acb08544fe","modified":1479181084000},{"_id":"source/_posts/前端开发面试题.md","hash":"69edac73d68f83f874e75632b7ae2804fcbfb42e","modified":1479544009000},{"_id":"source/_posts/函数详解.md","hash":"9c9540151480a3ea9253dddc43065ad23d7db53d","modified":1479301296000},{"_id":"themes/varaint/source/favicon.png","hash":"e9fc8fabc76fa6aaf3c2fb71535b04400f0e06a8","modified":1479181084000},{"_id":"themes/varaint/layout/_partial/archive.ejs","hash":"5943b5bce733e6fc38b5e9d21492315dec167cbe","modified":1479181084000},{"_id":"themes/varaint/layout/_partial/article.ejs","hash":"c5b0b632f3999ddf7e2a51b134caffd76943b8fd","modified":1479181084000},{"_id":"source/_posts/实现图片拖放.md","hash":"b1ec52aa30c1f4890ef04de1aefb8e15e50d3019","modified":1479289212000},{"_id":"themes/varaint/layout/_partial/author.ejs","hash":"ef624addd7914c0ceae7d394ad64fe04a1010693","modified":1479181084000},{"_id":"themes/varaint/layout/_partial/banner.ejs","hash":"49ced60b9d231aed216cd77da7013a7357e74152","modified":1479181084000},{"_id":"themes/varaint/layout/_partial/head.ejs","hash":"305d1fea666305941c8470daf8df14681707588e","modified":1479181084000},{"_id":"themes/varaint/layout/_partial/header.ejs","hash":"0190f18687c44e63a08349a2a7a17bcca6a542ec","modified":1479181084000},{"_id":"themes/varaint/layout/_partial/search.ejs","hash":"a8b8b5057fedf31a907c0147edef2a2511b8754b","modified":1479181084000},{"_id":"themes/varaint/layout/_partial/sidebar.ejs","hash":"92d052fe1076f7fd425639fc4c251fc34323c7c1","modified":1479181084000},{"_id":"themes/varaint/layout/_widget/date.ejs","hash":"9d012a767db8ef232d30bc54db58df6f54b828af","modified":1479181084000},{"_id":"themes/varaint/layout/_widget/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1479181084000},{"_id":"themes/varaint/source/css/style.styl","hash":"f867044b8e05c81e4594e0c1aaa70a539c579071","modified":1479181084000},{"_id":"themes/varaint/layout/_partial/footer.ejs","hash":"4d21b70cc2010e7880e361bd6adb709e7f4f90d0","modified":1479382325000},{"_id":"themes/varaint/source/css/_font.styl","hash":"66e0478c8cc77efb061e587a1b84d4e3ea8902df","modified":1479181084000},{"_id":"themes/varaint/source/css/_var.styl","hash":"930cd91ab1b020a59303312536238bc040260f66","modified":1479181084000},{"_id":"themes/varaint/source/js/module.js","hash":"cee61899e919ebe29fd9c18f6880a335cee8bdfc","modified":1479181084000},{"_id":"themes/varaint/source/js/script.js","hash":"560e755826fe2ba1151342cca757e4ab7cb4a59d","modified":1479197722000},{"_id":"themes/varaint/layout/_partial/post/disqus-comment.ejs","hash":"2eff8228047dfd6b00345fee455c9f3de6a741e9","modified":1479181084000},{"_id":"themes/varaint/source/css/_partial/archive.styl","hash":"310c2b49bff77404c1bffbe5a1567af795816596","modified":1479181084000},{"_id":"themes/varaint/source/css/_partial/article.styl","hash":"fe43cba93a726049da8637f486620214d7797822","modified":1479181084000},{"_id":"themes/varaint/source/css/_partial/author.styl","hash":"cab911a74ea31000b37f5c11d02473412a5aaec7","modified":1479181084000},{"_id":"themes/varaint/source/css/_partial/banner.styl","hash":"8f9ce6107c966972c4ec7ceb99fd7a391a8b7260","modified":1479181084000},{"_id":"themes/varaint/source/css/_partial/footer.styl","hash":"45a2ea849690abb158cdf59ad1f82eda1af2f5eb","modified":1479181084000},{"_id":"themes/varaint/source/css/_partial/header.styl","hash":"a3fad4f045270f5a2f9fff5feb44ae0c1caef51e","modified":1479181084000},{"_id":"themes/varaint/source/css/_partial/sidebar.styl","hash":"ce695db24414b36bbbb27828db5fdadacce9b77d","modified":1479181084000},{"_id":"themes/varaint/source/css/_partial/search.styl","hash":"5b0dae4961ba27f48cd7eec7183673efe6a69a4b","modified":1479181084000},{"_id":"themes/varaint/layout/_partial/post/share.ejs","hash":"e56cc398a4652ba28439f2ed496834886a0442fa","modified":1479181084000},{"_id":"themes/varaint/source/css/fonts/din.otf","hash":"db6c925f4906e671f86d43fe5cb750dea99adddb","modified":1479181084000},{"_id":"themes/varaint/layout/_partial/post/duoshuo-comment.ejs","hash":"60d5db26bb7feae7872fed11076a6ccd8fda0ef1","modified":1479200983000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-aea.js","hash":"6a795a6049869e05b98fe851e72094276d3ae613","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-Splus.js","hash":"cf0eb1b7e60d2b5704901965578eeb8333196ff3","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-agc.js","hash":"6a795a6049869e05b98fe851e72094276d3ae613","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-apollo.js","hash":"6a795a6049869e05b98fe851e72094276d3ae613","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-basic.js","hash":"efeefe1f0d1f20b66d2cb0635b8f0c7fcfe7ff0a","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-cbm.js","hash":"efeefe1f0d1f20b66d2cb0635b8f0c7fcfe7ff0a","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-cl.js","hash":"a51313f66790f8de2f39a124b7595d9ff876df36","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-clj.js","hash":"a2c893fc1b79d9c3aed59e22bcf3769bb5563b5c","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-dart.js","hash":"be57991fbb09bd187be3cb0218bd5e9c997eea5b","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-el.js","hash":"a51313f66790f8de2f39a124b7595d9ff876df36","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-css.js","hash":"22160ffbcd219c018c3dbef745da29cc334c6e8c","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-erl.js","hash":"d3ba7d0376ff6f95f5785341653c24166d4ef8e4","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-erlang.js","hash":"d3ba7d0376ff6f95f5785341653c24166d4ef8e4","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-fs.js","hash":"fe6b2569654df7a1861bb2518a2ac443603d471f","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-go.js","hash":"640ffa4b3f9c5aee9414962645b9a7f0f49dd555","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-hs.js","hash":"3158902af4476578fc61eb9e47c679e663a77342","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-lasso.js","hash":"ec97ae568bcde0d905af52e4a68ba1bc7b898af9","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-lassoscript.js","hash":"ec97ae568bcde0d905af52e4a68ba1bc7b898af9","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-latex.js","hash":"57371d546cb8e1c105985a59ed135a1b97944d17","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-lgt.js","hash":"a8ca762427547d5968153b6afe1e3ee02520886a","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-ll.js","hash":"91b28e339c9b32bfe61fc6ae6eba166936ee38fb","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-lisp.js","hash":"a51313f66790f8de2f39a124b7595d9ff876df36","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-llvm.js","hash":"91b28e339c9b32bfe61fc6ae6eba166936ee38fb","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-logtalk.js","hash":"a8ca762427547d5968153b6afe1e3ee02520886a","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-ls.js","hash":"ec97ae568bcde0d905af52e4a68ba1bc7b898af9","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-lsp.js","hash":"a51313f66790f8de2f39a124b7595d9ff876df36","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-lua.js","hash":"60a3dccac2fe79b0e1c38dec6be79a6ae51883fa","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-matlab.js","hash":"94c8fd7c44194dd3b1a444a3fc7c2b7fd09d9d6a","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-ml.js","hash":"fe6b2569654df7a1861bb2518a2ac443603d471f","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-mumps.js","hash":"a6002126b8dfc84a167040a024aad9b6b4e406ee","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-n.js","hash":"65e144772759352d3b8c612219d5d817735cc7a0","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-pascal.js","hash":"6630a2845b3a0951cbd4b2b8f69d538e0845a53e","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-nemerle.js","hash":"65e144772759352d3b8c612219d5d817735cc7a0","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-proto.js","hash":"76ab0965b0e47de76cb5293ceafc7e5ca1588380","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-r.js","hash":"cf0eb1b7e60d2b5704901965578eeb8333196ff3","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-rd.js","hash":"f2c5bbaca8b6a00737dbdd30d26ea84a0c9db9bc","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-rkt.js","hash":"a51313f66790f8de2f39a124b7595d9ff876df36","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-rust.js","hash":"4e91bf396678821d7124e45478f77662912f68a6","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-s.js","hash":"cf0eb1b7e60d2b5704901965578eeb8333196ff3","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-scala.js","hash":"cf07e43b333938964236f455826c335fc806aaa5","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-scm.js","hash":"a51313f66790f8de2f39a124b7595d9ff876df36","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-sql.js","hash":"483cc0f4bd0773f6e7377f48b7a028d83790dd1b","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-ss.js","hash":"a51313f66790f8de2f39a124b7595d9ff876df36","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-swift.js","hash":"96ecf47954b110d6f46afde474dca4a8a36de641","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-tcl.js","hash":"38c918e9a43c8975074302305b8b8e5f30d513dc","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-tex.js","hash":"57371d546cb8e1c105985a59ed135a1b97944d17","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-vb.js","hash":"1f5344a5051aa3800193b8031dab4acbe3e341cb","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-vbs.js","hash":"1f5344a5051aa3800193b8031dab4acbe3e341cb","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-vhdl.js","hash":"09c27f0ced7244e8ece3ab043bf8aa3028cc2927","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-wiki.js","hash":"c4090580e86c5040709e6b8fd63b661f978149a6","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-xq.js","hash":"52c4ad346f115881a250652f1d98f35826f4f239","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-yaml.js","hash":"5aaea285d2e08556c0a754d637d912ed82734d8e","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-xquery.js","hash":"52c4ad346f115881a250652f1d98f35826f4f239","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-yml.js","hash":"5aaea285d2e08556c0a754d637d912ed82734d8e","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/tomorrow-night-eighties.min.css","hash":"f654ece8ef13e740f844ce593912e040e3f21e5f","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/prettify.js","hash":"8f3a565f0a190aa9df6c9e6e0cb2c3c2445bfa55","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/run_prettify.js","hash":"face8177a6804506c67c5644c00f3c6e0e50f02b","modified":1479181084000},{"_id":"themes/varaint/source/banner/2.jpg","hash":"3893f17888bf5fdd21d7d132431a6a255ffa3903","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/prettify.css","hash":"8e1c89c9a44e0e837551bdfe250a672d6c21f2b7","modified":1479181084000},{"_id":"themes/varaint/source/js/google-code-prettify/lang-vhd.js","hash":"09c27f0ced7244e8ece3ab043bf8aa3028cc2927","modified":1479181084000},{"_id":"themes/varaint/source/css/_partial/post/share.styl","hash":"7e7ce553e746b788fe723eb33028e9f3b5a5fb3c","modified":1479181084000},{"_id":"themes/varaint/source/css/fonts/iconfont/iconfont.eot","hash":"1f90b84b9d3afe27303ce73196f9786efc42953b","modified":1479181084000},{"_id":"themes/varaint/source/css/fonts/iconfont/iconfont.svg","hash":"73321f0798240e541a0f3f468bb6828feeb64fa0","modified":1479181084000},{"_id":"themes/varaint/source/css/fonts/iconfont/iconfont.ttf","hash":"cc36ce4748a2294a915a467a6b4feb046b1aaeb1","modified":1479181084000},{"_id":"themes/varaint/source/css/fonts/iconfont/iconfont.woff","hash":"130d610313a6bcdb1d3dd1451b53087a2c2a56e9","modified":1479181084000},{"_id":"themes/varaint/source/banner/1.jpg","hash":"0a5c0d41ca9382b7fa14b16a6650d101961ba84b","modified":1479181084000},{"_id":"themes/varaint/source/js/lib.js","hash":"d1f3a62d0d91c3000e9b351e41ad441f0632f8b9","modified":1479181084000},{"_id":"themes/varaint/source/banner/3.jpg","hash":"d81a28a4fe24270c2410de9165d58da11fb42382","modified":1479197722000},{"_id":"themes/varaint/source/banner/4.jpg","hash":"ced2b163d0ed542c494a45d5ccd072e57a5f4211","modified":1479181084000},{"_id":"themes/varaint/source/banner/5.jpg","hash":"aae13a6a71e4c89e7ecd66f060cf3cfff3b79862","modified":1479197722000},{"_id":"themes/varaint/source/banner/6.jpg","hash":"6117e2b3132fde432d403f5d28c329b35d92341e","modified":1479197722000},{"_id":"public/2016/11/17/面试题/index.html","hash":"4dba9680991e8bcb47aefd4185e653207925f432","modified":1479544027868},{"_id":"public/2016/08/10/函数详解/index.html","hash":"8134f061afb070cec584880097dce0842cb4146a","modified":1479544028258},{"_id":"public/2016/06/15/纯CSS3实现轮播图/index.html","hash":"00994a7221e72af2b8c972c11a0c14f5548f4325","modified":1479544028294},{"_id":"public/2016/07/15/实现图片拖放/index.html","hash":"d4809b256c200d3da290434a4441224c8f802d9a","modified":1479544028305},{"_id":"public/index.html","hash":"4bcd74a5421c3ea13b813dea7489f7586df29509","modified":1479544028306},{"_id":"public/2016/03/16/hello-world/index.html","hash":"d7cbb5402baafae56ccbda34a5ebf4178a5e16fc","modified":1479544028306},{"_id":"public/archives/index.html","hash":"dadf79fa521cf72b75a232a2df5dddb981d4548d","modified":1479544028306},{"_id":"public/archives/2016/index.html","hash":"8f830081307f935aba13fe2c4f5e45d57d7d8581","modified":1479544028306},{"_id":"public/archives/2016/03/index.html","hash":"fadbae311a96e7e2678bc2bcdea103aad16f9c60","modified":1479544028306},{"_id":"public/archives/2016/06/index.html","hash":"89e24b3e3c6545bd5ee978f86a7b2c8e8a7e9f64","modified":1479544028306},{"_id":"public/archives/2016/07/index.html","hash":"fd41f7ccc0683c202e6bd23e71fb49a3d9593308","modified":1479544028306},{"_id":"public/archives/2016/08/index.html","hash":"97cda4e24187977f7eb0c31f9953111da837d16c","modified":1479544028306},{"_id":"public/archives/2016/10/index.html","hash":"4271dca30c3f875e5daab17eb38d47481c7cd819","modified":1479544028306},{"_id":"public/archives/2016/11/index.html","hash":"4359e5a88c6bdb607f688d6b19b3ea7d60582f40","modified":1479544028306},{"_id":"public/tags/gulp/index.html","hash":"e4fd270d9e34fa0f52027f79b40c737ac7ba97f7","modified":1479544028306},{"_id":"public/tags/基于vue直播播放器实战/index.html","hash":"213e9399d5aa28a5bc9849d839afd2b6f932e61f","modified":1479544028306},{"_id":"public/tags/vue/index.html","hash":"cd592173bd358099bbf8a1bbba55042f4de7a6e2","modified":1479544028306},{"_id":"public/tags/gulp入门教程详解/index.html","hash":"6dd1dad36fff95213d7ccbedef36dddc1da64f25","modified":1479544028307},{"_id":"public/tags/js/index.html","hash":"6d9d3c865aeeb6eed26acce83e0e11a9fae750bc","modified":1479544028307},{"_id":"public/tags/canvas/index.html","hash":"ce694794622fdd5b3141df22039ceeb253dc6b2f","modified":1479544028307},{"_id":"public/tags/面试题/index.html","hash":"acb23ea77520711c9b71bfd55755a7106a833306","modified":1479544028307},{"_id":"public/tags/实现简单的轮播图/index.html","hash":"667798d5c7df8e42d7400a5263898abfd8183066","modified":1479544028307},{"_id":"public/tags/javascript/index.html","hash":"3a0007b0c5032da20f4cb7f97587cb05e61f73f3","modified":1479544028307},{"_id":"public/tags/函数详解/index.html","hash":"31c06297c9af689b84f0467bb86df08955aaf53c","modified":1479544028307},{"_id":"public/tags/CSS/index.html","hash":"79023b9620dfaa425e5da32e091049b80ee00c84","modified":1479544028307},{"_id":"public/tags/7种创建对象的方法/index.html","hash":"a5f597e98c1847d37868e89bf6f41cedea1b7e87","modified":1479544028307},{"_id":"public/2016/10/16/gulp-入门教程/index.html","hash":"2dd4f2e46bf970ce2fd646b67bdefbb9610dd4c1","modified":1479544028307},{"_id":"public/2016/07/20/基于 Vue 的直播播放器实战/index.html","hash":"5d078398d6ba0fa864d62db1cf2e757a41da5853","modified":1479544028307},{"_id":"public/2016/07/25/hanshu/index.html","hash":"39d890f3b007bfcec5ace81a867993b4fb2cebd3","modified":1479544028307},{"_id":"public/tags/前端开发面试题/index.html","hash":"098ea63ef4be2e2f58e0b96d675679e4cc7e0e9d","modified":1479544028311},{"_id":"public/2016/07/29/前端开发面试题/index.html","hash":"a7f5f8a4462f39282bf6fc0a4b26b3f6c695057a","modified":1479544028311},{"_id":"public/favicon.png","hash":"e9fc8fabc76fa6aaf3c2fb71535b04400f0e06a8","modified":1479544028311},{"_id":"public/css/fonts/din.otf","hash":"db6c925f4906e671f86d43fe5cb750dea99adddb","modified":1479544028311},{"_id":"public/css/fonts/iconfont/iconfont.ttf","hash":"cc36ce4748a2294a915a467a6b4feb046b1aaeb1","modified":1479544028311},{"_id":"public/css/fonts/iconfont/iconfont.svg","hash":"73321f0798240e541a0f3f468bb6828feeb64fa0","modified":1479544028311},{"_id":"public/css/fonts/iconfont/iconfont.woff","hash":"130d610313a6bcdb1d3dd1451b53087a2c2a56e9","modified":1479544028311},{"_id":"public/css/fonts/iconfont/iconfont.eot","hash":"1f90b84b9d3afe27303ce73196f9786efc42953b","modified":1479544028311},{"_id":"public/js/module.js","hash":"cee61899e919ebe29fd9c18f6880a335cee8bdfc","modified":1479544029121},{"_id":"public/js/script.js","hash":"560e755826fe2ba1151342cca757e4ab7cb4a59d","modified":1479544029121},{"_id":"public/js/google-code-prettify/lang-agc.js","hash":"6a795a6049869e05b98fe851e72094276d3ae613","modified":1479544029121},{"_id":"public/js/google-code-prettify/lang-aea.js","hash":"6a795a6049869e05b98fe851e72094276d3ae613","modified":1479544029121},{"_id":"public/js/google-code-prettify/lang-apollo.js","hash":"6a795a6049869e05b98fe851e72094276d3ae613","modified":1479544029121},{"_id":"public/js/google-code-prettify/lang-basic.js","hash":"efeefe1f0d1f20b66d2cb0635b8f0c7fcfe7ff0a","modified":1479544029121},{"_id":"public/js/google-code-prettify/lang-cbm.js","hash":"efeefe1f0d1f20b66d2cb0635b8f0c7fcfe7ff0a","modified":1479544029121},{"_id":"public/js/google-code-prettify/lang-cl.js","hash":"a51313f66790f8de2f39a124b7595d9ff876df36","modified":1479544029121},{"_id":"public/js/google-code-prettify/lang-dart.js","hash":"be57991fbb09bd187be3cb0218bd5e9c997eea5b","modified":1479544029121},{"_id":"public/js/google-code-prettify/lang-clj.js","hash":"a2c893fc1b79d9c3aed59e22bcf3769bb5563b5c","modified":1479544029121},{"_id":"public/js/google-code-prettify/lang-erl.js","hash":"d3ba7d0376ff6f95f5785341653c24166d4ef8e4","modified":1479544029121},{"_id":"public/js/google-code-prettify/lang-css.js","hash":"22160ffbcd219c018c3dbef745da29cc334c6e8c","modified":1479544029121},{"_id":"public/js/google-code-prettify/lang-Splus.js","hash":"cf0eb1b7e60d2b5704901965578eeb8333196ff3","modified":1479544029121},{"_id":"public/js/google-code-prettify/lang-erlang.js","hash":"d3ba7d0376ff6f95f5785341653c24166d4ef8e4","modified":1479544029122},{"_id":"public/js/google-code-prettify/lang-fs.js","hash":"fe6b2569654df7a1861bb2518a2ac443603d471f","modified":1479544029122},{"_id":"public/js/google-code-prettify/lang-go.js","hash":"640ffa4b3f9c5aee9414962645b9a7f0f49dd555","modified":1479544029122},{"_id":"public/js/google-code-prettify/lang-hs.js","hash":"3158902af4476578fc61eb9e47c679e663a77342","modified":1479544029122},{"_id":"public/js/google-code-prettify/lang-lasso.js","hash":"ec97ae568bcde0d905af52e4a68ba1bc7b898af9","modified":1479544029122},{"_id":"public/js/google-code-prettify/lang-lassoscript.js","hash":"ec97ae568bcde0d905af52e4a68ba1bc7b898af9","modified":1479544029122},{"_id":"public/js/google-code-prettify/lang-lgt.js","hash":"a8ca762427547d5968153b6afe1e3ee02520886a","modified":1479544029122},{"_id":"public/js/google-code-prettify/lang-ll.js","hash":"91b28e339c9b32bfe61fc6ae6eba166936ee38fb","modified":1479544029122},{"_id":"public/js/google-code-prettify/lang-llvm.js","hash":"91b28e339c9b32bfe61fc6ae6eba166936ee38fb","modified":1479544029122},{"_id":"public/js/google-code-prettify/lang-lisp.js","hash":"a51313f66790f8de2f39a124b7595d9ff876df36","modified":1479544029122},{"_id":"public/js/google-code-prettify/lang-latex.js","hash":"57371d546cb8e1c105985a59ed135a1b97944d17","modified":1479544029122},{"_id":"public/js/google-code-prettify/lang-logtalk.js","hash":"a8ca762427547d5968153b6afe1e3ee02520886a","modified":1479544029122},{"_id":"public/js/google-code-prettify/lang-lsp.js","hash":"a51313f66790f8de2f39a124b7595d9ff876df36","modified":1479544029122},{"_id":"public/js/google-code-prettify/lang-ls.js","hash":"ec97ae568bcde0d905af52e4a68ba1bc7b898af9","modified":1479544029122},{"_id":"public/js/google-code-prettify/lang-lua.js","hash":"60a3dccac2fe79b0e1c38dec6be79a6ae51883fa","modified":1479544029122},{"_id":"public/js/google-code-prettify/lang-ml.js","hash":"fe6b2569654df7a1861bb2518a2ac443603d471f","modified":1479544029122},{"_id":"public/js/google-code-prettify/lang-n.js","hash":"65e144772759352d3b8c612219d5d817735cc7a0","modified":1479544029122},{"_id":"public/js/google-code-prettify/lang-mumps.js","hash":"a6002126b8dfc84a167040a024aad9b6b4e406ee","modified":1479544029123},{"_id":"public/js/google-code-prettify/lang-pascal.js","hash":"6630a2845b3a0951cbd4b2b8f69d538e0845a53e","modified":1479544029123},{"_id":"public/js/google-code-prettify/lang-nemerle.js","hash":"65e144772759352d3b8c612219d5d817735cc7a0","modified":1479544029123},{"_id":"public/js/google-code-prettify/lang-proto.js","hash":"76ab0965b0e47de76cb5293ceafc7e5ca1588380","modified":1479544029123},{"_id":"public/js/google-code-prettify/lang-r.js","hash":"cf0eb1b7e60d2b5704901965578eeb8333196ff3","modified":1479544029123},{"_id":"public/js/google-code-prettify/lang-rd.js","hash":"f2c5bbaca8b6a00737dbdd30d26ea84a0c9db9bc","modified":1479544029123},{"_id":"public/js/google-code-prettify/lang-rkt.js","hash":"a51313f66790f8de2f39a124b7595d9ff876df36","modified":1479544029123},{"_id":"public/js/google-code-prettify/lang-rust.js","hash":"4e91bf396678821d7124e45478f77662912f68a6","modified":1479544029123},{"_id":"public/js/google-code-prettify/lang-el.js","hash":"a51313f66790f8de2f39a124b7595d9ff876df36","modified":1479544029123},{"_id":"public/js/google-code-prettify/lang-s.js","hash":"cf0eb1b7e60d2b5704901965578eeb8333196ff3","modified":1479544029123},{"_id":"public/js/google-code-prettify/lang-sql.js","hash":"483cc0f4bd0773f6e7377f48b7a028d83790dd1b","modified":1479544029123},{"_id":"public/js/google-code-prettify/lang-ss.js","hash":"a51313f66790f8de2f39a124b7595d9ff876df36","modified":1479544029123},{"_id":"public/js/google-code-prettify/lang-scala.js","hash":"cf07e43b333938964236f455826c335fc806aaa5","modified":1479544029123},{"_id":"public/js/google-code-prettify/lang-swift.js","hash":"96ecf47954b110d6f46afde474dca4a8a36de641","modified":1479544029123},{"_id":"public/js/google-code-prettify/lang-tcl.js","hash":"38c918e9a43c8975074302305b8b8e5f30d513dc","modified":1479544029123},{"_id":"public/js/google-code-prettify/lang-vb.js","hash":"1f5344a5051aa3800193b8031dab4acbe3e341cb","modified":1479544029123},{"_id":"public/js/google-code-prettify/lang-tex.js","hash":"57371d546cb8e1c105985a59ed135a1b97944d17","modified":1479544029123},{"_id":"public/js/google-code-prettify/lang-vbs.js","hash":"1f5344a5051aa3800193b8031dab4acbe3e341cb","modified":1479544029123},{"_id":"public/js/google-code-prettify/lang-vhdl.js","hash":"09c27f0ced7244e8ece3ab043bf8aa3028cc2927","modified":1479544029123},{"_id":"public/js/google-code-prettify/lang-wiki.js","hash":"c4090580e86c5040709e6b8fd63b661f978149a6","modified":1479544029123},{"_id":"public/js/google-code-prettify/lang-scm.js","hash":"a51313f66790f8de2f39a124b7595d9ff876df36","modified":1479544029123},{"_id":"public/js/google-code-prettify/lang-yaml.js","hash":"5aaea285d2e08556c0a754d637d912ed82734d8e","modified":1479544029123},{"_id":"public/js/google-code-prettify/lang-yml.js","hash":"5aaea285d2e08556c0a754d637d912ed82734d8e","modified":1479544029123},{"_id":"public/js/google-code-prettify/prettify.js","hash":"8f3a565f0a190aa9df6c9e6e0cb2c3c2445bfa55","modified":1479544029123},{"_id":"public/js/google-code-prettify/prettify.css","hash":"8e1c89c9a44e0e837551bdfe250a672d6c21f2b7","modified":1479544029123},{"_id":"public/js/google-code-prettify/tomorrow-night-eighties.min.css","hash":"f654ece8ef13e740f844ce593912e040e3f21e5f","modified":1479544029123},{"_id":"public/js/google-code-prettify/lang-vhd.js","hash":"09c27f0ced7244e8ece3ab043bf8aa3028cc2927","modified":1479544029124},{"_id":"public/css/style.css","hash":"2d80e51e74203f7b4616e9d2c9cb675f800df399","modified":1479544029124},{"_id":"public/js/google-code-prettify/lang-matlab.js","hash":"94c8fd7c44194dd3b1a444a3fc7c2b7fd09d9d6a","modified":1479544029124},{"_id":"public/js/google-code-prettify/lang-xq.js","hash":"52c4ad346f115881a250652f1d98f35826f4f239","modified":1479544029124},{"_id":"public/js/google-code-prettify/run_prettify.js","hash":"face8177a6804506c67c5644c00f3c6e0e50f02b","modified":1479544029124},{"_id":"public/js/google-code-prettify/lang-xquery.js","hash":"52c4ad346f115881a250652f1d98f35826f4f239","modified":1479544029124},{"_id":"public/js/lib.js","hash":"d1f3a62d0d91c3000e9b351e41ad441f0632f8b9","modified":1479544029124},{"_id":"public/banner/2.jpg","hash":"3893f17888bf5fdd21d7d132431a6a255ffa3903","modified":1479544029124},{"_id":"public/banner/1.jpg","hash":"0a5c0d41ca9382b7fa14b16a6650d101961ba84b","modified":1479544029130},{"_id":"public/banner/3.jpg","hash":"d81a28a4fe24270c2410de9165d58da11fb42382","modified":1479544029321},{"_id":"public/banner/4.jpg","hash":"ced2b163d0ed542c494a45d5ccd072e57a5f4211","modified":1479544029325},{"_id":"public/banner/6.jpg","hash":"6117e2b3132fde432d403f5d28c329b35d92341e","modified":1479544029329},{"_id":"public/banner/5.jpg","hash":"aae13a6a71e4c89e7ecd66f060cf3cfff3b79862","modified":1479544029329}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"gulp-入门教程","date":"2016-10-16T13:02:24.000Z","_content":"\n# gulp入门教程详解\n最近使用gulp自动化构建工具来开发网站，在此给大家分享一下使用gulp的一些使用教程。\n\n## 一、 gulp安装\n#### 1、安装nodejs\n       1.1、说明：gulp是基于nodejs，理所当然需要安装nodejs\n\n       1.2、安装：打开[<font style=\"blue\">nodejs官网</font>](https://nodejs.org/en/)，点击硕大的绿色Download按钮，它会根据系统信息选择对应版本（.msi文件）。\n\n#### 2、全局安装gulp\n        2.1、说明：全局安装gulp目的是为了通过她执行gulp任务；\n\n        2.2、安装：命令提示符执行npm install gulp -g；\n\n        2.3、查看是否正确安装：命令提示符执行gulp -v，出现版本号即为正确安装。\n\n#### 3、新建package.json文件\n       3.1、说明：package.json是基于nodejs项目必不可少的配置文件，它是存放在项目根目录的普通json文件；\n\n       3.2、执行命令提示符执行npm init进行手动安装\n\n       3.3、安装完成后会在当前文件夹下看到如下package.json文件\n       \n![Mou icon](http://upload-images.jianshu.io/upload_images/3164024-76d2e9fa62a00632.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)       \n\n\n#### package.json文件\n\n       文件说明：\n\n      \"name\":\"test\",//项目名称（必须）\n\n      \"version\":\"1.0.0\",//项目版本（必须）\n\n      \"description\":\"This is for study gulp project !\",//项目描述（必须）\n\n      \"devDependencies\":{//项目依赖的插件\n\n       3.4、查看package.json帮助文档，命令提示符执行npm help package.json\n\n#### 4、安装本地gulp及其常用插件\n      4.1、执行命令行npm install gulp 安装本地gulp\n\n     4.2、安装gulp插件：以gulp—sass为例\n\n     执行命令npm install gulp-sass即可安装gulp-sass插件，安装完成后即可在node_modules文件夹下查看到新安装的插件\n\n#### 5、新建gulpfile.js文件（重要）\n     5.1、说明：gulpfile.js是gulp项目的配置文件，是位于项目根目录的普通js文件（其实将gulpfile.js放入其他文件夹下亦可）\n\n     5.2、gulpfile.js文件用法（以gulp-sass为例）\n\n    \t 5.2.1 导入工具包 require('node_modules里对应模块')\n\n             var gulp=require('gulp')\n\n             var less=require('gulp-less');\n\n     \t5.2.2 定义一个testLess任务（自定义任务名称）\n\n\tgulp.task('testLess',function(){\n\n\t\tgulp.src('src/less/index.less')     //该任务针对的文件\n\n\t\t.pipe(less())      //该任务调用的模块\n\n\t\t.pipe(gulp.dest('src/css'));     //将会在src/css下生成index.css\n\n\t});\n\n\tgulp.task(\"default\",[\"watch\"],function(){ //定义默认任务 并让gulp监视文件变化自动执行\n\n\tgulp.watch(\"sass/*.scss\",[\"sass\"]);       \n\n\t})\n## 二、gulp常用插件\n\n#### 1、gulp-uglify(JS压缩)\n\n##### 安装：npm install --save-dev gulp-uglify\n\n#### gulpfile.js代码如下：\n\n\tvar gulp = require('gulp'),\n\n\tvar rename= require('gulp-rename')\n\n\tvar uglify= require(\"gulp-uglify\");\n\n\tgulp.task('rename',function() {\n\t\n\t\tgulp.src('src/**/*.js')\n\t\t\n\t\t.pipe(uglify())//压缩\n\t\t\n\t\t.pipe(rename('index.min.js'))    \n\t\t\n\t\t.pipe(gulp.dest('build/js'));\n\n\t});\n\n\tgulp.task('default',['rename']);\n\n\tuglify= require(\"gulp-uglify\");\n\t\n#### 2、gulp-minify-html（html压缩）\n\n#### 安装：npm install --save-dev gulp-minify-html\n\n#### 代码如下：\n\n\n\tvar gulp = require('gulp'),\n\n\tvar minifyHtml= require(\"gulp-minify-html\");\n\n\tgulp.task('minify-html',function() {\n\t\n\t\tgulp.src('src/**/*.html')//要压缩的html文件\n\t\t\n\t\t.pipe(minifyHtml())//压缩\n\t\t\n\t\t.pipe(gulp.dest('build'));\n\n\t});\n\n\tgulp.task('default',['minify-html']);\n\n#### 3、 gulp-concat (js文件合并)\n#### 安装：npm install --save-dev gulp-concat\n\n#### 代码如下：\n\n\n\tvar gulp = require('gulp'),\n\n\tconcat= require(\"gulp-concat\");\n\n\tgulp.task('concat',function() {\n\t\n\t gulp.src('src/**/*.js')  //要合并的文件\n\t \n\t .pipe(concat('index.js'))  //合并匹配到的js文件并命名为 \"index.js\"\n\t \n\t .pipe(gulp.dest('build/js'));\n\n\t});\n\n\tgulp.task('default',['concat']);\n\n#### 4、gulp-jada\n#### 安装：npm install –save-dev  gulp-jada\n\n#### Gulpfile.js代码如下：\n\n\tvar gulp= require('gulp');\n\n\tvar jade= require('gulp-jade');\n\n\tgulp.task(\"jade\",function(){\n\n\tgulp.src(\"./jade/*.jade\")\n\t\n\t\t.pipe(jade({\n\t\n\t\tpretty:true\n\n\t}))\n\t\n\t\t.pipe(gulp.dest(\"html/\"))\n\n\t})\n\t\n\t\tgulp.task(\"default\",[\"watch\"],function(){\n\t\t\n\t\tgulp.watch(\"jade/*.jade\",[\"jade\"]);\n\n\t})\n#### 4、gulp-less\n#### 安装：npm install –save-dev  gulp-less\n\n#### Gulpfile.js代码如下：\n\n\n\tvar gulp = require('gulp'),\n\n\tvar less= require(\"gulp-less\");\n\n\tgulp.task('compile-less',function() {\n\t\n\t  gulp.src('src/less/*.less')\n\t \n\t  .pipe(less())\n\t  \n\t  .pipe(gulp.dest('build/css'));\n\n\t});\n\n\tgulp.task('default',['compile-less']);\n\n#### 5、gulp-sass\n#### 安装：npm install –save-dev  gulp-sass\n\n#### 代码如下：\n\n\tvar gulp = require('gulp'),\n\n\tvar sass= require(\"gulp-sass\");\n\n\tgulp.task('compile-sass',function() {\n\t\t gulp.src('src/sass/*.sass')\n\t\t \n\t\t .pipe(sass())\n\t\t \n\t\t .pipe(gulp.dest('build/css'));\n\n\t});\n\n\tgulp.task('default',['compile-sass']);\n\n#### 6、gulp-imagemin（图片压缩）\n#### 安装：npm install –save-dev  gulp-imagemin\n\n#### 代码如下：\n\n\n\tvar gulp = require('gulp');\n\n\tvar imagemin = require('gulp-imagemin');\n\t\n\tgulp.task('uglify-imagemin',function() {returngulp.src('src/images/*')\n\t\n\t\t.pipe(imagemin())\n\t\n\t\t.pipe(gulp.dest('build/images'));\n\n\t});\n\n\tgulp.task('default',['uglify-imagemin']);\n\n#### 7、理解Browserify\n\nbrowserify是一个使用node支持的CommonJS模块标准 来为浏览器编译模块的，可以解决模块及依赖管理；\n\n#### 先来看看使用gulp常见的问题：\n\n使用 gulp 过程中，偶尔会遇到 Streaming not supported 这样的错误。这通常是因为常规流与 vinyl 文件对象流有差异、\n\ngulp 插件默认使用了只支持 buffer （不支持 stream）的库。比如，不能把 Node 常规流直接传递给 gulp 及其插件。\n\n比如如下代码：会抛出异常的；\n\n\n\tvargulp = require('gulp');\n\n\tvaruglify = require('gulp-uglify');\n\n\tvarconcat = require('gulp-concat');\n\n\tvarrename = require('gulp-rename');varfs = require('fs');\n\n\tgulp.task('bundle',function() {returnfs.createReadStream('./test.txt')\n\t\n\t\t.pipe(uglify())\n\t\t\n\t\t.pipe(rename('bundle.min.js'))\n\t\t\n\t\t.pipe(gulp.dest('dist/'));\n\n\t});\n\n\tgulp.task('default',['bundle']);\n\n文／原创/Dimple（github作者）\n原文链接：https://cuidapao.github.io/\n著作权归作者所有，转载请联系作者获得授权，并标注“github作者”。\n","source":"_posts/gulp-入门教程.md","raw":"---\ntitle: gulp-入门教程\ndate: 2016-10-16 21:02:24\ntags: [gulp,gulp入门教程详解]\n---\n\n# gulp入门教程详解\n最近使用gulp自动化构建工具来开发网站，在此给大家分享一下使用gulp的一些使用教程。\n\n## 一、 gulp安装\n#### 1、安装nodejs\n       1.1、说明：gulp是基于nodejs，理所当然需要安装nodejs\n\n       1.2、安装：打开[<font style=\"blue\">nodejs官网</font>](https://nodejs.org/en/)，点击硕大的绿色Download按钮，它会根据系统信息选择对应版本（.msi文件）。\n\n#### 2、全局安装gulp\n        2.1、说明：全局安装gulp目的是为了通过她执行gulp任务；\n\n        2.2、安装：命令提示符执行npm install gulp -g；\n\n        2.3、查看是否正确安装：命令提示符执行gulp -v，出现版本号即为正确安装。\n\n#### 3、新建package.json文件\n       3.1、说明：package.json是基于nodejs项目必不可少的配置文件，它是存放在项目根目录的普通json文件；\n\n       3.2、执行命令提示符执行npm init进行手动安装\n\n       3.3、安装完成后会在当前文件夹下看到如下package.json文件\n       \n![Mou icon](http://upload-images.jianshu.io/upload_images/3164024-76d2e9fa62a00632.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)       \n\n\n#### package.json文件\n\n       文件说明：\n\n      \"name\":\"test\",//项目名称（必须）\n\n      \"version\":\"1.0.0\",//项目版本（必须）\n\n      \"description\":\"This is for study gulp project !\",//项目描述（必须）\n\n      \"devDependencies\":{//项目依赖的插件\n\n       3.4、查看package.json帮助文档，命令提示符执行npm help package.json\n\n#### 4、安装本地gulp及其常用插件\n      4.1、执行命令行npm install gulp 安装本地gulp\n\n     4.2、安装gulp插件：以gulp—sass为例\n\n     执行命令npm install gulp-sass即可安装gulp-sass插件，安装完成后即可在node_modules文件夹下查看到新安装的插件\n\n#### 5、新建gulpfile.js文件（重要）\n     5.1、说明：gulpfile.js是gulp项目的配置文件，是位于项目根目录的普通js文件（其实将gulpfile.js放入其他文件夹下亦可）\n\n     5.2、gulpfile.js文件用法（以gulp-sass为例）\n\n    \t 5.2.1 导入工具包 require('node_modules里对应模块')\n\n             var gulp=require('gulp')\n\n             var less=require('gulp-less');\n\n     \t5.2.2 定义一个testLess任务（自定义任务名称）\n\n\tgulp.task('testLess',function(){\n\n\t\tgulp.src('src/less/index.less')     //该任务针对的文件\n\n\t\t.pipe(less())      //该任务调用的模块\n\n\t\t.pipe(gulp.dest('src/css'));     //将会在src/css下生成index.css\n\n\t});\n\n\tgulp.task(\"default\",[\"watch\"],function(){ //定义默认任务 并让gulp监视文件变化自动执行\n\n\tgulp.watch(\"sass/*.scss\",[\"sass\"]);       \n\n\t})\n## 二、gulp常用插件\n\n#### 1、gulp-uglify(JS压缩)\n\n##### 安装：npm install --save-dev gulp-uglify\n\n#### gulpfile.js代码如下：\n\n\tvar gulp = require('gulp'),\n\n\tvar rename= require('gulp-rename')\n\n\tvar uglify= require(\"gulp-uglify\");\n\n\tgulp.task('rename',function() {\n\t\n\t\tgulp.src('src/**/*.js')\n\t\t\n\t\t.pipe(uglify())//压缩\n\t\t\n\t\t.pipe(rename('index.min.js'))    \n\t\t\n\t\t.pipe(gulp.dest('build/js'));\n\n\t});\n\n\tgulp.task('default',['rename']);\n\n\tuglify= require(\"gulp-uglify\");\n\t\n#### 2、gulp-minify-html（html压缩）\n\n#### 安装：npm install --save-dev gulp-minify-html\n\n#### 代码如下：\n\n\n\tvar gulp = require('gulp'),\n\n\tvar minifyHtml= require(\"gulp-minify-html\");\n\n\tgulp.task('minify-html',function() {\n\t\n\t\tgulp.src('src/**/*.html')//要压缩的html文件\n\t\t\n\t\t.pipe(minifyHtml())//压缩\n\t\t\n\t\t.pipe(gulp.dest('build'));\n\n\t});\n\n\tgulp.task('default',['minify-html']);\n\n#### 3、 gulp-concat (js文件合并)\n#### 安装：npm install --save-dev gulp-concat\n\n#### 代码如下：\n\n\n\tvar gulp = require('gulp'),\n\n\tconcat= require(\"gulp-concat\");\n\n\tgulp.task('concat',function() {\n\t\n\t gulp.src('src/**/*.js')  //要合并的文件\n\t \n\t .pipe(concat('index.js'))  //合并匹配到的js文件并命名为 \"index.js\"\n\t \n\t .pipe(gulp.dest('build/js'));\n\n\t});\n\n\tgulp.task('default',['concat']);\n\n#### 4、gulp-jada\n#### 安装：npm install –save-dev  gulp-jada\n\n#### Gulpfile.js代码如下：\n\n\tvar gulp= require('gulp');\n\n\tvar jade= require('gulp-jade');\n\n\tgulp.task(\"jade\",function(){\n\n\tgulp.src(\"./jade/*.jade\")\n\t\n\t\t.pipe(jade({\n\t\n\t\tpretty:true\n\n\t}))\n\t\n\t\t.pipe(gulp.dest(\"html/\"))\n\n\t})\n\t\n\t\tgulp.task(\"default\",[\"watch\"],function(){\n\t\t\n\t\tgulp.watch(\"jade/*.jade\",[\"jade\"]);\n\n\t})\n#### 4、gulp-less\n#### 安装：npm install –save-dev  gulp-less\n\n#### Gulpfile.js代码如下：\n\n\n\tvar gulp = require('gulp'),\n\n\tvar less= require(\"gulp-less\");\n\n\tgulp.task('compile-less',function() {\n\t\n\t  gulp.src('src/less/*.less')\n\t \n\t  .pipe(less())\n\t  \n\t  .pipe(gulp.dest('build/css'));\n\n\t});\n\n\tgulp.task('default',['compile-less']);\n\n#### 5、gulp-sass\n#### 安装：npm install –save-dev  gulp-sass\n\n#### 代码如下：\n\n\tvar gulp = require('gulp'),\n\n\tvar sass= require(\"gulp-sass\");\n\n\tgulp.task('compile-sass',function() {\n\t\t gulp.src('src/sass/*.sass')\n\t\t \n\t\t .pipe(sass())\n\t\t \n\t\t .pipe(gulp.dest('build/css'));\n\n\t});\n\n\tgulp.task('default',['compile-sass']);\n\n#### 6、gulp-imagemin（图片压缩）\n#### 安装：npm install –save-dev  gulp-imagemin\n\n#### 代码如下：\n\n\n\tvar gulp = require('gulp');\n\n\tvar imagemin = require('gulp-imagemin');\n\t\n\tgulp.task('uglify-imagemin',function() {returngulp.src('src/images/*')\n\t\n\t\t.pipe(imagemin())\n\t\n\t\t.pipe(gulp.dest('build/images'));\n\n\t});\n\n\tgulp.task('default',['uglify-imagemin']);\n\n#### 7、理解Browserify\n\nbrowserify是一个使用node支持的CommonJS模块标准 来为浏览器编译模块的，可以解决模块及依赖管理；\n\n#### 先来看看使用gulp常见的问题：\n\n使用 gulp 过程中，偶尔会遇到 Streaming not supported 这样的错误。这通常是因为常规流与 vinyl 文件对象流有差异、\n\ngulp 插件默认使用了只支持 buffer （不支持 stream）的库。比如，不能把 Node 常规流直接传递给 gulp 及其插件。\n\n比如如下代码：会抛出异常的；\n\n\n\tvargulp = require('gulp');\n\n\tvaruglify = require('gulp-uglify');\n\n\tvarconcat = require('gulp-concat');\n\n\tvarrename = require('gulp-rename');varfs = require('fs');\n\n\tgulp.task('bundle',function() {returnfs.createReadStream('./test.txt')\n\t\n\t\t.pipe(uglify())\n\t\t\n\t\t.pipe(rename('bundle.min.js'))\n\t\t\n\t\t.pipe(gulp.dest('dist/'));\n\n\t});\n\n\tgulp.task('default',['bundle']);\n\n文／原创/Dimple（github作者）\n原文链接：https://cuidapao.github.io/\n著作权归作者所有，转载请联系作者获得授权，并标注“github作者”。\n","slug":"gulp-入门教程","published":1,"updated":"2016-11-16T13:23:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civoyb9my00009xsmlgw1hwg5","content":"<h1 id=\"gulp入门教程详解\"><a href=\"#gulp入门教程详解\" class=\"headerlink\" title=\"gulp入门教程详解\"></a>gulp入门教程详解</h1><p>最近使用gulp自动化构建工具来开发网站，在此给大家分享一下使用gulp的一些使用教程。</p>\n<h2 id=\"一、-gulp安装\"><a href=\"#一、-gulp安装\" class=\"headerlink\" title=\"一、 gulp安装\"></a>一、 gulp安装</h2><h4 id=\"1、安装nodejs\"><a href=\"#1、安装nodejs\" class=\"headerlink\" title=\"1、安装nodejs\"></a>1、安装nodejs</h4><pre><code>1.1、说明：gulp是基于nodejs，理所当然需要安装nodejs\n\n1.2、安装：打开[&lt;font style=&quot;blue&quot;&gt;nodejs官网&lt;/font&gt;](https://nodejs.org/en/)，点击硕大的绿色Download按钮，它会根据系统信息选择对应版本（.msi文件）。\n</code></pre><h4 id=\"2、全局安装gulp\"><a href=\"#2、全局安装gulp\" class=\"headerlink\" title=\"2、全局安装gulp\"></a>2、全局安装gulp</h4><pre><code>2.1、说明：全局安装gulp目的是为了通过她执行gulp任务；\n\n2.2、安装：命令提示符执行npm install gulp -g；\n\n2.3、查看是否正确安装：命令提示符执行gulp -v，出现版本号即为正确安装。\n</code></pre><h4 id=\"3、新建package-json文件\"><a href=\"#3、新建package-json文件\" class=\"headerlink\" title=\"3、新建package.json文件\"></a>3、新建package.json文件</h4><pre><code>3.1、说明：package.json是基于nodejs项目必不可少的配置文件，它是存放在项目根目录的普通json文件；\n\n3.2、执行命令提示符执行npm init进行手动安装\n\n3.3、安装完成后会在当前文件夹下看到如下package.json文件\n</code></pre><p><img src=\"http://upload-images.jianshu.io/upload_images/3164024-76d2e9fa62a00632.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Mou icon\">       </p>\n<h4 id=\"package-json文件\"><a href=\"#package-json文件\" class=\"headerlink\" title=\"package.json文件\"></a>package.json文件</h4><pre><code> 文件说明：\n\n&quot;name&quot;:&quot;test&quot;,//项目名称（必须）\n\n&quot;version&quot;:&quot;1.0.0&quot;,//项目版本（必须）\n\n&quot;description&quot;:&quot;This is for study gulp project !&quot;,//项目描述（必须）\n\n&quot;devDependencies&quot;:{//项目依赖的插件\n\n 3.4、查看package.json帮助文档，命令提示符执行npm help package.json\n</code></pre><h4 id=\"4、安装本地gulp及其常用插件\"><a href=\"#4、安装本地gulp及其常用插件\" class=\"headerlink\" title=\"4、安装本地gulp及其常用插件\"></a>4、安装本地gulp及其常用插件</h4><pre><code> 4.1、执行命令行npm install gulp 安装本地gulp\n\n4.2、安装gulp插件：以gulp—sass为例\n\n执行命令npm install gulp-sass即可安装gulp-sass插件，安装完成后即可在node_modules文件夹下查看到新安装的插件\n</code></pre><h4 id=\"5、新建gulpfile-js文件（重要）\"><a href=\"#5、新建gulpfile-js文件（重要）\" class=\"headerlink\" title=\"5、新建gulpfile.js文件（重要）\"></a>5、新建gulpfile.js文件（重要）</h4><pre><code> 5.1、说明：gulpfile.js是gulp项目的配置文件，是位于项目根目录的普通js文件（其实将gulpfile.js放入其他文件夹下亦可）\n\n 5.2、gulpfile.js文件用法（以gulp-sass为例）\n\n     5.2.1 导入工具包 require(&apos;node_modules里对应模块&apos;)\n\n         var gulp=require(&apos;gulp&apos;)\n\n         var less=require(&apos;gulp-less&apos;);\n\n     5.2.2 定义一个testLess任务（自定义任务名称）\n\ngulp.task(&apos;testLess&apos;,function(){\n\n    gulp.src(&apos;src/less/index.less&apos;)     //该任务针对的文件\n\n    .pipe(less())      //该任务调用的模块\n\n    .pipe(gulp.dest(&apos;src/css&apos;));     //将会在src/css下生成index.css\n\n});\n\ngulp.task(&quot;default&quot;,[&quot;watch&quot;],function(){ //定义默认任务 并让gulp监视文件变化自动执行\n\ngulp.watch(&quot;sass/*.scss&quot;,[&quot;sass&quot;]);       \n\n})\n</code></pre><h2 id=\"二、gulp常用插件\"><a href=\"#二、gulp常用插件\" class=\"headerlink\" title=\"二、gulp常用插件\"></a>二、gulp常用插件</h2><h4 id=\"1、gulp-uglify-JS压缩\"><a href=\"#1、gulp-uglify-JS压缩\" class=\"headerlink\" title=\"1、gulp-uglify(JS压缩)\"></a>1、gulp-uglify(JS压缩)</h4><h5 id=\"安装：npm-install-–save-dev-gulp-uglify\"><a href=\"#安装：npm-install-–save-dev-gulp-uglify\" class=\"headerlink\" title=\"安装：npm install –save-dev gulp-uglify\"></a>安装：npm install –save-dev gulp-uglify</h5><h4 id=\"gulpfile-js代码如下：\"><a href=\"#gulpfile-js代码如下：\" class=\"headerlink\" title=\"gulpfile.js代码如下：\"></a>gulpfile.js代码如下：</h4><pre><code>var gulp = require(&apos;gulp&apos;),\n\nvar rename= require(&apos;gulp-rename&apos;)\n\nvar uglify= require(&quot;gulp-uglify&quot;);\n\ngulp.task(&apos;rename&apos;,function() {\n\n    gulp.src(&apos;src/**/*.js&apos;)\n\n    .pipe(uglify())//压缩\n\n    .pipe(rename(&apos;index.min.js&apos;))    \n\n    .pipe(gulp.dest(&apos;build/js&apos;));\n\n});\n\ngulp.task(&apos;default&apos;,[&apos;rename&apos;]);\n\nuglify= require(&quot;gulp-uglify&quot;);\n</code></pre><h4 id=\"2、gulp-minify-html（html压缩）\"><a href=\"#2、gulp-minify-html（html压缩）\" class=\"headerlink\" title=\"2、gulp-minify-html（html压缩）\"></a>2、gulp-minify-html（html压缩）</h4><h4 id=\"安装：npm-install-–save-dev-gulp-minify-html\"><a href=\"#安装：npm-install-–save-dev-gulp-minify-html\" class=\"headerlink\" title=\"安装：npm install –save-dev gulp-minify-html\"></a>安装：npm install –save-dev gulp-minify-html</h4><h4 id=\"代码如下：\"><a href=\"#代码如下：\" class=\"headerlink\" title=\"代码如下：\"></a>代码如下：</h4><pre><code>var gulp = require(&apos;gulp&apos;),\n\nvar minifyHtml= require(&quot;gulp-minify-html&quot;);\n\ngulp.task(&apos;minify-html&apos;,function() {\n\n    gulp.src(&apos;src/**/*.html&apos;)//要压缩的html文件\n\n    .pipe(minifyHtml())//压缩\n\n    .pipe(gulp.dest(&apos;build&apos;));\n\n});\n\ngulp.task(&apos;default&apos;,[&apos;minify-html&apos;]);\n</code></pre><h4 id=\"3、-gulp-concat-js文件合并\"><a href=\"#3、-gulp-concat-js文件合并\" class=\"headerlink\" title=\"3、 gulp-concat (js文件合并)\"></a>3、 gulp-concat (js文件合并)</h4><h4 id=\"安装：npm-install-–save-dev-gulp-concat\"><a href=\"#安装：npm-install-–save-dev-gulp-concat\" class=\"headerlink\" title=\"安装：npm install –save-dev gulp-concat\"></a>安装：npm install –save-dev gulp-concat</h4><h4 id=\"代码如下：-1\"><a href=\"#代码如下：-1\" class=\"headerlink\" title=\"代码如下：\"></a>代码如下：</h4><pre><code>var gulp = require(&apos;gulp&apos;),\n\nconcat= require(&quot;gulp-concat&quot;);\n\ngulp.task(&apos;concat&apos;,function() {\n\n gulp.src(&apos;src/**/*.js&apos;)  //要合并的文件\n\n .pipe(concat(&apos;index.js&apos;))  //合并匹配到的js文件并命名为 &quot;index.js&quot;\n\n .pipe(gulp.dest(&apos;build/js&apos;));\n\n});\n\ngulp.task(&apos;default&apos;,[&apos;concat&apos;]);\n</code></pre><h4 id=\"4、gulp-jada\"><a href=\"#4、gulp-jada\" class=\"headerlink\" title=\"4、gulp-jada\"></a>4、gulp-jada</h4><h4 id=\"安装：npm-install-–save-dev-gulp-jada\"><a href=\"#安装：npm-install-–save-dev-gulp-jada\" class=\"headerlink\" title=\"安装：npm install –save-dev  gulp-jada\"></a>安装：npm install –save-dev  gulp-jada</h4><h4 id=\"Gulpfile-js代码如下：\"><a href=\"#Gulpfile-js代码如下：\" class=\"headerlink\" title=\"Gulpfile.js代码如下：\"></a>Gulpfile.js代码如下：</h4><pre><code>var gulp= require(&apos;gulp&apos;);\n\nvar jade= require(&apos;gulp-jade&apos;);\n\ngulp.task(&quot;jade&quot;,function(){\n\ngulp.src(&quot;./jade/*.jade&quot;)\n\n    .pipe(jade({\n\n    pretty:true\n\n}))\n\n    .pipe(gulp.dest(&quot;html/&quot;))\n\n})\n\n    gulp.task(&quot;default&quot;,[&quot;watch&quot;],function(){\n\n    gulp.watch(&quot;jade/*.jade&quot;,[&quot;jade&quot;]);\n\n})\n</code></pre><h4 id=\"4、gulp-less\"><a href=\"#4、gulp-less\" class=\"headerlink\" title=\"4、gulp-less\"></a>4、gulp-less</h4><h4 id=\"安装：npm-install-–save-dev-gulp-less\"><a href=\"#安装：npm-install-–save-dev-gulp-less\" class=\"headerlink\" title=\"安装：npm install –save-dev  gulp-less\"></a>安装：npm install –save-dev  gulp-less</h4><h4 id=\"Gulpfile-js代码如下：-1\"><a href=\"#Gulpfile-js代码如下：-1\" class=\"headerlink\" title=\"Gulpfile.js代码如下：\"></a>Gulpfile.js代码如下：</h4><pre><code>var gulp = require(&apos;gulp&apos;),\n\nvar less= require(&quot;gulp-less&quot;);\n\ngulp.task(&apos;compile-less&apos;,function() {\n\n  gulp.src(&apos;src/less/*.less&apos;)\n\n  .pipe(less())\n\n  .pipe(gulp.dest(&apos;build/css&apos;));\n\n});\n\ngulp.task(&apos;default&apos;,[&apos;compile-less&apos;]);\n</code></pre><h4 id=\"5、gulp-sass\"><a href=\"#5、gulp-sass\" class=\"headerlink\" title=\"5、gulp-sass\"></a>5、gulp-sass</h4><h4 id=\"安装：npm-install-–save-dev-gulp-sass\"><a href=\"#安装：npm-install-–save-dev-gulp-sass\" class=\"headerlink\" title=\"安装：npm install –save-dev  gulp-sass\"></a>安装：npm install –save-dev  gulp-sass</h4><h4 id=\"代码如下：-2\"><a href=\"#代码如下：-2\" class=\"headerlink\" title=\"代码如下：\"></a>代码如下：</h4><pre><code>var gulp = require(&apos;gulp&apos;),\n\nvar sass= require(&quot;gulp-sass&quot;);\n\ngulp.task(&apos;compile-sass&apos;,function() {\n     gulp.src(&apos;src/sass/*.sass&apos;)\n\n     .pipe(sass())\n\n     .pipe(gulp.dest(&apos;build/css&apos;));\n\n});\n\ngulp.task(&apos;default&apos;,[&apos;compile-sass&apos;]);\n</code></pre><h4 id=\"6、gulp-imagemin（图片压缩）\"><a href=\"#6、gulp-imagemin（图片压缩）\" class=\"headerlink\" title=\"6、gulp-imagemin（图片压缩）\"></a>6、gulp-imagemin（图片压缩）</h4><h4 id=\"安装：npm-install-–save-dev-gulp-imagemin\"><a href=\"#安装：npm-install-–save-dev-gulp-imagemin\" class=\"headerlink\" title=\"安装：npm install –save-dev  gulp-imagemin\"></a>安装：npm install –save-dev  gulp-imagemin</h4><h4 id=\"代码如下：-3\"><a href=\"#代码如下：-3\" class=\"headerlink\" title=\"代码如下：\"></a>代码如下：</h4><pre><code>var gulp = require(&apos;gulp&apos;);\n\nvar imagemin = require(&apos;gulp-imagemin&apos;);\n\ngulp.task(&apos;uglify-imagemin&apos;,function() {returngulp.src(&apos;src/images/*&apos;)\n\n    .pipe(imagemin())\n\n    .pipe(gulp.dest(&apos;build/images&apos;));\n\n});\n\ngulp.task(&apos;default&apos;,[&apos;uglify-imagemin&apos;]);\n</code></pre><h4 id=\"7、理解Browserify\"><a href=\"#7、理解Browserify\" class=\"headerlink\" title=\"7、理解Browserify\"></a>7、理解Browserify</h4><p>browserify是一个使用node支持的CommonJS模块标准 来为浏览器编译模块的，可以解决模块及依赖管理；</p>\n<h4 id=\"先来看看使用gulp常见的问题：\"><a href=\"#先来看看使用gulp常见的问题：\" class=\"headerlink\" title=\"先来看看使用gulp常见的问题：\"></a>先来看看使用gulp常见的问题：</h4><p>使用 gulp 过程中，偶尔会遇到 Streaming not supported 这样的错误。这通常是因为常规流与 vinyl 文件对象流有差异、</p>\n<p>gulp 插件默认使用了只支持 buffer （不支持 stream）的库。比如，不能把 Node 常规流直接传递给 gulp 及其插件。</p>\n<p>比如如下代码：会抛出异常的；</p>\n<pre><code>vargulp = require(&apos;gulp&apos;);\n\nvaruglify = require(&apos;gulp-uglify&apos;);\n\nvarconcat = require(&apos;gulp-concat&apos;);\n\nvarrename = require(&apos;gulp-rename&apos;);varfs = require(&apos;fs&apos;);\n\ngulp.task(&apos;bundle&apos;,function() {returnfs.createReadStream(&apos;./test.txt&apos;)\n\n    .pipe(uglify())\n\n    .pipe(rename(&apos;bundle.min.js&apos;))\n\n    .pipe(gulp.dest(&apos;dist/&apos;));\n\n});\n\ngulp.task(&apos;default&apos;,[&apos;bundle&apos;]);\n</code></pre><p>文／原创/Dimple（github作者）<br>原文链接：<a href=\"https://cuidapao.github.io/\" target=\"_blank\" rel=\"external\">https://cuidapao.github.io/</a><br>著作权归作者所有，转载请联系作者获得授权，并标注“github作者”。</p>\n","excerpt":"","more":"<h1 id=\"gulp入门教程详解\"><a href=\"#gulp入门教程详解\" class=\"headerlink\" title=\"gulp入门教程详解\"></a>gulp入门教程详解</h1><p>最近使用gulp自动化构建工具来开发网站，在此给大家分享一下使用gulp的一些使用教程。</p>\n<h2 id=\"一、-gulp安装\"><a href=\"#一、-gulp安装\" class=\"headerlink\" title=\"一、 gulp安装\"></a>一、 gulp安装</h2><h4 id=\"1、安装nodejs\"><a href=\"#1、安装nodejs\" class=\"headerlink\" title=\"1、安装nodejs\"></a>1、安装nodejs</h4><pre><code>1.1、说明：gulp是基于nodejs，理所当然需要安装nodejs\n\n1.2、安装：打开[&lt;font style=&quot;blue&quot;&gt;nodejs官网&lt;/font&gt;](https://nodejs.org/en/)，点击硕大的绿色Download按钮，它会根据系统信息选择对应版本（.msi文件）。\n</code></pre><h4 id=\"2、全局安装gulp\"><a href=\"#2、全局安装gulp\" class=\"headerlink\" title=\"2、全局安装gulp\"></a>2、全局安装gulp</h4><pre><code>2.1、说明：全局安装gulp目的是为了通过她执行gulp任务；\n\n2.2、安装：命令提示符执行npm install gulp -g；\n\n2.3、查看是否正确安装：命令提示符执行gulp -v，出现版本号即为正确安装。\n</code></pre><h4 id=\"3、新建package-json文件\"><a href=\"#3、新建package-json文件\" class=\"headerlink\" title=\"3、新建package.json文件\"></a>3、新建package.json文件</h4><pre><code>3.1、说明：package.json是基于nodejs项目必不可少的配置文件，它是存放在项目根目录的普通json文件；\n\n3.2、执行命令提示符执行npm init进行手动安装\n\n3.3、安装完成后会在当前文件夹下看到如下package.json文件\n</code></pre><p><img src=\"http://upload-images.jianshu.io/upload_images/3164024-76d2e9fa62a00632.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Mou icon\">       </p>\n<h4 id=\"package-json文件\"><a href=\"#package-json文件\" class=\"headerlink\" title=\"package.json文件\"></a>package.json文件</h4><pre><code> 文件说明：\n\n&quot;name&quot;:&quot;test&quot;,//项目名称（必须）\n\n&quot;version&quot;:&quot;1.0.0&quot;,//项目版本（必须）\n\n&quot;description&quot;:&quot;This is for study gulp project !&quot;,//项目描述（必须）\n\n&quot;devDependencies&quot;:{//项目依赖的插件\n\n 3.4、查看package.json帮助文档，命令提示符执行npm help package.json\n</code></pre><h4 id=\"4、安装本地gulp及其常用插件\"><a href=\"#4、安装本地gulp及其常用插件\" class=\"headerlink\" title=\"4、安装本地gulp及其常用插件\"></a>4、安装本地gulp及其常用插件</h4><pre><code> 4.1、执行命令行npm install gulp 安装本地gulp\n\n4.2、安装gulp插件：以gulp—sass为例\n\n执行命令npm install gulp-sass即可安装gulp-sass插件，安装完成后即可在node_modules文件夹下查看到新安装的插件\n</code></pre><h4 id=\"5、新建gulpfile-js文件（重要）\"><a href=\"#5、新建gulpfile-js文件（重要）\" class=\"headerlink\" title=\"5、新建gulpfile.js文件（重要）\"></a>5、新建gulpfile.js文件（重要）</h4><pre><code> 5.1、说明：gulpfile.js是gulp项目的配置文件，是位于项目根目录的普通js文件（其实将gulpfile.js放入其他文件夹下亦可）\n\n 5.2、gulpfile.js文件用法（以gulp-sass为例）\n\n     5.2.1 导入工具包 require(&apos;node_modules里对应模块&apos;)\n\n         var gulp=require(&apos;gulp&apos;)\n\n         var less=require(&apos;gulp-less&apos;);\n\n     5.2.2 定义一个testLess任务（自定义任务名称）\n\ngulp.task(&apos;testLess&apos;,function(){\n\n    gulp.src(&apos;src/less/index.less&apos;)     //该任务针对的文件\n\n    .pipe(less())      //该任务调用的模块\n\n    .pipe(gulp.dest(&apos;src/css&apos;));     //将会在src/css下生成index.css\n\n});\n\ngulp.task(&quot;default&quot;,[&quot;watch&quot;],function(){ //定义默认任务 并让gulp监视文件变化自动执行\n\ngulp.watch(&quot;sass/*.scss&quot;,[&quot;sass&quot;]);       \n\n})\n</code></pre><h2 id=\"二、gulp常用插件\"><a href=\"#二、gulp常用插件\" class=\"headerlink\" title=\"二、gulp常用插件\"></a>二、gulp常用插件</h2><h4 id=\"1、gulp-uglify-JS压缩\"><a href=\"#1、gulp-uglify-JS压缩\" class=\"headerlink\" title=\"1、gulp-uglify(JS压缩)\"></a>1、gulp-uglify(JS压缩)</h4><h5 id=\"安装：npm-install-–save-dev-gulp-uglify\"><a href=\"#安装：npm-install-–save-dev-gulp-uglify\" class=\"headerlink\" title=\"安装：npm install –save-dev gulp-uglify\"></a>安装：npm install –save-dev gulp-uglify</h5><h4 id=\"gulpfile-js代码如下：\"><a href=\"#gulpfile-js代码如下：\" class=\"headerlink\" title=\"gulpfile.js代码如下：\"></a>gulpfile.js代码如下：</h4><pre><code>var gulp = require(&apos;gulp&apos;),\n\nvar rename= require(&apos;gulp-rename&apos;)\n\nvar uglify= require(&quot;gulp-uglify&quot;);\n\ngulp.task(&apos;rename&apos;,function() {\n\n    gulp.src(&apos;src/**/*.js&apos;)\n\n    .pipe(uglify())//压缩\n\n    .pipe(rename(&apos;index.min.js&apos;))    \n\n    .pipe(gulp.dest(&apos;build/js&apos;));\n\n});\n\ngulp.task(&apos;default&apos;,[&apos;rename&apos;]);\n\nuglify= require(&quot;gulp-uglify&quot;);\n</code></pre><h4 id=\"2、gulp-minify-html（html压缩）\"><a href=\"#2、gulp-minify-html（html压缩）\" class=\"headerlink\" title=\"2、gulp-minify-html（html压缩）\"></a>2、gulp-minify-html（html压缩）</h4><h4 id=\"安装：npm-install-–save-dev-gulp-minify-html\"><a href=\"#安装：npm-install-–save-dev-gulp-minify-html\" class=\"headerlink\" title=\"安装：npm install –save-dev gulp-minify-html\"></a>安装：npm install –save-dev gulp-minify-html</h4><h4 id=\"代码如下：\"><a href=\"#代码如下：\" class=\"headerlink\" title=\"代码如下：\"></a>代码如下：</h4><pre><code>var gulp = require(&apos;gulp&apos;),\n\nvar minifyHtml= require(&quot;gulp-minify-html&quot;);\n\ngulp.task(&apos;minify-html&apos;,function() {\n\n    gulp.src(&apos;src/**/*.html&apos;)//要压缩的html文件\n\n    .pipe(minifyHtml())//压缩\n\n    .pipe(gulp.dest(&apos;build&apos;));\n\n});\n\ngulp.task(&apos;default&apos;,[&apos;minify-html&apos;]);\n</code></pre><h4 id=\"3、-gulp-concat-js文件合并\"><a href=\"#3、-gulp-concat-js文件合并\" class=\"headerlink\" title=\"3、 gulp-concat (js文件合并)\"></a>3、 gulp-concat (js文件合并)</h4><h4 id=\"安装：npm-install-–save-dev-gulp-concat\"><a href=\"#安装：npm-install-–save-dev-gulp-concat\" class=\"headerlink\" title=\"安装：npm install –save-dev gulp-concat\"></a>安装：npm install –save-dev gulp-concat</h4><h4 id=\"代码如下：-1\"><a href=\"#代码如下：-1\" class=\"headerlink\" title=\"代码如下：\"></a>代码如下：</h4><pre><code>var gulp = require(&apos;gulp&apos;),\n\nconcat= require(&quot;gulp-concat&quot;);\n\ngulp.task(&apos;concat&apos;,function() {\n\n gulp.src(&apos;src/**/*.js&apos;)  //要合并的文件\n\n .pipe(concat(&apos;index.js&apos;))  //合并匹配到的js文件并命名为 &quot;index.js&quot;\n\n .pipe(gulp.dest(&apos;build/js&apos;));\n\n});\n\ngulp.task(&apos;default&apos;,[&apos;concat&apos;]);\n</code></pre><h4 id=\"4、gulp-jada\"><a href=\"#4、gulp-jada\" class=\"headerlink\" title=\"4、gulp-jada\"></a>4、gulp-jada</h4><h4 id=\"安装：npm-install-–save-dev-gulp-jada\"><a href=\"#安装：npm-install-–save-dev-gulp-jada\" class=\"headerlink\" title=\"安装：npm install –save-dev  gulp-jada\"></a>安装：npm install –save-dev  gulp-jada</h4><h4 id=\"Gulpfile-js代码如下：\"><a href=\"#Gulpfile-js代码如下：\" class=\"headerlink\" title=\"Gulpfile.js代码如下：\"></a>Gulpfile.js代码如下：</h4><pre><code>var gulp= require(&apos;gulp&apos;);\n\nvar jade= require(&apos;gulp-jade&apos;);\n\ngulp.task(&quot;jade&quot;,function(){\n\ngulp.src(&quot;./jade/*.jade&quot;)\n\n    .pipe(jade({\n\n    pretty:true\n\n}))\n\n    .pipe(gulp.dest(&quot;html/&quot;))\n\n})\n\n    gulp.task(&quot;default&quot;,[&quot;watch&quot;],function(){\n\n    gulp.watch(&quot;jade/*.jade&quot;,[&quot;jade&quot;]);\n\n})\n</code></pre><h4 id=\"4、gulp-less\"><a href=\"#4、gulp-less\" class=\"headerlink\" title=\"4、gulp-less\"></a>4、gulp-less</h4><h4 id=\"安装：npm-install-–save-dev-gulp-less\"><a href=\"#安装：npm-install-–save-dev-gulp-less\" class=\"headerlink\" title=\"安装：npm install –save-dev  gulp-less\"></a>安装：npm install –save-dev  gulp-less</h4><h4 id=\"Gulpfile-js代码如下：-1\"><a href=\"#Gulpfile-js代码如下：-1\" class=\"headerlink\" title=\"Gulpfile.js代码如下：\"></a>Gulpfile.js代码如下：</h4><pre><code>var gulp = require(&apos;gulp&apos;),\n\nvar less= require(&quot;gulp-less&quot;);\n\ngulp.task(&apos;compile-less&apos;,function() {\n\n  gulp.src(&apos;src/less/*.less&apos;)\n\n  .pipe(less())\n\n  .pipe(gulp.dest(&apos;build/css&apos;));\n\n});\n\ngulp.task(&apos;default&apos;,[&apos;compile-less&apos;]);\n</code></pre><h4 id=\"5、gulp-sass\"><a href=\"#5、gulp-sass\" class=\"headerlink\" title=\"5、gulp-sass\"></a>5、gulp-sass</h4><h4 id=\"安装：npm-install-–save-dev-gulp-sass\"><a href=\"#安装：npm-install-–save-dev-gulp-sass\" class=\"headerlink\" title=\"安装：npm install –save-dev  gulp-sass\"></a>安装：npm install –save-dev  gulp-sass</h4><h4 id=\"代码如下：-2\"><a href=\"#代码如下：-2\" class=\"headerlink\" title=\"代码如下：\"></a>代码如下：</h4><pre><code>var gulp = require(&apos;gulp&apos;),\n\nvar sass= require(&quot;gulp-sass&quot;);\n\ngulp.task(&apos;compile-sass&apos;,function() {\n     gulp.src(&apos;src/sass/*.sass&apos;)\n\n     .pipe(sass())\n\n     .pipe(gulp.dest(&apos;build/css&apos;));\n\n});\n\ngulp.task(&apos;default&apos;,[&apos;compile-sass&apos;]);\n</code></pre><h4 id=\"6、gulp-imagemin（图片压缩）\"><a href=\"#6、gulp-imagemin（图片压缩）\" class=\"headerlink\" title=\"6、gulp-imagemin（图片压缩）\"></a>6、gulp-imagemin（图片压缩）</h4><h4 id=\"安装：npm-install-–save-dev-gulp-imagemin\"><a href=\"#安装：npm-install-–save-dev-gulp-imagemin\" class=\"headerlink\" title=\"安装：npm install –save-dev  gulp-imagemin\"></a>安装：npm install –save-dev  gulp-imagemin</h4><h4 id=\"代码如下：-3\"><a href=\"#代码如下：-3\" class=\"headerlink\" title=\"代码如下：\"></a>代码如下：</h4><pre><code>var gulp = require(&apos;gulp&apos;);\n\nvar imagemin = require(&apos;gulp-imagemin&apos;);\n\ngulp.task(&apos;uglify-imagemin&apos;,function() {returngulp.src(&apos;src/images/*&apos;)\n\n    .pipe(imagemin())\n\n    .pipe(gulp.dest(&apos;build/images&apos;));\n\n});\n\ngulp.task(&apos;default&apos;,[&apos;uglify-imagemin&apos;]);\n</code></pre><h4 id=\"7、理解Browserify\"><a href=\"#7、理解Browserify\" class=\"headerlink\" title=\"7、理解Browserify\"></a>7、理解Browserify</h4><p>browserify是一个使用node支持的CommonJS模块标准 来为浏览器编译模块的，可以解决模块及依赖管理；</p>\n<h4 id=\"先来看看使用gulp常见的问题：\"><a href=\"#先来看看使用gulp常见的问题：\" class=\"headerlink\" title=\"先来看看使用gulp常见的问题：\"></a>先来看看使用gulp常见的问题：</h4><p>使用 gulp 过程中，偶尔会遇到 Streaming not supported 这样的错误。这通常是因为常规流与 vinyl 文件对象流有差异、</p>\n<p>gulp 插件默认使用了只支持 buffer （不支持 stream）的库。比如，不能把 Node 常规流直接传递给 gulp 及其插件。</p>\n<p>比如如下代码：会抛出异常的；</p>\n<pre><code>vargulp = require(&apos;gulp&apos;);\n\nvaruglify = require(&apos;gulp-uglify&apos;);\n\nvarconcat = require(&apos;gulp-concat&apos;);\n\nvarrename = require(&apos;gulp-rename&apos;);varfs = require(&apos;fs&apos;);\n\ngulp.task(&apos;bundle&apos;,function() {returnfs.createReadStream(&apos;./test.txt&apos;)\n\n    .pipe(uglify())\n\n    .pipe(rename(&apos;bundle.min.js&apos;))\n\n    .pipe(gulp.dest(&apos;dist/&apos;));\n\n});\n\ngulp.task(&apos;default&apos;,[&apos;bundle&apos;]);\n</code></pre><p>文／原创/Dimple（github作者）<br>原文链接：<a href=\"https://cuidapao.github.io/\">https://cuidapao.github.io/</a><br>著作权归作者所有，转载请联系作者获得授权，并标注“github作者”。</p>\n"},{"title":"hexo","date":"2016-03-16T06:09:54.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: hexo\ndate: 2016-3-16 14:09:54\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2016-11-16T09:37:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civoyb9n300019xsmn5kstp8s","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"基于vue直播播放器实战","date":"2016-07-20T02:42:11.000Z","_content":"\n#\t基于 Vue 的直播播放器实战\n\n![Mou icon](http://7xr2s7.com1.z0.glb.clouddn.com/%E5%9F%BA%E4%BA%8E%20Vue%20%E7%9A%84%E7%9B%B4%E6%92%AD%E6%92%AD%E6%94%BE%E5%99%A8%E5%AE%9E%E6%88%98.jpeg)\n## <font style=\"color:red\"> --前言-- </font>\n\n#### 时下直播的盛行让很多人对直播技术产生浓厚的兴趣，Dimple 本人也不例外，本文借着实战的目的完成一个 demo，并没有深入的讲解直播技术的实现原理以及推流和拉流的实现，为什么不深入讲解直播的底层技术，原因很简单大公司没必要看我的文章去了解如何搭建直播服务器，小企业又没有不要去搭建自己的直播服务器，因为涉及到的技术繁杂又琐碎，感兴趣的直接谷歌，各位大神有不同深度的讲解怎么去搭建自己的直播服务器，那么小企业人员、资金和技术有限怎么办，没错！买服务！！！\n\n#### 直播云服务也是今年的一个亮点，各大云平台都在做直播的服务，至于快慢选择的话 Dimple 只用过七牛云直播，没办法拿数据给大家建议\n\n#### 七牛的文档给的比较详细，如何获得自己的直播空间，如何绑定备案域名，如何解析域名，如何创建直播间以及整个的工作流程先上[ <font style=\"color:blue\">《JavaScript闯关记》</font> ](http://developer.qiniu.com/article/index.html#pili/),其次看 [<font style=\"color:blue\">github 上的库</font>](https://github.com/pili-engineering)\n\n#### 整个过程相信大家都能顺利完成，说到我们的播放器拉流，那么播放的来源怎么获取呢？有安卓和ios开发经验的可以用移动端推流，没有经验的也不要紧推荐一个[<font style=\"color:blue\">斗鱼的 OBS 教程</font>](https://www.douyu.com/cms/zhibo/201311/13/250.shtml)\n\n\n\n\t注：以上的直播空间的搭建没有完成也可以看本文，更希望大家可以做成一个完整的 demo，我们的重点还是在于播放器的实现。\n\t\n## <font style=\"color:red\"> --直播协议-- </font>\n\n#### 首先，需要知道直播的常用协议，RTMP 和 HLS，经过测试在七牛云直播平台不采用加速的情况下 RTMP 的延时在 10s 内，HLS 在 10-20s。经过优化后的还没测试过。\n\n#### 至于这两个协议的选择还需要根据实际情况而定（只看延时大小是不对滴），还是给链接[<font style=\"blue\">直播协议的选择：RTMP vs. HLS</font>](http://www.samirchen.com/ios-rtmp-vs-hls/)\n\n## <font style=\"color:red\"> --Vue 结合-- </font>\n\n#### 做过 H5 播放器的对与 video.js 并不陌生，实现的出发点也是在 video.js 上，默认大家都有 Vue 搭建和简单运用能力了，没有经验的可以看 orange 之前写的入门文章。\n\n首先我们要新建一个组件，这个组件就是播放器的组件，组件名随意，最初的想法是直接使用 video.js，但是踩的坑比较深所以不推荐直接使用。\n\n\t坑：首次载入不会有问题，路由跳转后再回来如果不刷新页面，import 进来的 videojs 并不会执行，所以需要在 mounted 里执行 videojs() 函数，然后传对应的参数进去，最后需要加入下面代码防止监听函数在切换路由后继续执行。\n#### 坑也踩完了，于是逛了一圈 github，发现了一个项目叫 vue-video-player\n\n#### 先安装依赖\n\n\tnpm install vue-video-player --save\n\t\n#### 引用依赖\n\n\n\t// import with ES6\n\timport Vue from 'vue'\n\t...\n\timport VideoPlayer from 'vue-video-player'\n\n\n\t// require with Node.js/Webpack\n\tvar Vue = require('vue')\n\t...\n\tvar VideoPlayer = require('vue-video-player')\n\n\t// The default is to turn off some of the features, you can choose according to their use of certain \tfeatures enabled, do not enable the introduction will not require the corresponding file. 默认有些功能\t是不开启的，比如youtube国内不能用，则默认是关闭的，如果不启用对应的功能，则不会引入对应的包，减少项目代码体积，当然也有\t可能意味着对应的功能可能会出错，true 是开启，false是关闭，正常情况使用者不需要care就可以。\n\n\t// Example(Only applies to the current global mode). 用配置项的话仅支持全局模式来配置，否则不会生效\n\tVideoPlayer.config({\n \t youtube: true, // default false\n\t  switcher: false, // default true\n\t  hls: false // default true\n\t})\n\n\t// use\n\tVue.use(VideoPlayer)\n\n\t// --------------------------------------\n\n\t// or use with component(ES6)\n\timport Vue from 'vue'\n\t// ...\n\timport { videoPlayer } from 'vue-video-player'\n\n\t// use\n\texport default {\n  \tcomponents: {\n    \tvideoPlayer\n  \t}\n\t}\n\t\n#### HLS\n\n\n#### 这里默认给出了 HLS 的方案，我们先去全局引入，到 main.js\t\t\n\n\timport VideoPlayer from 'vue-video-player';\n\n\tVideoPlayer.config({\n \t youtube: true,\n \t switcher: true,\n \t hls: true\n\t})\n\n\tVue.use(VideoPlayer)\n\n#### 下面看下我的 component\n\n\n\t<template>\n  \t\t<video-player :options=\"videoOptions\"></video-player>\n\t</template>\n\n\t<script>\n\texport default {\n  \tname: 'Play',\n \t data () {\n \t   return {\n  \t    videoOptions: {\n     \t   source: {\n      \t    type: \"application/x-mpegURL\",\n       \t   src: 'https://logos-channel.scaleengine.net/logos-channel/live/biblescreen-ad-free/\tplaylist.m3u8',\n      \t    withCredentials: false\n    \t    },\n    \t    language: 'zh-CN',\n    \t    live: true,\n    \t    autoplay: true,\n    \t    height: 540\n      \t\t}\n   \t\t  }\n  \t\t}\n\t }\n\t</script>\n\t\n#### 到这里你的播放器就可以播放 HLS 链接了\t\n\n\n#### RTMP \n\n\n#### 上面说到库底层还是依赖 video.js， 所以呢我们不妨直接这样使用\n\n\n\texport default {\n \t\t name: 'Play',\n  \t\t data () {\n    \t\treturn {\n      \t\t videoOptions: {\n        \t   source: {\n         \t\t type: \"rtmp/mp4\",\n          \t\t src: 'rtmp://your.streaming.provider.net/cfx/st/&mp4:path/to/video.mp4',\n            \t withCredentials: false\n       \t\t },\n        \t\tlanguage: 'zh-CN',\n        \t\tlive: true,\n        \t\tautoplay: true,\n        \t\theight: 540\n      \t\t}\n    \t }\n  \t  }\n\t}\n## <font style=\"color:red\"> --总结-- </font>\n\n#### 两种方法均可尝试，上面给出的 src 换成自己的链接就实现拉流播放啦，当然你如果不用 vue 的话也没关系，直接参照 video.js 的官网，单是 RTMP 的话不需要第三方库，如果是 HLS 的话需要引入[<font style=\"color:blue\">videojs-contrib-hls</font>](https://github.com/videojs/videojs-contrib-hls)，看具体情况而定。\n\n🔗原文链接: [http://orangexc.xyz/2016/11/14/Live-video-player/](http://orangexc.xyz/2016/11/14/Live-video-player/) by @Orange","source":"_posts/基于 Vue 的直播播放器实战.md","raw":"---\ntitle: 基于vue直播播放器实战\ndate: 2016-7-20 10:42:11\ntags: [vue,基于vue直播播放器实战]\n---\n\n#\t基于 Vue 的直播播放器实战\n\n![Mou icon](http://7xr2s7.com1.z0.glb.clouddn.com/%E5%9F%BA%E4%BA%8E%20Vue%20%E7%9A%84%E7%9B%B4%E6%92%AD%E6%92%AD%E6%94%BE%E5%99%A8%E5%AE%9E%E6%88%98.jpeg)\n## <font style=\"color:red\"> --前言-- </font>\n\n#### 时下直播的盛行让很多人对直播技术产生浓厚的兴趣，Dimple 本人也不例外，本文借着实战的目的完成一个 demo，并没有深入的讲解直播技术的实现原理以及推流和拉流的实现，为什么不深入讲解直播的底层技术，原因很简单大公司没必要看我的文章去了解如何搭建直播服务器，小企业又没有不要去搭建自己的直播服务器，因为涉及到的技术繁杂又琐碎，感兴趣的直接谷歌，各位大神有不同深度的讲解怎么去搭建自己的直播服务器，那么小企业人员、资金和技术有限怎么办，没错！买服务！！！\n\n#### 直播云服务也是今年的一个亮点，各大云平台都在做直播的服务，至于快慢选择的话 Dimple 只用过七牛云直播，没办法拿数据给大家建议\n\n#### 七牛的文档给的比较详细，如何获得自己的直播空间，如何绑定备案域名，如何解析域名，如何创建直播间以及整个的工作流程先上[ <font style=\"color:blue\">《JavaScript闯关记》</font> ](http://developer.qiniu.com/article/index.html#pili/),其次看 [<font style=\"color:blue\">github 上的库</font>](https://github.com/pili-engineering)\n\n#### 整个过程相信大家都能顺利完成，说到我们的播放器拉流，那么播放的来源怎么获取呢？有安卓和ios开发经验的可以用移动端推流，没有经验的也不要紧推荐一个[<font style=\"color:blue\">斗鱼的 OBS 教程</font>](https://www.douyu.com/cms/zhibo/201311/13/250.shtml)\n\n\n\n\t注：以上的直播空间的搭建没有完成也可以看本文，更希望大家可以做成一个完整的 demo，我们的重点还是在于播放器的实现。\n\t\n## <font style=\"color:red\"> --直播协议-- </font>\n\n#### 首先，需要知道直播的常用协议，RTMP 和 HLS，经过测试在七牛云直播平台不采用加速的情况下 RTMP 的延时在 10s 内，HLS 在 10-20s。经过优化后的还没测试过。\n\n#### 至于这两个协议的选择还需要根据实际情况而定（只看延时大小是不对滴），还是给链接[<font style=\"blue\">直播协议的选择：RTMP vs. HLS</font>](http://www.samirchen.com/ios-rtmp-vs-hls/)\n\n## <font style=\"color:red\"> --Vue 结合-- </font>\n\n#### 做过 H5 播放器的对与 video.js 并不陌生，实现的出发点也是在 video.js 上，默认大家都有 Vue 搭建和简单运用能力了，没有经验的可以看 orange 之前写的入门文章。\n\n首先我们要新建一个组件，这个组件就是播放器的组件，组件名随意，最初的想法是直接使用 video.js，但是踩的坑比较深所以不推荐直接使用。\n\n\t坑：首次载入不会有问题，路由跳转后再回来如果不刷新页面，import 进来的 videojs 并不会执行，所以需要在 mounted 里执行 videojs() 函数，然后传对应的参数进去，最后需要加入下面代码防止监听函数在切换路由后继续执行。\n#### 坑也踩完了，于是逛了一圈 github，发现了一个项目叫 vue-video-player\n\n#### 先安装依赖\n\n\tnpm install vue-video-player --save\n\t\n#### 引用依赖\n\n\n\t// import with ES6\n\timport Vue from 'vue'\n\t...\n\timport VideoPlayer from 'vue-video-player'\n\n\n\t// require with Node.js/Webpack\n\tvar Vue = require('vue')\n\t...\n\tvar VideoPlayer = require('vue-video-player')\n\n\t// The default is to turn off some of the features, you can choose according to their use of certain \tfeatures enabled, do not enable the introduction will not require the corresponding file. 默认有些功能\t是不开启的，比如youtube国内不能用，则默认是关闭的，如果不启用对应的功能，则不会引入对应的包，减少项目代码体积，当然也有\t可能意味着对应的功能可能会出错，true 是开启，false是关闭，正常情况使用者不需要care就可以。\n\n\t// Example(Only applies to the current global mode). 用配置项的话仅支持全局模式来配置，否则不会生效\n\tVideoPlayer.config({\n \t youtube: true, // default false\n\t  switcher: false, // default true\n\t  hls: false // default true\n\t})\n\n\t// use\n\tVue.use(VideoPlayer)\n\n\t// --------------------------------------\n\n\t// or use with component(ES6)\n\timport Vue from 'vue'\n\t// ...\n\timport { videoPlayer } from 'vue-video-player'\n\n\t// use\n\texport default {\n  \tcomponents: {\n    \tvideoPlayer\n  \t}\n\t}\n\t\n#### HLS\n\n\n#### 这里默认给出了 HLS 的方案，我们先去全局引入，到 main.js\t\t\n\n\timport VideoPlayer from 'vue-video-player';\n\n\tVideoPlayer.config({\n \t youtube: true,\n \t switcher: true,\n \t hls: true\n\t})\n\n\tVue.use(VideoPlayer)\n\n#### 下面看下我的 component\n\n\n\t<template>\n  \t\t<video-player :options=\"videoOptions\"></video-player>\n\t</template>\n\n\t<script>\n\texport default {\n  \tname: 'Play',\n \t data () {\n \t   return {\n  \t    videoOptions: {\n     \t   source: {\n      \t    type: \"application/x-mpegURL\",\n       \t   src: 'https://logos-channel.scaleengine.net/logos-channel/live/biblescreen-ad-free/\tplaylist.m3u8',\n      \t    withCredentials: false\n    \t    },\n    \t    language: 'zh-CN',\n    \t    live: true,\n    \t    autoplay: true,\n    \t    height: 540\n      \t\t}\n   \t\t  }\n  \t\t}\n\t }\n\t</script>\n\t\n#### 到这里你的播放器就可以播放 HLS 链接了\t\n\n\n#### RTMP \n\n\n#### 上面说到库底层还是依赖 video.js， 所以呢我们不妨直接这样使用\n\n\n\texport default {\n \t\t name: 'Play',\n  \t\t data () {\n    \t\treturn {\n      \t\t videoOptions: {\n        \t   source: {\n         \t\t type: \"rtmp/mp4\",\n          \t\t src: 'rtmp://your.streaming.provider.net/cfx/st/&mp4:path/to/video.mp4',\n            \t withCredentials: false\n       \t\t },\n        \t\tlanguage: 'zh-CN',\n        \t\tlive: true,\n        \t\tautoplay: true,\n        \t\theight: 540\n      \t\t}\n    \t }\n  \t  }\n\t}\n## <font style=\"color:red\"> --总结-- </font>\n\n#### 两种方法均可尝试，上面给出的 src 换成自己的链接就实现拉流播放啦，当然你如果不用 vue 的话也没关系，直接参照 video.js 的官网，单是 RTMP 的话不需要第三方库，如果是 HLS 的话需要引入[<font style=\"color:blue\">videojs-contrib-hls</font>](https://github.com/videojs/videojs-contrib-hls)，看具体情况而定。\n\n🔗原文链接: [http://orangexc.xyz/2016/11/14/Live-video-player/](http://orangexc.xyz/2016/11/14/Live-video-player/) by @Orange","slug":"基于 Vue 的直播播放器实战","published":1,"updated":"2016-11-16T12:50:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civoyb9n900039xsmaf7bxpev","content":"<h1 id=\"基于-Vue-的直播播放器实战\"><a href=\"#基于-Vue-的直播播放器实战\" class=\"headerlink\" title=\"基于 Vue 的直播播放器实战\"></a>基于 Vue 的直播播放器实战</h1><p><img src=\"http://7xr2s7.com1.z0.glb.clouddn.com/%E5%9F%BA%E4%BA%8E%20Vue%20%E7%9A%84%E7%9B%B4%E6%92%AD%E6%92%AD%E6%94%BE%E5%99%A8%E5%AE%9E%E6%88%98.jpeg\" alt=\"Mou icon\"></p>\n<h2 id=\"–前言–\"><a href=\"#–前言–\" class=\"headerlink\" title=\" –前言– \"></a><font style=\"color:red\"> –前言– </font></h2><h4 id=\"时下直播的盛行让很多人对直播技术产生浓厚的兴趣，Dimple-本人也不例外，本文借着实战的目的完成一个-demo，并没有深入的讲解直播技术的实现原理以及推流和拉流的实现，为什么不深入讲解直播的底层技术，原因很简单大公司没必要看我的文章去了解如何搭建直播服务器，小企业又没有不要去搭建自己的直播服务器，因为涉及到的技术繁杂又琐碎，感兴趣的直接谷歌，各位大神有不同深度的讲解怎么去搭建自己的直播服务器，那么小企业人员、资金和技术有限怎么办，没错！买服务！！！\"><a href=\"#时下直播的盛行让很多人对直播技术产生浓厚的兴趣，Dimple-本人也不例外，本文借着实战的目的完成一个-demo，并没有深入的讲解直播技术的实现原理以及推流和拉流的实现，为什么不深入讲解直播的底层技术，原因很简单大公司没必要看我的文章去了解如何搭建直播服务器，小企业又没有不要去搭建自己的直播服务器，因为涉及到的技术繁杂又琐碎，感兴趣的直接谷歌，各位大神有不同深度的讲解怎么去搭建自己的直播服务器，那么小企业人员、资金和技术有限怎么办，没错！买服务！！！\" class=\"headerlink\" title=\"时下直播的盛行让很多人对直播技术产生浓厚的兴趣，Dimple 本人也不例外，本文借着实战的目的完成一个 demo，并没有深入的讲解直播技术的实现原理以及推流和拉流的实现，为什么不深入讲解直播的底层技术，原因很简单大公司没必要看我的文章去了解如何搭建直播服务器，小企业又没有不要去搭建自己的直播服务器，因为涉及到的技术繁杂又琐碎，感兴趣的直接谷歌，各位大神有不同深度的讲解怎么去搭建自己的直播服务器，那么小企业人员、资金和技术有限怎么办，没错！买服务！！！\"></a>时下直播的盛行让很多人对直播技术产生浓厚的兴趣，Dimple 本人也不例外，本文借着实战的目的完成一个 demo，并没有深入的讲解直播技术的实现原理以及推流和拉流的实现，为什么不深入讲解直播的底层技术，原因很简单大公司没必要看我的文章去了解如何搭建直播服务器，小企业又没有不要去搭建自己的直播服务器，因为涉及到的技术繁杂又琐碎，感兴趣的直接谷歌，各位大神有不同深度的讲解怎么去搭建自己的直播服务器，那么小企业人员、资金和技术有限怎么办，没错！买服务！！！</h4><h4 id=\"直播云服务也是今年的一个亮点，各大云平台都在做直播的服务，至于快慢选择的话-Dimple-只用过七牛云直播，没办法拿数据给大家建议\"><a href=\"#直播云服务也是今年的一个亮点，各大云平台都在做直播的服务，至于快慢选择的话-Dimple-只用过七牛云直播，没办法拿数据给大家建议\" class=\"headerlink\" title=\"直播云服务也是今年的一个亮点，各大云平台都在做直播的服务，至于快慢选择的话 Dimple 只用过七牛云直播，没办法拿数据给大家建议\"></a>直播云服务也是今年的一个亮点，各大云平台都在做直播的服务，至于快慢选择的话 Dimple 只用过七牛云直播，没办法拿数据给大家建议</h4><h4 id=\"七牛的文档给的比较详细，如何获得自己的直播空间，如何绑定备案域名，如何解析域名，如何创建直播间以及整个的工作流程先上-《JavaScript闯关记》-其次看-github-上的库\"><a href=\"#七牛的文档给的比较详细，如何获得自己的直播空间，如何绑定备案域名，如何解析域名，如何创建直播间以及整个的工作流程先上-《JavaScript闯关记》-其次看-github-上的库\" class=\"headerlink\" title=\"七牛的文档给的比较详细，如何获得自己的直播空间，如何绑定备案域名，如何解析域名，如何创建直播间以及整个的工作流程先上 《JavaScript闯关记》 ,其次看 github 上的库\"></a>七牛的文档给的比较详细，如何获得自己的直播空间，如何绑定备案域名，如何解析域名，如何创建直播间以及整个的工作流程先上<a href=\"http://developer.qiniu.com/article/index.html#pili/\" target=\"_blank\" rel=\"external\"> <font style=\"color:blue\">《JavaScript闯关记》</font> </a>,其次看 <a href=\"https://github.com/pili-engineering\" target=\"_blank\" rel=\"external\"><font style=\"color:blue\">github 上的库</font></a></h4><h4 id=\"整个过程相信大家都能顺利完成，说到我们的播放器拉流，那么播放的来源怎么获取呢？有安卓和ios开发经验的可以用移动端推流，没有经验的也不要紧推荐一个斗鱼的-OBS-教程\"><a href=\"#整个过程相信大家都能顺利完成，说到我们的播放器拉流，那么播放的来源怎么获取呢？有安卓和ios开发经验的可以用移动端推流，没有经验的也不要紧推荐一个斗鱼的-OBS-教程\" class=\"headerlink\" title=\"整个过程相信大家都能顺利完成，说到我们的播放器拉流，那么播放的来源怎么获取呢？有安卓和ios开发经验的可以用移动端推流，没有经验的也不要紧推荐一个斗鱼的 OBS 教程\"></a>整个过程相信大家都能顺利完成，说到我们的播放器拉流，那么播放的来源怎么获取呢？有安卓和ios开发经验的可以用移动端推流，没有经验的也不要紧推荐一个<a href=\"https://www.douyu.com/cms/zhibo/201311/13/250.shtml\" target=\"_blank\" rel=\"external\"><font style=\"color:blue\">斗鱼的 OBS 教程</font></a></h4><pre><code>注：以上的直播空间的搭建没有完成也可以看本文，更希望大家可以做成一个完整的 demo，我们的重点还是在于播放器的实现。\n</code></pre><h2 id=\"–直播协议–\"><a href=\"#–直播协议–\" class=\"headerlink\" title=\" –直播协议– \"></a><font style=\"color:red\"> –直播协议– </font></h2><h4 id=\"首先，需要知道直播的常用协议，RTMP-和-HLS，经过测试在七牛云直播平台不采用加速的情况下-RTMP-的延时在-10s-内，HLS-在-10-20s。经过优化后的还没测试过。\"><a href=\"#首先，需要知道直播的常用协议，RTMP-和-HLS，经过测试在七牛云直播平台不采用加速的情况下-RTMP-的延时在-10s-内，HLS-在-10-20s。经过优化后的还没测试过。\" class=\"headerlink\" title=\"首先，需要知道直播的常用协议，RTMP 和 HLS，经过测试在七牛云直播平台不采用加速的情况下 RTMP 的延时在 10s 内，HLS 在 10-20s。经过优化后的还没测试过。\"></a>首先，需要知道直播的常用协议，RTMP 和 HLS，经过测试在七牛云直播平台不采用加速的情况下 RTMP 的延时在 10s 内，HLS 在 10-20s。经过优化后的还没测试过。</h4><h4 id=\"至于这两个协议的选择还需要根据实际情况而定（只看延时大小是不对滴），还是给链接直播协议的选择：RTMP-vs-HLS\"><a href=\"#至于这两个协议的选择还需要根据实际情况而定（只看延时大小是不对滴），还是给链接直播协议的选择：RTMP-vs-HLS\" class=\"headerlink\" title=\"至于这两个协议的选择还需要根据实际情况而定（只看延时大小是不对滴），还是给链接直播协议的选择：RTMP vs. HLS\"></a>至于这两个协议的选择还需要根据实际情况而定（只看延时大小是不对滴），还是给链接<a href=\"http://www.samirchen.com/ios-rtmp-vs-hls/\" target=\"_blank\" rel=\"external\"><font style=\"blue\">直播协议的选择：RTMP vs. HLS</font></a></h4><h2 id=\"–Vue-结合–\"><a href=\"#–Vue-结合–\" class=\"headerlink\" title=\" –Vue 结合– \"></a><font style=\"color:red\"> –Vue 结合– </font></h2><h4 id=\"做过-H5-播放器的对与-video-js-并不陌生，实现的出发点也是在-video-js-上，默认大家都有-Vue-搭建和简单运用能力了，没有经验的可以看-orange-之前写的入门文章。\"><a href=\"#做过-H5-播放器的对与-video-js-并不陌生，实现的出发点也是在-video-js-上，默认大家都有-Vue-搭建和简单运用能力了，没有经验的可以看-orange-之前写的入门文章。\" class=\"headerlink\" title=\"做过 H5 播放器的对与 video.js 并不陌生，实现的出发点也是在 video.js 上，默认大家都有 Vue 搭建和简单运用能力了，没有经验的可以看 orange 之前写的入门文章。\"></a>做过 H5 播放器的对与 video.js 并不陌生，实现的出发点也是在 video.js 上，默认大家都有 Vue 搭建和简单运用能力了，没有经验的可以看 orange 之前写的入门文章。</h4><p>首先我们要新建一个组件，这个组件就是播放器的组件，组件名随意，最初的想法是直接使用 video.js，但是踩的坑比较深所以不推荐直接使用。</p>\n<pre><code>坑：首次载入不会有问题，路由跳转后再回来如果不刷新页面，import 进来的 videojs 并不会执行，所以需要在 mounted 里执行 videojs() 函数，然后传对应的参数进去，最后需要加入下面代码防止监听函数在切换路由后继续执行。\n</code></pre><h4 id=\"坑也踩完了，于是逛了一圈-github，发现了一个项目叫-vue-video-player\"><a href=\"#坑也踩完了，于是逛了一圈-github，发现了一个项目叫-vue-video-player\" class=\"headerlink\" title=\"坑也踩完了，于是逛了一圈 github，发现了一个项目叫 vue-video-player\"></a>坑也踩完了，于是逛了一圈 github，发现了一个项目叫 vue-video-player</h4><h4 id=\"先安装依赖\"><a href=\"#先安装依赖\" class=\"headerlink\" title=\"先安装依赖\"></a>先安装依赖</h4><pre><code>npm install vue-video-player --save\n</code></pre><h4 id=\"引用依赖\"><a href=\"#引用依赖\" class=\"headerlink\" title=\"引用依赖\"></a>引用依赖</h4><pre><code>// import with ES6\nimport Vue from &apos;vue&apos;\n...\nimport VideoPlayer from &apos;vue-video-player&apos;\n\n\n// require with Node.js/Webpack\nvar Vue = require(&apos;vue&apos;)\n...\nvar VideoPlayer = require(&apos;vue-video-player&apos;)\n\n// The default is to turn off some of the features, you can choose according to their use of certain     features enabled, do not enable the introduction will not require the corresponding file. 默认有些功能    是不开启的，比如youtube国内不能用，则默认是关闭的，如果不启用对应的功能，则不会引入对应的包，减少项目代码体积，当然也有    可能意味着对应的功能可能会出错，true 是开启，false是关闭，正常情况使用者不需要care就可以。\n\n// Example(Only applies to the current global mode). 用配置项的话仅支持全局模式来配置，否则不会生效\nVideoPlayer.config({\n  youtube: true, // default false\n  switcher: false, // default true\n  hls: false // default true\n})\n\n// use\nVue.use(VideoPlayer)\n\n// --------------------------------------\n\n// or use with component(ES6)\nimport Vue from &apos;vue&apos;\n// ...\nimport { videoPlayer } from &apos;vue-video-player&apos;\n\n// use\nexport default {\n  components: {\n    videoPlayer\n  }\n}\n</code></pre><h4 id=\"HLS\"><a href=\"#HLS\" class=\"headerlink\" title=\"HLS\"></a>HLS</h4><h4 id=\"这里默认给出了-HLS-的方案，我们先去全局引入，到-main-js\"><a href=\"#这里默认给出了-HLS-的方案，我们先去全局引入，到-main-js\" class=\"headerlink\" title=\"这里默认给出了 HLS 的方案，我们先去全局引入，到 main.js\"></a>这里默认给出了 HLS 的方案，我们先去全局引入，到 main.js</h4><pre><code>import VideoPlayer from &apos;vue-video-player&apos;;\n\nVideoPlayer.config({\n  youtube: true,\n  switcher: true,\n  hls: true\n})\n\nVue.use(VideoPlayer)\n</code></pre><h4 id=\"下面看下我的-component\"><a href=\"#下面看下我的-component\" class=\"headerlink\" title=\"下面看下我的 component\"></a>下面看下我的 component</h4><pre><code>&lt;template&gt;\n      &lt;video-player :options=&quot;videoOptions&quot;&gt;&lt;/video-player&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: &apos;Play&apos;,\n  data () {\n    return {\n      videoOptions: {\n        source: {\n          type: &quot;application/x-mpegURL&quot;,\n          src: &apos;https://logos-channel.scaleengine.net/logos-channel/live/biblescreen-ad-free/    playlist.m3u8&apos;,\n          withCredentials: false\n        },\n        language: &apos;zh-CN&apos;,\n        live: true,\n        autoplay: true,\n        height: 540\n          }\n         }\n      }\n }\n&lt;/script&gt;\n</code></pre><h4 id=\"到这里你的播放器就可以播放-HLS-链接了\"><a href=\"#到这里你的播放器就可以播放-HLS-链接了\" class=\"headerlink\" title=\"到这里你的播放器就可以播放 HLS 链接了\"></a>到这里你的播放器就可以播放 HLS 链接了</h4><h4 id=\"RTMP\"><a href=\"#RTMP\" class=\"headerlink\" title=\"RTMP\"></a>RTMP</h4><h4 id=\"上面说到库底层还是依赖-video-js，-所以呢我们不妨直接这样使用\"><a href=\"#上面说到库底层还是依赖-video-js，-所以呢我们不妨直接这样使用\" class=\"headerlink\" title=\"上面说到库底层还是依赖 video.js， 所以呢我们不妨直接这样使用\"></a>上面说到库底层还是依赖 video.js， 所以呢我们不妨直接这样使用</h4><pre><code>export default {\n      name: &apos;Play&apos;,\n       data () {\n        return {\n           videoOptions: {\n           source: {\n              type: &quot;rtmp/mp4&quot;,\n               src: &apos;rtmp://your.streaming.provider.net/cfx/st/&amp;mp4:path/to/video.mp4&apos;,\n             withCredentials: false\n            },\n            language: &apos;zh-CN&apos;,\n            live: true,\n            autoplay: true,\n            height: 540\n          }\n     }\n    }\n}\n</code></pre><h2 id=\"–总结–\"><a href=\"#–总结–\" class=\"headerlink\" title=\" –总结– \"></a><font style=\"color:red\"> –总结– </font></h2><h4 id=\"两种方法均可尝试，上面给出的-src-换成自己的链接就实现拉流播放啦，当然你如果不用-vue-的话也没关系，直接参照-video-js-的官网，单是-RTMP-的话不需要第三方库，如果是-HLS-的话需要引入videojs-contrib-hls，看具体情况而定。\"><a href=\"#两种方法均可尝试，上面给出的-src-换成自己的链接就实现拉流播放啦，当然你如果不用-vue-的话也没关系，直接参照-video-js-的官网，单是-RTMP-的话不需要第三方库，如果是-HLS-的话需要引入videojs-contrib-hls，看具体情况而定。\" class=\"headerlink\" title=\"两种方法均可尝试，上面给出的 src 换成自己的链接就实现拉流播放啦，当然你如果不用 vue 的话也没关系，直接参照 video.js 的官网，单是 RTMP 的话不需要第三方库，如果是 HLS 的话需要引入videojs-contrib-hls，看具体情况而定。\"></a>两种方法均可尝试，上面给出的 src 换成自己的链接就实现拉流播放啦，当然你如果不用 vue 的话也没关系，直接参照 video.js 的官网，单是 RTMP 的话不需要第三方库，如果是 HLS 的话需要引入<a href=\"https://github.com/videojs/videojs-contrib-hls\" target=\"_blank\" rel=\"external\"><font style=\"color:blue\">videojs-contrib-hls</font></a>，看具体情况而定。</h4><p>🔗原文链接: <a href=\"http://orangexc.xyz/2016/11/14/Live-video-player/\" target=\"_blank\" rel=\"external\">http://orangexc.xyz/2016/11/14/Live-video-player/</a> by @Orange</p>\n","excerpt":"","more":"<h1 id=\"基于-Vue-的直播播放器实战\"><a href=\"#基于-Vue-的直播播放器实战\" class=\"headerlink\" title=\"基于 Vue 的直播播放器实战\"></a>基于 Vue 的直播播放器实战</h1><p><img src=\"http://7xr2s7.com1.z0.glb.clouddn.com/%E5%9F%BA%E4%BA%8E%20Vue%20%E7%9A%84%E7%9B%B4%E6%92%AD%E6%92%AD%E6%94%BE%E5%99%A8%E5%AE%9E%E6%88%98.jpeg\" alt=\"Mou icon\"></p>\n<h2 id=\"–前言–\"><a href=\"#–前言–\" class=\"headerlink\" title=\" –前言– \"></a><font style=\"color:red\"> –前言– </font></h2><h4 id=\"时下直播的盛行让很多人对直播技术产生浓厚的兴趣，Dimple-本人也不例外，本文借着实战的目的完成一个-demo，并没有深入的讲解直播技术的实现原理以及推流和拉流的实现，为什么不深入讲解直播的底层技术，原因很简单大公司没必要看我的文章去了解如何搭建直播服务器，小企业又没有不要去搭建自己的直播服务器，因为涉及到的技术繁杂又琐碎，感兴趣的直接谷歌，各位大神有不同深度的讲解怎么去搭建自己的直播服务器，那么小企业人员、资金和技术有限怎么办，没错！买服务！！！\"><a href=\"#时下直播的盛行让很多人对直播技术产生浓厚的兴趣，Dimple-本人也不例外，本文借着实战的目的完成一个-demo，并没有深入的讲解直播技术的实现原理以及推流和拉流的实现，为什么不深入讲解直播的底层技术，原因很简单大公司没必要看我的文章去了解如何搭建直播服务器，小企业又没有不要去搭建自己的直播服务器，因为涉及到的技术繁杂又琐碎，感兴趣的直接谷歌，各位大神有不同深度的讲解怎么去搭建自己的直播服务器，那么小企业人员、资金和技术有限怎么办，没错！买服务！！！\" class=\"headerlink\" title=\"时下直播的盛行让很多人对直播技术产生浓厚的兴趣，Dimple 本人也不例外，本文借着实战的目的完成一个 demo，并没有深入的讲解直播技术的实现原理以及推流和拉流的实现，为什么不深入讲解直播的底层技术，原因很简单大公司没必要看我的文章去了解如何搭建直播服务器，小企业又没有不要去搭建自己的直播服务器，因为涉及到的技术繁杂又琐碎，感兴趣的直接谷歌，各位大神有不同深度的讲解怎么去搭建自己的直播服务器，那么小企业人员、资金和技术有限怎么办，没错！买服务！！！\"></a>时下直播的盛行让很多人对直播技术产生浓厚的兴趣，Dimple 本人也不例外，本文借着实战的目的完成一个 demo，并没有深入的讲解直播技术的实现原理以及推流和拉流的实现，为什么不深入讲解直播的底层技术，原因很简单大公司没必要看我的文章去了解如何搭建直播服务器，小企业又没有不要去搭建自己的直播服务器，因为涉及到的技术繁杂又琐碎，感兴趣的直接谷歌，各位大神有不同深度的讲解怎么去搭建自己的直播服务器，那么小企业人员、资金和技术有限怎么办，没错！买服务！！！</h4><h4 id=\"直播云服务也是今年的一个亮点，各大云平台都在做直播的服务，至于快慢选择的话-Dimple-只用过七牛云直播，没办法拿数据给大家建议\"><a href=\"#直播云服务也是今年的一个亮点，各大云平台都在做直播的服务，至于快慢选择的话-Dimple-只用过七牛云直播，没办法拿数据给大家建议\" class=\"headerlink\" title=\"直播云服务也是今年的一个亮点，各大云平台都在做直播的服务，至于快慢选择的话 Dimple 只用过七牛云直播，没办法拿数据给大家建议\"></a>直播云服务也是今年的一个亮点，各大云平台都在做直播的服务，至于快慢选择的话 Dimple 只用过七牛云直播，没办法拿数据给大家建议</h4><h4 id=\"七牛的文档给的比较详细，如何获得自己的直播空间，如何绑定备案域名，如何解析域名，如何创建直播间以及整个的工作流程先上-《JavaScript闯关记》-其次看-github-上的库\"><a href=\"#七牛的文档给的比较详细，如何获得自己的直播空间，如何绑定备案域名，如何解析域名，如何创建直播间以及整个的工作流程先上-《JavaScript闯关记》-其次看-github-上的库\" class=\"headerlink\" title=\"七牛的文档给的比较详细，如何获得自己的直播空间，如何绑定备案域名，如何解析域名，如何创建直播间以及整个的工作流程先上 《JavaScript闯关记》 ,其次看 github 上的库\"></a>七牛的文档给的比较详细，如何获得自己的直播空间，如何绑定备案域名，如何解析域名，如何创建直播间以及整个的工作流程先上<a href=\"http://developer.qiniu.com/article/index.html#pili/\"> <font style=\"color:blue\">《JavaScript闯关记》</font> </a>,其次看 <a href=\"https://github.com/pili-engineering\"><font style=\"color:blue\">github 上的库</font></a></h4><h4 id=\"整个过程相信大家都能顺利完成，说到我们的播放器拉流，那么播放的来源怎么获取呢？有安卓和ios开发经验的可以用移动端推流，没有经验的也不要紧推荐一个斗鱼的-OBS-教程\"><a href=\"#整个过程相信大家都能顺利完成，说到我们的播放器拉流，那么播放的来源怎么获取呢？有安卓和ios开发经验的可以用移动端推流，没有经验的也不要紧推荐一个斗鱼的-OBS-教程\" class=\"headerlink\" title=\"整个过程相信大家都能顺利完成，说到我们的播放器拉流，那么播放的来源怎么获取呢？有安卓和ios开发经验的可以用移动端推流，没有经验的也不要紧推荐一个斗鱼的 OBS 教程\"></a>整个过程相信大家都能顺利完成，说到我们的播放器拉流，那么播放的来源怎么获取呢？有安卓和ios开发经验的可以用移动端推流，没有经验的也不要紧推荐一个<a href=\"https://www.douyu.com/cms/zhibo/201311/13/250.shtml\"><font style=\"color:blue\">斗鱼的 OBS 教程</font></a></h4><pre><code>注：以上的直播空间的搭建没有完成也可以看本文，更希望大家可以做成一个完整的 demo，我们的重点还是在于播放器的实现。\n</code></pre><h2 id=\"–直播协议–\"><a href=\"#–直播协议–\" class=\"headerlink\" title=\" –直播协议– \"></a><font style=\"color:red\"> –直播协议– </font></h2><h4 id=\"首先，需要知道直播的常用协议，RTMP-和-HLS，经过测试在七牛云直播平台不采用加速的情况下-RTMP-的延时在-10s-内，HLS-在-10-20s。经过优化后的还没测试过。\"><a href=\"#首先，需要知道直播的常用协议，RTMP-和-HLS，经过测试在七牛云直播平台不采用加速的情况下-RTMP-的延时在-10s-内，HLS-在-10-20s。经过优化后的还没测试过。\" class=\"headerlink\" title=\"首先，需要知道直播的常用协议，RTMP 和 HLS，经过测试在七牛云直播平台不采用加速的情况下 RTMP 的延时在 10s 内，HLS 在 10-20s。经过优化后的还没测试过。\"></a>首先，需要知道直播的常用协议，RTMP 和 HLS，经过测试在七牛云直播平台不采用加速的情况下 RTMP 的延时在 10s 内，HLS 在 10-20s。经过优化后的还没测试过。</h4><h4 id=\"至于这两个协议的选择还需要根据实际情况而定（只看延时大小是不对滴），还是给链接直播协议的选择：RTMP-vs-HLS\"><a href=\"#至于这两个协议的选择还需要根据实际情况而定（只看延时大小是不对滴），还是给链接直播协议的选择：RTMP-vs-HLS\" class=\"headerlink\" title=\"至于这两个协议的选择还需要根据实际情况而定（只看延时大小是不对滴），还是给链接直播协议的选择：RTMP vs. HLS\"></a>至于这两个协议的选择还需要根据实际情况而定（只看延时大小是不对滴），还是给链接<a href=\"http://www.samirchen.com/ios-rtmp-vs-hls/\"><font style=\"blue\">直播协议的选择：RTMP vs. HLS</font></a></h4><h2 id=\"–Vue-结合–\"><a href=\"#–Vue-结合–\" class=\"headerlink\" title=\" –Vue 结合– \"></a><font style=\"color:red\"> –Vue 结合– </font></h2><h4 id=\"做过-H5-播放器的对与-video-js-并不陌生，实现的出发点也是在-video-js-上，默认大家都有-Vue-搭建和简单运用能力了，没有经验的可以看-orange-之前写的入门文章。\"><a href=\"#做过-H5-播放器的对与-video-js-并不陌生，实现的出发点也是在-video-js-上，默认大家都有-Vue-搭建和简单运用能力了，没有经验的可以看-orange-之前写的入门文章。\" class=\"headerlink\" title=\"做过 H5 播放器的对与 video.js 并不陌生，实现的出发点也是在 video.js 上，默认大家都有 Vue 搭建和简单运用能力了，没有经验的可以看 orange 之前写的入门文章。\"></a>做过 H5 播放器的对与 video.js 并不陌生，实现的出发点也是在 video.js 上，默认大家都有 Vue 搭建和简单运用能力了，没有经验的可以看 orange 之前写的入门文章。</h4><p>首先我们要新建一个组件，这个组件就是播放器的组件，组件名随意，最初的想法是直接使用 video.js，但是踩的坑比较深所以不推荐直接使用。</p>\n<pre><code>坑：首次载入不会有问题，路由跳转后再回来如果不刷新页面，import 进来的 videojs 并不会执行，所以需要在 mounted 里执行 videojs() 函数，然后传对应的参数进去，最后需要加入下面代码防止监听函数在切换路由后继续执行。\n</code></pre><h4 id=\"坑也踩完了，于是逛了一圈-github，发现了一个项目叫-vue-video-player\"><a href=\"#坑也踩完了，于是逛了一圈-github，发现了一个项目叫-vue-video-player\" class=\"headerlink\" title=\"坑也踩完了，于是逛了一圈 github，发现了一个项目叫 vue-video-player\"></a>坑也踩完了，于是逛了一圈 github，发现了一个项目叫 vue-video-player</h4><h4 id=\"先安装依赖\"><a href=\"#先安装依赖\" class=\"headerlink\" title=\"先安装依赖\"></a>先安装依赖</h4><pre><code>npm install vue-video-player --save\n</code></pre><h4 id=\"引用依赖\"><a href=\"#引用依赖\" class=\"headerlink\" title=\"引用依赖\"></a>引用依赖</h4><pre><code>// import with ES6\nimport Vue from &apos;vue&apos;\n...\nimport VideoPlayer from &apos;vue-video-player&apos;\n\n\n// require with Node.js/Webpack\nvar Vue = require(&apos;vue&apos;)\n...\nvar VideoPlayer = require(&apos;vue-video-player&apos;)\n\n// The default is to turn off some of the features, you can choose according to their use of certain     features enabled, do not enable the introduction will not require the corresponding file. 默认有些功能    是不开启的，比如youtube国内不能用，则默认是关闭的，如果不启用对应的功能，则不会引入对应的包，减少项目代码体积，当然也有    可能意味着对应的功能可能会出错，true 是开启，false是关闭，正常情况使用者不需要care就可以。\n\n// Example(Only applies to the current global mode). 用配置项的话仅支持全局模式来配置，否则不会生效\nVideoPlayer.config({\n  youtube: true, // default false\n  switcher: false, // default true\n  hls: false // default true\n})\n\n// use\nVue.use(VideoPlayer)\n\n// --------------------------------------\n\n// or use with component(ES6)\nimport Vue from &apos;vue&apos;\n// ...\nimport { videoPlayer } from &apos;vue-video-player&apos;\n\n// use\nexport default {\n  components: {\n    videoPlayer\n  }\n}\n</code></pre><h4 id=\"HLS\"><a href=\"#HLS\" class=\"headerlink\" title=\"HLS\"></a>HLS</h4><h4 id=\"这里默认给出了-HLS-的方案，我们先去全局引入，到-main-js\"><a href=\"#这里默认给出了-HLS-的方案，我们先去全局引入，到-main-js\" class=\"headerlink\" title=\"这里默认给出了 HLS 的方案，我们先去全局引入，到 main.js\"></a>这里默认给出了 HLS 的方案，我们先去全局引入，到 main.js</h4><pre><code>import VideoPlayer from &apos;vue-video-player&apos;;\n\nVideoPlayer.config({\n  youtube: true,\n  switcher: true,\n  hls: true\n})\n\nVue.use(VideoPlayer)\n</code></pre><h4 id=\"下面看下我的-component\"><a href=\"#下面看下我的-component\" class=\"headerlink\" title=\"下面看下我的 component\"></a>下面看下我的 component</h4><pre><code>&lt;template&gt;\n      &lt;video-player :options=&quot;videoOptions&quot;&gt;&lt;/video-player&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: &apos;Play&apos;,\n  data () {\n    return {\n      videoOptions: {\n        source: {\n          type: &quot;application/x-mpegURL&quot;,\n          src: &apos;https://logos-channel.scaleengine.net/logos-channel/live/biblescreen-ad-free/    playlist.m3u8&apos;,\n          withCredentials: false\n        },\n        language: &apos;zh-CN&apos;,\n        live: true,\n        autoplay: true,\n        height: 540\n          }\n         }\n      }\n }\n&lt;/script&gt;\n</code></pre><h4 id=\"到这里你的播放器就可以播放-HLS-链接了\"><a href=\"#到这里你的播放器就可以播放-HLS-链接了\" class=\"headerlink\" title=\"到这里你的播放器就可以播放 HLS 链接了\"></a>到这里你的播放器就可以播放 HLS 链接了</h4><h4 id=\"RTMP\"><a href=\"#RTMP\" class=\"headerlink\" title=\"RTMP\"></a>RTMP</h4><h4 id=\"上面说到库底层还是依赖-video-js，-所以呢我们不妨直接这样使用\"><a href=\"#上面说到库底层还是依赖-video-js，-所以呢我们不妨直接这样使用\" class=\"headerlink\" title=\"上面说到库底层还是依赖 video.js， 所以呢我们不妨直接这样使用\"></a>上面说到库底层还是依赖 video.js， 所以呢我们不妨直接这样使用</h4><pre><code>export default {\n      name: &apos;Play&apos;,\n       data () {\n        return {\n           videoOptions: {\n           source: {\n              type: &quot;rtmp/mp4&quot;,\n               src: &apos;rtmp://your.streaming.provider.net/cfx/st/&amp;mp4:path/to/video.mp4&apos;,\n             withCredentials: false\n            },\n            language: &apos;zh-CN&apos;,\n            live: true,\n            autoplay: true,\n            height: 540\n          }\n     }\n    }\n}\n</code></pre><h2 id=\"–总结–\"><a href=\"#–总结–\" class=\"headerlink\" title=\" –总结– \"></a><font style=\"color:red\"> –总结– </font></h2><h4 id=\"两种方法均可尝试，上面给出的-src-换成自己的链接就实现拉流播放啦，当然你如果不用-vue-的话也没关系，直接参照-video-js-的官网，单是-RTMP-的话不需要第三方库，如果是-HLS-的话需要引入videojs-contrib-hls，看具体情况而定。\"><a href=\"#两种方法均可尝试，上面给出的-src-换成自己的链接就实现拉流播放啦，当然你如果不用-vue-的话也没关系，直接参照-video-js-的官网，单是-RTMP-的话不需要第三方库，如果是-HLS-的话需要引入videojs-contrib-hls，看具体情况而定。\" class=\"headerlink\" title=\"两种方法均可尝试，上面给出的 src 换成自己的链接就实现拉流播放啦，当然你如果不用 vue 的话也没关系，直接参照 video.js 的官网，单是 RTMP 的话不需要第三方库，如果是 HLS 的话需要引入videojs-contrib-hls，看具体情况而定。\"></a>两种方法均可尝试，上面给出的 src 换成自己的链接就实现拉流播放啦，当然你如果不用 vue 的话也没关系，直接参照 video.js 的官网，单是 RTMP 的话不需要第三方库，如果是 HLS 的话需要引入<a href=\"https://github.com/videojs/videojs-contrib-hls\"><font style=\"color:blue\">videojs-contrib-hls</font></a>，看具体情况而定。</h4><p>🔗原文链接: <a href=\"http://orangexc.xyz/2016/11/14/Live-video-player/\">http://orangexc.xyz/2016/11/14/Live-video-player/</a> by @Orange</p>\n"},{"title":"7种创建对象方法","date":"2016-07-25T06:09:54.000Z","_content":"\n\n# 7种对象的创建方法\n\n\n#### 最近在复习红宝书的对象一章，红宝书中一共提到了7种创建对象的方式（这里所说的对象更偏向于面向对象编程中的对象）。7种方式分别是：\n\n* 工厂模式\n* 构造函数模式\n* 原型模式\n* 构造函数和原型组合模式\n* 动态原型模式\n* 寄生构造模式\n* 稳妥构造模式\n\n#### 首先先解释几个概念\n\n1、 对象下面例子中所有的Person函数\n\n2、 实例/对象实例 通过 `new Person()` or \t`Person()`返回的对象，如`var person1 = new Person()`中的person1\n\n3、 原型对象`Person.prototype` \n\n\n\n### <font style=\"color:orange\">工厂模式</font>\n\n\tfunction Person() {\n \t  var o = new Object();\n  \t  o.name = 'hanmeimei';\n  \t  o.say = function() {\n    \talert(this.name);\n     }\n  \t  return o;\n\t }\n\t var person1 = Person();\n\t \n\n\n#### <font style=\"color:red\">优点：</font>\n1. 完成了返回一个对象的要求。\n\n\n#### <font style=\"color:red\">缺点：</font>\n\n1. 无法通过constructor识别对象，以为都是来自Object，无法得知来自Person\n\n2. 每次通过Person创建对象的时候，所有的say方法都是一样的，但是却存储了多次，浪费资源。\n\n\n### <font style=\"color:orange\">构造函数模式</font>\n\n\tfunction Person() {\n  \t\tthis.name = 'hanmeimei';\n  \t\tthis.say = function() {\n    \t\talert(this.name)\n  \t\t}\n\t  }\n\tvar person1 = new Person();\n\t \n\n#### <font style=\"color:red\">优点：</font>\n1. 通过constructor或者instanceof可以识别对象实例的类别\n2. 可以通过new 关键字来创建对象实例，更像OO语言中创建对象实例\n\n#### <font style=\"color:red\">缺点：</font>\n\n1. 多个实例的say方法都是实现一样的效果，但是却存储了很多次（两个对象实例的say方法是不同的，因为存放的地址不同）\n\n\n### <font style=\"color:red\">注意：</font>\n\n\n1. 构造函数模式隐试的在最后返回`return this` 所以在缺少new的情况下，会将属性和方法添加给全局对象，浏览器端就会添加给window对象。\n2. 也可以根据`return this` 的特性调用call或者apply指定this。这一点在后面的继承有很大帮助。\n\n### <font style=\"color:orange\">原型模式</font>\n\n\tfunction Person() {}\n\tPerson.prototype.name = 'hanmeimei';\n\tPerson.prototype.say = function() {\n \t\talert(this.name);\n\t}\n\tPerson.prototype.friends = ['lilei'];\n\tvar person1 = new Person();\n\t\n#### <font style=\"color:red\">优点：</font>\n\n1. say方法是共享的了，所有的实例的say方法都指向同一个。\n\n2. 可以动态的添加原型对象的方法和属性，并直接反映在对象实例上。\n\n---\n\n\n\tvar person1 = new Person()\n\tPerson.prototype.showFriends = function() {\n  \t\tconsole.log(this.friends)\n\t}\n\tperson1.showFriends()  //['lilei']\n\n#### <font style=\"color:red\">缺点：</font>\t\n\n##### 出现引用的情况下会出现问题具体见下面代码：\n\n\tvar person1 = new Person();\n\tvar person2 = new Person();\n\tperson1.friends.push('xiaoming');\n\tconsole.log(person2.friends)  //['lilei', 'xiaoming']\n\t\n##### 因为js对引用类型的赋值都是将地址存储在变量中，所以person1和person2的friends属性指向的是同一块存储区域。\n\n\n2. 第一次调用say方法或者name属性的时候会搜索两次，第一次是在实例上寻找say方法，没有找到就去原型对象(Person.prototype)上找say方法，找到后就会在实力上添加这些方法or属性。\t\n\n\n3. 所有的方法都是共享的，没有办法创建实例自己的属性和方法，也没有办法像构造函数那样传递参数。\n\n\n### <font style=\"color:red\">注意：</font>\n\n优点②中存在一个问题就是直接通过对象字面量给`Person.prototype`进行赋值的时候会导致`constructor`改变，所以需要手动设置，其次就是通过对象字面量给`Person.prototype`进行赋值，会无法作用在之前创建的对象实例上\n\n\tvar person1 = new Person()\n\tPerson.prototype = {\n\t\t\tname: 'hanmeimei2',\n  \t\t\tsetName: function(name){\n      \t\tthis.name = name\n  \t\t}\n\t}\n\tperson1.setName()   //Uncaught TypeError: person1.set \tis not a \tfunction(…)\n\t\n\n\n这是因为对象实例和对象原型直接是通过一个指针链接的，这个指针是一个内部属性[[Prototype]]，可以通过`__proto__`访问。我们通过对象字面量修改了Person.prototype指向的地址，然而对象实例的`__proto__`，并没有跟着一起更新，所以这就导致，实例还访问着原来的`Person.prototype`，所以建议不要通过这种方式去改变`Person.prototype`属性\n\n\n### <font style=\"color:orange\">构造函数和原型组合模式</font>\n\n\n\tfunction Person(name) {\n  \t\tthis.name = name\n  \t\tthis.friends = ['lilei']\n\t}\n\tPerson.prototype.say = function() {\n  \t\tconsole.log(this.name)\n\t}\n\tvar person1 = new Person('hanmeimei')\n\tperson1.say() //hanmeimei\n\n#### <font style=\"color:red\">优点：</font>\n\n1. 解决了原型模式对于引用对象的缺点\n2. 解决了原型模式没有办法传递参数的缺点\n3. 解决了构造函数模式不能共享方法的缺点\n\n\n#### <font style=\"color:red\">缺点：</font>\n\n\n1. 和原型模式中注意①一样 （可以动态的添加原型对象的方法和属性，并直接反映在对象实例上。针对这个问题中存在一个问题就是直接通过对象字面量给Person.prototype进行赋值的时候会导致constructor改变，所以需要手动设置，其次就是通过对象字面量给Person.prototype进行赋值，会无法作用在之前创建的对象实例上）\n\n### <font style=\"color:orange\">动态原型模式</font>\n\n\tfunction Person(name) {\n \t\t this.name = name\n  \t\t if(typeof this.say != 'function') {\n    \t\tPerson.prototype.say = function(\n    \t\talert(this.name)\n  \t\t}\n\t}\n\n#### <font style=\"color:red\">优点：</font>\t\n\n1. 可以在初次调用构造函数的时候就完成原型对象的修改\n2. 修改能体现在所有的实例中\n\n\n#### <font style=\"color:red\">缺点：</font>\n\n##### 红宝书都说这个方案完美了。。。。\n\n### <font style=\"color:orange\">寄生构造函数模式</font>\n\n\tfunction Person(name) {\n  \t\tvar o = new Object()\n \t\to.name = name\n \t\to.say = function() {\n    \t\talert(this.name)\n \t\t }\n  \t\t\treturn o\n\t\t}\n\tvar peron1 = new Person('hanmeimei')\n\t\n#### <font style=\"color:red\">优点：</font>\t\n\n##### 和工厂模式基本一样，除了多了个new操作符\n\n#### <font style=\"color:red\">缺点：</font>\n\n##### 和工厂模式一样，不能区分实例的类别\n\n\n### <font style=\"color:orange\">稳妥构造模式</font>\n\t\n\tfunction Person(name) {\n \t\tvar o = new Object()\n  \t\to.say = function() {\n    \talert(name)\n  \t }\n\t}\n\tvar person1 = new Person('hanmeimei');\n\tperson1.name  // undefined\n\tperson1.say() //hanmeimei\n\t\n#### <font style=\"color:red\">优点：</font>\n\n安全，name好像成为了私有变量，只能通过say方法去访问\n\n\n#### <font style=\"color:red\">缺点：</font>\n\n##### 不能区分实例的类别\n\t\n🔗原文链接: [http://alvinyuxt.github.io/2016/11/11/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1/) by @alvinyuxt","source":"_posts/hanshu.md","raw":"---\ntitle: 7种创建对象方法\ndate: 2016-7-25 14:09:54\ntags: [javascript,7种创建对象的方法]\n---\n\n\n# 7种对象的创建方法\n\n\n#### 最近在复习红宝书的对象一章，红宝书中一共提到了7种创建对象的方式（这里所说的对象更偏向于面向对象编程中的对象）。7种方式分别是：\n\n* 工厂模式\n* 构造函数模式\n* 原型模式\n* 构造函数和原型组合模式\n* 动态原型模式\n* 寄生构造模式\n* 稳妥构造模式\n\n#### 首先先解释几个概念\n\n1、 对象下面例子中所有的Person函数\n\n2、 实例/对象实例 通过 `new Person()` or \t`Person()`返回的对象，如`var person1 = new Person()`中的person1\n\n3、 原型对象`Person.prototype` \n\n\n\n### <font style=\"color:orange\">工厂模式</font>\n\n\tfunction Person() {\n \t  var o = new Object();\n  \t  o.name = 'hanmeimei';\n  \t  o.say = function() {\n    \talert(this.name);\n     }\n  \t  return o;\n\t }\n\t var person1 = Person();\n\t \n\n\n#### <font style=\"color:red\">优点：</font>\n1. 完成了返回一个对象的要求。\n\n\n#### <font style=\"color:red\">缺点：</font>\n\n1. 无法通过constructor识别对象，以为都是来自Object，无法得知来自Person\n\n2. 每次通过Person创建对象的时候，所有的say方法都是一样的，但是却存储了多次，浪费资源。\n\n\n### <font style=\"color:orange\">构造函数模式</font>\n\n\tfunction Person() {\n  \t\tthis.name = 'hanmeimei';\n  \t\tthis.say = function() {\n    \t\talert(this.name)\n  \t\t}\n\t  }\n\tvar person1 = new Person();\n\t \n\n#### <font style=\"color:red\">优点：</font>\n1. 通过constructor或者instanceof可以识别对象实例的类别\n2. 可以通过new 关键字来创建对象实例，更像OO语言中创建对象实例\n\n#### <font style=\"color:red\">缺点：</font>\n\n1. 多个实例的say方法都是实现一样的效果，但是却存储了很多次（两个对象实例的say方法是不同的，因为存放的地址不同）\n\n\n### <font style=\"color:red\">注意：</font>\n\n\n1. 构造函数模式隐试的在最后返回`return this` 所以在缺少new的情况下，会将属性和方法添加给全局对象，浏览器端就会添加给window对象。\n2. 也可以根据`return this` 的特性调用call或者apply指定this。这一点在后面的继承有很大帮助。\n\n### <font style=\"color:orange\">原型模式</font>\n\n\tfunction Person() {}\n\tPerson.prototype.name = 'hanmeimei';\n\tPerson.prototype.say = function() {\n \t\talert(this.name);\n\t}\n\tPerson.prototype.friends = ['lilei'];\n\tvar person1 = new Person();\n\t\n#### <font style=\"color:red\">优点：</font>\n\n1. say方法是共享的了，所有的实例的say方法都指向同一个。\n\n2. 可以动态的添加原型对象的方法和属性，并直接反映在对象实例上。\n\n---\n\n\n\tvar person1 = new Person()\n\tPerson.prototype.showFriends = function() {\n  \t\tconsole.log(this.friends)\n\t}\n\tperson1.showFriends()  //['lilei']\n\n#### <font style=\"color:red\">缺点：</font>\t\n\n##### 出现引用的情况下会出现问题具体见下面代码：\n\n\tvar person1 = new Person();\n\tvar person2 = new Person();\n\tperson1.friends.push('xiaoming');\n\tconsole.log(person2.friends)  //['lilei', 'xiaoming']\n\t\n##### 因为js对引用类型的赋值都是将地址存储在变量中，所以person1和person2的friends属性指向的是同一块存储区域。\n\n\n2. 第一次调用say方法或者name属性的时候会搜索两次，第一次是在实例上寻找say方法，没有找到就去原型对象(Person.prototype)上找say方法，找到后就会在实力上添加这些方法or属性。\t\n\n\n3. 所有的方法都是共享的，没有办法创建实例自己的属性和方法，也没有办法像构造函数那样传递参数。\n\n\n### <font style=\"color:red\">注意：</font>\n\n优点②中存在一个问题就是直接通过对象字面量给`Person.prototype`进行赋值的时候会导致`constructor`改变，所以需要手动设置，其次就是通过对象字面量给`Person.prototype`进行赋值，会无法作用在之前创建的对象实例上\n\n\tvar person1 = new Person()\n\tPerson.prototype = {\n\t\t\tname: 'hanmeimei2',\n  \t\t\tsetName: function(name){\n      \t\tthis.name = name\n  \t\t}\n\t}\n\tperson1.setName()   //Uncaught TypeError: person1.set \tis not a \tfunction(…)\n\t\n\n\n这是因为对象实例和对象原型直接是通过一个指针链接的，这个指针是一个内部属性[[Prototype]]，可以通过`__proto__`访问。我们通过对象字面量修改了Person.prototype指向的地址，然而对象实例的`__proto__`，并没有跟着一起更新，所以这就导致，实例还访问着原来的`Person.prototype`，所以建议不要通过这种方式去改变`Person.prototype`属性\n\n\n### <font style=\"color:orange\">构造函数和原型组合模式</font>\n\n\n\tfunction Person(name) {\n  \t\tthis.name = name\n  \t\tthis.friends = ['lilei']\n\t}\n\tPerson.prototype.say = function() {\n  \t\tconsole.log(this.name)\n\t}\n\tvar person1 = new Person('hanmeimei')\n\tperson1.say() //hanmeimei\n\n#### <font style=\"color:red\">优点：</font>\n\n1. 解决了原型模式对于引用对象的缺点\n2. 解决了原型模式没有办法传递参数的缺点\n3. 解决了构造函数模式不能共享方法的缺点\n\n\n#### <font style=\"color:red\">缺点：</font>\n\n\n1. 和原型模式中注意①一样 （可以动态的添加原型对象的方法和属性，并直接反映在对象实例上。针对这个问题中存在一个问题就是直接通过对象字面量给Person.prototype进行赋值的时候会导致constructor改变，所以需要手动设置，其次就是通过对象字面量给Person.prototype进行赋值，会无法作用在之前创建的对象实例上）\n\n### <font style=\"color:orange\">动态原型模式</font>\n\n\tfunction Person(name) {\n \t\t this.name = name\n  \t\t if(typeof this.say != 'function') {\n    \t\tPerson.prototype.say = function(\n    \t\talert(this.name)\n  \t\t}\n\t}\n\n#### <font style=\"color:red\">优点：</font>\t\n\n1. 可以在初次调用构造函数的时候就完成原型对象的修改\n2. 修改能体现在所有的实例中\n\n\n#### <font style=\"color:red\">缺点：</font>\n\n##### 红宝书都说这个方案完美了。。。。\n\n### <font style=\"color:orange\">寄生构造函数模式</font>\n\n\tfunction Person(name) {\n  \t\tvar o = new Object()\n \t\to.name = name\n \t\to.say = function() {\n    \t\talert(this.name)\n \t\t }\n  \t\t\treturn o\n\t\t}\n\tvar peron1 = new Person('hanmeimei')\n\t\n#### <font style=\"color:red\">优点：</font>\t\n\n##### 和工厂模式基本一样，除了多了个new操作符\n\n#### <font style=\"color:red\">缺点：</font>\n\n##### 和工厂模式一样，不能区分实例的类别\n\n\n### <font style=\"color:orange\">稳妥构造模式</font>\n\t\n\tfunction Person(name) {\n \t\tvar o = new Object()\n  \t\to.say = function() {\n    \talert(name)\n  \t }\n\t}\n\tvar person1 = new Person('hanmeimei');\n\tperson1.name  // undefined\n\tperson1.say() //hanmeimei\n\t\n#### <font style=\"color:red\">优点：</font>\n\n安全，name好像成为了私有变量，只能通过say方法去访问\n\n\n#### <font style=\"color:red\">缺点：</font>\n\n##### 不能区分实例的类别\n\t\n🔗原文链接: [http://alvinyuxt.github.io/2016/11/11/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1/) by @alvinyuxt","slug":"hanshu","published":1,"updated":"2016-11-16T09:40:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civoyb9nb00049xsmx4mx85fj","content":"<h1 id=\"7种对象的创建方法\"><a href=\"#7种对象的创建方法\" class=\"headerlink\" title=\"7种对象的创建方法\"></a>7种对象的创建方法</h1><h4 id=\"最近在复习红宝书的对象一章，红宝书中一共提到了7种创建对象的方式（这里所说的对象更偏向于面向对象编程中的对象）。7种方式分别是：\"><a href=\"#最近在复习红宝书的对象一章，红宝书中一共提到了7种创建对象的方式（这里所说的对象更偏向于面向对象编程中的对象）。7种方式分别是：\" class=\"headerlink\" title=\"最近在复习红宝书的对象一章，红宝书中一共提到了7种创建对象的方式（这里所说的对象更偏向于面向对象编程中的对象）。7种方式分别是：\"></a>最近在复习红宝书的对象一章，红宝书中一共提到了7种创建对象的方式（这里所说的对象更偏向于面向对象编程中的对象）。7种方式分别是：</h4><ul>\n<li>工厂模式</li>\n<li>构造函数模式</li>\n<li>原型模式</li>\n<li>构造函数和原型组合模式</li>\n<li>动态原型模式</li>\n<li>寄生构造模式</li>\n<li>稳妥构造模式</li>\n</ul>\n<h4 id=\"首先先解释几个概念\"><a href=\"#首先先解释几个概念\" class=\"headerlink\" title=\"首先先解释几个概念\"></a>首先先解释几个概念</h4><p>1、 对象下面例子中所有的Person函数</p>\n<p>2、 实例/对象实例 通过 <code>new Person()</code> or     <code>Person()</code>返回的对象，如<code>var person1 = new Person()</code>中的person1</p>\n<p>3、 原型对象<code>Person.prototype</code> </p>\n<h3 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a><font style=\"color:orange\">工厂模式</font></h3><pre><code>function Person() {\n   var o = new Object();\n    o.name = &apos;hanmeimei&apos;;\n    o.say = function() {\n    alert(this.name);\n }\n    return o;\n }\n var person1 = Person();\n</code></pre><h4 id=\"优点：\"><a href=\"#优点：\" class=\"headerlink\" title=\"优点：\"></a><font style=\"color:red\">优点：</font></h4><ol>\n<li>完成了返回一个对象的要求。</li>\n</ol>\n<h4 id=\"缺点：\"><a href=\"#缺点：\" class=\"headerlink\" title=\"缺点：\"></a><font style=\"color:red\">缺点：</font></h4><ol>\n<li><p>无法通过constructor识别对象，以为都是来自Object，无法得知来自Person</p>\n</li>\n<li><p>每次通过Person创建对象的时候，所有的say方法都是一样的，但是却存储了多次，浪费资源。</p>\n</li>\n</ol>\n<h3 id=\"构造函数模式\"><a href=\"#构造函数模式\" class=\"headerlink\" title=\"构造函数模式\"></a><font style=\"color:orange\">构造函数模式</font></h3><pre><code>function Person() {\n      this.name = &apos;hanmeimei&apos;;\n      this.say = function() {\n        alert(this.name)\n      }\n  }\nvar person1 = new Person();\n</code></pre><h4 id=\"优点：-1\"><a href=\"#优点：-1\" class=\"headerlink\" title=\"优点：\"></a><font style=\"color:red\">优点：</font></h4><ol>\n<li>通过constructor或者instanceof可以识别对象实例的类别</li>\n<li>可以通过new 关键字来创建对象实例，更像OO语言中创建对象实例</li>\n</ol>\n<h4 id=\"缺点：-1\"><a href=\"#缺点：-1\" class=\"headerlink\" title=\"缺点：\"></a><font style=\"color:red\">缺点：</font></h4><ol>\n<li>多个实例的say方法都是实现一样的效果，但是却存储了很多次（两个对象实例的say方法是不同的，因为存放的地址不同）</li>\n</ol>\n<h3 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a><font style=\"color:red\">注意：</font></h3><ol>\n<li>构造函数模式隐试的在最后返回<code>return this</code> 所以在缺少new的情况下，会将属性和方法添加给全局对象，浏览器端就会添加给window对象。</li>\n<li>也可以根据<code>return this</code> 的特性调用call或者apply指定this。这一点在后面的继承有很大帮助。</li>\n</ol>\n<h3 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a><font style=\"color:orange\">原型模式</font></h3><pre><code>function Person() {}\nPerson.prototype.name = &apos;hanmeimei&apos;;\nPerson.prototype.say = function() {\n     alert(this.name);\n}\nPerson.prototype.friends = [&apos;lilei&apos;];\nvar person1 = new Person();\n</code></pre><h4 id=\"优点：-2\"><a href=\"#优点：-2\" class=\"headerlink\" title=\"优点：\"></a><font style=\"color:red\">优点：</font></h4><ol>\n<li><p>say方法是共享的了，所有的实例的say方法都指向同一个。</p>\n</li>\n<li><p>可以动态的添加原型对象的方法和属性，并直接反映在对象实例上。</p>\n</li>\n</ol>\n<hr>\n<pre><code>var person1 = new Person()\nPerson.prototype.showFriends = function() {\n      console.log(this.friends)\n}\nperson1.showFriends()  //[&apos;lilei&apos;]\n</code></pre><h4 id=\"缺点：-2\"><a href=\"#缺点：-2\" class=\"headerlink\" title=\"缺点：\"></a><font style=\"color:red\">缺点：</font></h4><h5 id=\"出现引用的情况下会出现问题具体见下面代码：\"><a href=\"#出现引用的情况下会出现问题具体见下面代码：\" class=\"headerlink\" title=\"出现引用的情况下会出现问题具体见下面代码：\"></a>出现引用的情况下会出现问题具体见下面代码：</h5><pre><code>var person1 = new Person();\nvar person2 = new Person();\nperson1.friends.push(&apos;xiaoming&apos;);\nconsole.log(person2.friends)  //[&apos;lilei&apos;, &apos;xiaoming&apos;]\n</code></pre><h5 id=\"因为js对引用类型的赋值都是将地址存储在变量中，所以person1和person2的friends属性指向的是同一块存储区域。\"><a href=\"#因为js对引用类型的赋值都是将地址存储在变量中，所以person1和person2的friends属性指向的是同一块存储区域。\" class=\"headerlink\" title=\"因为js对引用类型的赋值都是将地址存储在变量中，所以person1和person2的friends属性指向的是同一块存储区域。\"></a>因为js对引用类型的赋值都是将地址存储在变量中，所以person1和person2的friends属性指向的是同一块存储区域。</h5><ol>\n<li>第一次调用say方法或者name属性的时候会搜索两次，第一次是在实例上寻找say方法，没有找到就去原型对象(Person.prototype)上找say方法，找到后就会在实力上添加这些方法or属性。    </li>\n</ol>\n<ol>\n<li>所有的方法都是共享的，没有办法创建实例自己的属性和方法，也没有办法像构造函数那样传递参数。</li>\n</ol>\n<h3 id=\"注意：-1\"><a href=\"#注意：-1\" class=\"headerlink\" title=\"注意：\"></a><font style=\"color:red\">注意：</font></h3><p>优点②中存在一个问题就是直接通过对象字面量给<code>Person.prototype</code>进行赋值的时候会导致<code>constructor</code>改变，所以需要手动设置，其次就是通过对象字面量给<code>Person.prototype</code>进行赋值，会无法作用在之前创建的对象实例上</p>\n<pre><code>var person1 = new Person()\nPerson.prototype = {\n        name: &apos;hanmeimei2&apos;,\n          setName: function(name){\n          this.name = name\n      }\n}\nperson1.setName()   //Uncaught TypeError: person1.set     is not a     function(…)\n</code></pre><p>这是因为对象实例和对象原型直接是通过一个指针链接的，这个指针是一个内部属性[[Prototype]]，可以通过<code>__proto__</code>访问。我们通过对象字面量修改了Person.prototype指向的地址，然而对象实例的<code>__proto__</code>，并没有跟着一起更新，所以这就导致，实例还访问着原来的<code>Person.prototype</code>，所以建议不要通过这种方式去改变<code>Person.prototype</code>属性</p>\n<h3 id=\"构造函数和原型组合模式\"><a href=\"#构造函数和原型组合模式\" class=\"headerlink\" title=\"构造函数和原型组合模式\"></a><font style=\"color:orange\">构造函数和原型组合模式</font></h3><pre><code>function Person(name) {\n      this.name = name\n      this.friends = [&apos;lilei&apos;]\n}\nPerson.prototype.say = function() {\n      console.log(this.name)\n}\nvar person1 = new Person(&apos;hanmeimei&apos;)\nperson1.say() //hanmeimei\n</code></pre><h4 id=\"优点：-3\"><a href=\"#优点：-3\" class=\"headerlink\" title=\"优点：\"></a><font style=\"color:red\">优点：</font></h4><ol>\n<li>解决了原型模式对于引用对象的缺点</li>\n<li>解决了原型模式没有办法传递参数的缺点</li>\n<li>解决了构造函数模式不能共享方法的缺点</li>\n</ol>\n<h4 id=\"缺点：-3\"><a href=\"#缺点：-3\" class=\"headerlink\" title=\"缺点：\"></a><font style=\"color:red\">缺点：</font></h4><ol>\n<li>和原型模式中注意①一样 （可以动态的添加原型对象的方法和属性，并直接反映在对象实例上。针对这个问题中存在一个问题就是直接通过对象字面量给Person.prototype进行赋值的时候会导致constructor改变，所以需要手动设置，其次就是通过对象字面量给Person.prototype进行赋值，会无法作用在之前创建的对象实例上）</li>\n</ol>\n<h3 id=\"动态原型模式\"><a href=\"#动态原型模式\" class=\"headerlink\" title=\"动态原型模式\"></a><font style=\"color:orange\">动态原型模式</font></h3><pre><code>function Person(name) {\n      this.name = name\n       if(typeof this.say != &apos;function&apos;) {\n        Person.prototype.say = function(\n        alert(this.name)\n      }\n}\n</code></pre><h4 id=\"优点：-4\"><a href=\"#优点：-4\" class=\"headerlink\" title=\"优点：\"></a><font style=\"color:red\">优点：</font></h4><ol>\n<li>可以在初次调用构造函数的时候就完成原型对象的修改</li>\n<li>修改能体现在所有的实例中</li>\n</ol>\n<h4 id=\"缺点：-4\"><a href=\"#缺点：-4\" class=\"headerlink\" title=\"缺点：\"></a><font style=\"color:red\">缺点：</font></h4><h5 id=\"红宝书都说这个方案完美了。。。。\"><a href=\"#红宝书都说这个方案完美了。。。。\" class=\"headerlink\" title=\"红宝书都说这个方案完美了。。。。\"></a>红宝书都说这个方案完美了。。。。</h5><h3 id=\"寄生构造函数模式\"><a href=\"#寄生构造函数模式\" class=\"headerlink\" title=\"寄生构造函数模式\"></a><font style=\"color:orange\">寄生构造函数模式</font></h3><pre><code>function Person(name) {\n      var o = new Object()\n     o.name = name\n     o.say = function() {\n        alert(this.name)\n      }\n          return o\n    }\nvar peron1 = new Person(&apos;hanmeimei&apos;)\n</code></pre><h4 id=\"优点：-5\"><a href=\"#优点：-5\" class=\"headerlink\" title=\"优点：\"></a><font style=\"color:red\">优点：</font></h4><h5 id=\"和工厂模式基本一样，除了多了个new操作符\"><a href=\"#和工厂模式基本一样，除了多了个new操作符\" class=\"headerlink\" title=\"和工厂模式基本一样，除了多了个new操作符\"></a>和工厂模式基本一样，除了多了个new操作符</h5><h4 id=\"缺点：-5\"><a href=\"#缺点：-5\" class=\"headerlink\" title=\"缺点：\"></a><font style=\"color:red\">缺点：</font></h4><h5 id=\"和工厂模式一样，不能区分实例的类别\"><a href=\"#和工厂模式一样，不能区分实例的类别\" class=\"headerlink\" title=\"和工厂模式一样，不能区分实例的类别\"></a>和工厂模式一样，不能区分实例的类别</h5><h3 id=\"稳妥构造模式\"><a href=\"#稳妥构造模式\" class=\"headerlink\" title=\"稳妥构造模式\"></a><font style=\"color:orange\">稳妥构造模式</font></h3><pre><code>function Person(name) {\n     var o = new Object()\n      o.say = function() {\n    alert(name)\n   }\n}\nvar person1 = new Person(&apos;hanmeimei&apos;);\nperson1.name  // undefined\nperson1.say() //hanmeimei\n</code></pre><h4 id=\"优点：-6\"><a href=\"#优点：-6\" class=\"headerlink\" title=\"优点：\"></a><font style=\"color:red\">优点：</font></h4><p>安全，name好像成为了私有变量，只能通过say方法去访问</p>\n<h4 id=\"缺点：-6\"><a href=\"#缺点：-6\" class=\"headerlink\" title=\"缺点：\"></a><font style=\"color:red\">缺点：</font></h4><h5 id=\"不能区分实例的类别\"><a href=\"#不能区分实例的类别\" class=\"headerlink\" title=\"不能区分实例的类别\"></a>不能区分实例的类别</h5><p>🔗原文链接: [<a href=\"http://alvinyuxt.github.io/2016/11/11/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1/\" target=\"_blank\" rel=\"external\">http://alvinyuxt.github.io/2016/11/11/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1/</a>) by @alvinyuxt</p>\n","excerpt":"","more":"<h1 id=\"7种对象的创建方法\"><a href=\"#7种对象的创建方法\" class=\"headerlink\" title=\"7种对象的创建方法\"></a>7种对象的创建方法</h1><h4 id=\"最近在复习红宝书的对象一章，红宝书中一共提到了7种创建对象的方式（这里所说的对象更偏向于面向对象编程中的对象）。7种方式分别是：\"><a href=\"#最近在复习红宝书的对象一章，红宝书中一共提到了7种创建对象的方式（这里所说的对象更偏向于面向对象编程中的对象）。7种方式分别是：\" class=\"headerlink\" title=\"最近在复习红宝书的对象一章，红宝书中一共提到了7种创建对象的方式（这里所说的对象更偏向于面向对象编程中的对象）。7种方式分别是：\"></a>最近在复习红宝书的对象一章，红宝书中一共提到了7种创建对象的方式（这里所说的对象更偏向于面向对象编程中的对象）。7种方式分别是：</h4><ul>\n<li>工厂模式</li>\n<li>构造函数模式</li>\n<li>原型模式</li>\n<li>构造函数和原型组合模式</li>\n<li>动态原型模式</li>\n<li>寄生构造模式</li>\n<li>稳妥构造模式</li>\n</ul>\n<h4 id=\"首先先解释几个概念\"><a href=\"#首先先解释几个概念\" class=\"headerlink\" title=\"首先先解释几个概念\"></a>首先先解释几个概念</h4><p>1、 对象下面例子中所有的Person函数</p>\n<p>2、 实例/对象实例 通过 <code>new Person()</code> or     <code>Person()</code>返回的对象，如<code>var person1 = new Person()</code>中的person1</p>\n<p>3、 原型对象<code>Person.prototype</code> </p>\n<h3 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a><font style=\"color:orange\">工厂模式</font></h3><pre><code>function Person() {\n   var o = new Object();\n    o.name = &apos;hanmeimei&apos;;\n    o.say = function() {\n    alert(this.name);\n }\n    return o;\n }\n var person1 = Person();\n</code></pre><h4 id=\"优点：\"><a href=\"#优点：\" class=\"headerlink\" title=\"优点：\"></a><font style=\"color:red\">优点：</font></h4><ol>\n<li>完成了返回一个对象的要求。</li>\n</ol>\n<h4 id=\"缺点：\"><a href=\"#缺点：\" class=\"headerlink\" title=\"缺点：\"></a><font style=\"color:red\">缺点：</font></h4><ol>\n<li><p>无法通过constructor识别对象，以为都是来自Object，无法得知来自Person</p>\n</li>\n<li><p>每次通过Person创建对象的时候，所有的say方法都是一样的，但是却存储了多次，浪费资源。</p>\n</li>\n</ol>\n<h3 id=\"构造函数模式\"><a href=\"#构造函数模式\" class=\"headerlink\" title=\"构造函数模式\"></a><font style=\"color:orange\">构造函数模式</font></h3><pre><code>function Person() {\n      this.name = &apos;hanmeimei&apos;;\n      this.say = function() {\n        alert(this.name)\n      }\n  }\nvar person1 = new Person();\n</code></pre><h4 id=\"优点：-1\"><a href=\"#优点：-1\" class=\"headerlink\" title=\"优点：\"></a><font style=\"color:red\">优点：</font></h4><ol>\n<li>通过constructor或者instanceof可以识别对象实例的类别</li>\n<li>可以通过new 关键字来创建对象实例，更像OO语言中创建对象实例</li>\n</ol>\n<h4 id=\"缺点：-1\"><a href=\"#缺点：-1\" class=\"headerlink\" title=\"缺点：\"></a><font style=\"color:red\">缺点：</font></h4><ol>\n<li>多个实例的say方法都是实现一样的效果，但是却存储了很多次（两个对象实例的say方法是不同的，因为存放的地址不同）</li>\n</ol>\n<h3 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a><font style=\"color:red\">注意：</font></h3><ol>\n<li>构造函数模式隐试的在最后返回<code>return this</code> 所以在缺少new的情况下，会将属性和方法添加给全局对象，浏览器端就会添加给window对象。</li>\n<li>也可以根据<code>return this</code> 的特性调用call或者apply指定this。这一点在后面的继承有很大帮助。</li>\n</ol>\n<h3 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a><font style=\"color:orange\">原型模式</font></h3><pre><code>function Person() {}\nPerson.prototype.name = &apos;hanmeimei&apos;;\nPerson.prototype.say = function() {\n     alert(this.name);\n}\nPerson.prototype.friends = [&apos;lilei&apos;];\nvar person1 = new Person();\n</code></pre><h4 id=\"优点：-2\"><a href=\"#优点：-2\" class=\"headerlink\" title=\"优点：\"></a><font style=\"color:red\">优点：</font></h4><ol>\n<li><p>say方法是共享的了，所有的实例的say方法都指向同一个。</p>\n</li>\n<li><p>可以动态的添加原型对象的方法和属性，并直接反映在对象实例上。</p>\n</li>\n</ol>\n<hr>\n<pre><code>var person1 = new Person()\nPerson.prototype.showFriends = function() {\n      console.log(this.friends)\n}\nperson1.showFriends()  //[&apos;lilei&apos;]\n</code></pre><h4 id=\"缺点：-2\"><a href=\"#缺点：-2\" class=\"headerlink\" title=\"缺点：\"></a><font style=\"color:red\">缺点：</font></h4><h5 id=\"出现引用的情况下会出现问题具体见下面代码：\"><a href=\"#出现引用的情况下会出现问题具体见下面代码：\" class=\"headerlink\" title=\"出现引用的情况下会出现问题具体见下面代码：\"></a>出现引用的情况下会出现问题具体见下面代码：</h5><pre><code>var person1 = new Person();\nvar person2 = new Person();\nperson1.friends.push(&apos;xiaoming&apos;);\nconsole.log(person2.friends)  //[&apos;lilei&apos;, &apos;xiaoming&apos;]\n</code></pre><h5 id=\"因为js对引用类型的赋值都是将地址存储在变量中，所以person1和person2的friends属性指向的是同一块存储区域。\"><a href=\"#因为js对引用类型的赋值都是将地址存储在变量中，所以person1和person2的friends属性指向的是同一块存储区域。\" class=\"headerlink\" title=\"因为js对引用类型的赋值都是将地址存储在变量中，所以person1和person2的friends属性指向的是同一块存储区域。\"></a>因为js对引用类型的赋值都是将地址存储在变量中，所以person1和person2的friends属性指向的是同一块存储区域。</h5><ol>\n<li>第一次调用say方法或者name属性的时候会搜索两次，第一次是在实例上寻找say方法，没有找到就去原型对象(Person.prototype)上找say方法，找到后就会在实力上添加这些方法or属性。    </li>\n</ol>\n<ol>\n<li>所有的方法都是共享的，没有办法创建实例自己的属性和方法，也没有办法像构造函数那样传递参数。</li>\n</ol>\n<h3 id=\"注意：-1\"><a href=\"#注意：-1\" class=\"headerlink\" title=\"注意：\"></a><font style=\"color:red\">注意：</font></h3><p>优点②中存在一个问题就是直接通过对象字面量给<code>Person.prototype</code>进行赋值的时候会导致<code>constructor</code>改变，所以需要手动设置，其次就是通过对象字面量给<code>Person.prototype</code>进行赋值，会无法作用在之前创建的对象实例上</p>\n<pre><code>var person1 = new Person()\nPerson.prototype = {\n        name: &apos;hanmeimei2&apos;,\n          setName: function(name){\n          this.name = name\n      }\n}\nperson1.setName()   //Uncaught TypeError: person1.set     is not a     function(…)\n</code></pre><p>这是因为对象实例和对象原型直接是通过一个指针链接的，这个指针是一个内部属性[[Prototype]]，可以通过<code>__proto__</code>访问。我们通过对象字面量修改了Person.prototype指向的地址，然而对象实例的<code>__proto__</code>，并没有跟着一起更新，所以这就导致，实例还访问着原来的<code>Person.prototype</code>，所以建议不要通过这种方式去改变<code>Person.prototype</code>属性</p>\n<h3 id=\"构造函数和原型组合模式\"><a href=\"#构造函数和原型组合模式\" class=\"headerlink\" title=\"构造函数和原型组合模式\"></a><font style=\"color:orange\">构造函数和原型组合模式</font></h3><pre><code>function Person(name) {\n      this.name = name\n      this.friends = [&apos;lilei&apos;]\n}\nPerson.prototype.say = function() {\n      console.log(this.name)\n}\nvar person1 = new Person(&apos;hanmeimei&apos;)\nperson1.say() //hanmeimei\n</code></pre><h4 id=\"优点：-3\"><a href=\"#优点：-3\" class=\"headerlink\" title=\"优点：\"></a><font style=\"color:red\">优点：</font></h4><ol>\n<li>解决了原型模式对于引用对象的缺点</li>\n<li>解决了原型模式没有办法传递参数的缺点</li>\n<li>解决了构造函数模式不能共享方法的缺点</li>\n</ol>\n<h4 id=\"缺点：-3\"><a href=\"#缺点：-3\" class=\"headerlink\" title=\"缺点：\"></a><font style=\"color:red\">缺点：</font></h4><ol>\n<li>和原型模式中注意①一样 （可以动态的添加原型对象的方法和属性，并直接反映在对象实例上。针对这个问题中存在一个问题就是直接通过对象字面量给Person.prototype进行赋值的时候会导致constructor改变，所以需要手动设置，其次就是通过对象字面量给Person.prototype进行赋值，会无法作用在之前创建的对象实例上）</li>\n</ol>\n<h3 id=\"动态原型模式\"><a href=\"#动态原型模式\" class=\"headerlink\" title=\"动态原型模式\"></a><font style=\"color:orange\">动态原型模式</font></h3><pre><code>function Person(name) {\n      this.name = name\n       if(typeof this.say != &apos;function&apos;) {\n        Person.prototype.say = function(\n        alert(this.name)\n      }\n}\n</code></pre><h4 id=\"优点：-4\"><a href=\"#优点：-4\" class=\"headerlink\" title=\"优点：\"></a><font style=\"color:red\">优点：</font></h4><ol>\n<li>可以在初次调用构造函数的时候就完成原型对象的修改</li>\n<li>修改能体现在所有的实例中</li>\n</ol>\n<h4 id=\"缺点：-4\"><a href=\"#缺点：-4\" class=\"headerlink\" title=\"缺点：\"></a><font style=\"color:red\">缺点：</font></h4><h5 id=\"红宝书都说这个方案完美了。。。。\"><a href=\"#红宝书都说这个方案完美了。。。。\" class=\"headerlink\" title=\"红宝书都说这个方案完美了。。。。\"></a>红宝书都说这个方案完美了。。。。</h5><h3 id=\"寄生构造函数模式\"><a href=\"#寄生构造函数模式\" class=\"headerlink\" title=\"寄生构造函数模式\"></a><font style=\"color:orange\">寄生构造函数模式</font></h3><pre><code>function Person(name) {\n      var o = new Object()\n     o.name = name\n     o.say = function() {\n        alert(this.name)\n      }\n          return o\n    }\nvar peron1 = new Person(&apos;hanmeimei&apos;)\n</code></pre><h4 id=\"优点：-5\"><a href=\"#优点：-5\" class=\"headerlink\" title=\"优点：\"></a><font style=\"color:red\">优点：</font></h4><h5 id=\"和工厂模式基本一样，除了多了个new操作符\"><a href=\"#和工厂模式基本一样，除了多了个new操作符\" class=\"headerlink\" title=\"和工厂模式基本一样，除了多了个new操作符\"></a>和工厂模式基本一样，除了多了个new操作符</h5><h4 id=\"缺点：-5\"><a href=\"#缺点：-5\" class=\"headerlink\" title=\"缺点：\"></a><font style=\"color:red\">缺点：</font></h4><h5 id=\"和工厂模式一样，不能区分实例的类别\"><a href=\"#和工厂模式一样，不能区分实例的类别\" class=\"headerlink\" title=\"和工厂模式一样，不能区分实例的类别\"></a>和工厂模式一样，不能区分实例的类别</h5><h3 id=\"稳妥构造模式\"><a href=\"#稳妥构造模式\" class=\"headerlink\" title=\"稳妥构造模式\"></a><font style=\"color:orange\">稳妥构造模式</font></h3><pre><code>function Person(name) {\n     var o = new Object()\n      o.say = function() {\n    alert(name)\n   }\n}\nvar person1 = new Person(&apos;hanmeimei&apos;);\nperson1.name  // undefined\nperson1.say() //hanmeimei\n</code></pre><h4 id=\"优点：-6\"><a href=\"#优点：-6\" class=\"headerlink\" title=\"优点：\"></a><font style=\"color:red\">优点：</font></h4><p>安全，name好像成为了私有变量，只能通过say方法去访问</p>\n<h4 id=\"缺点：-6\"><a href=\"#缺点：-6\" class=\"headerlink\" title=\"缺点：\"></a><font style=\"color:red\">缺点：</font></h4><h5 id=\"不能区分实例的类别\"><a href=\"#不能区分实例的类别\" class=\"headerlink\" title=\"不能区分实例的类别\"></a>不能区分实例的类别</h5><p>🔗原文链接: [<a href=\"http://alvinyuxt.github.io/2016/11/11/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1/\">http://alvinyuxt.github.io/2016/11/11/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1/</a>) by @alvinyuxt</p>\n"},{"title":"给大家罗列这段时间的面试题","date":"2016-11-17T02:55:47.000Z","_content":"#### 1. 下面的值中那个不属于JS的基本类型\n\n\t\tA: 'abcd'\n \n\t\tB: 1234 \n\n\t\tC: ['1234']\n\n\t\tD: null\n\t\n#### 2. 下面对数组的描述中，说法不正确的是：\n\t\n\t\tA： 素组是一组属性名和属性的有序集合\n\t\n\t\tB: 素组的length属性既可以获取，也可以被修改\n\t\n\t\tC: 使用push()方法给数组添加值 ，会直接修改原数组\n\t\n\t\tD: shift()的返回值是数组的长度\n\t\n#### 3. 下面的等式不成立的是：\n\t\n\t\tA: 1 == true\n\t\n\t\tB: null == undefined\n\t\n\t\tC: '0' == false\n\t\n\t\tD: isNaN(true) == false\n\t\n#### 4. 任何类型的值与字符串相加，都是在做字符串拼接。\n\n\t\tA: 正确 \n\t\n\t\tB: 错误\n\t\n#### 5. 下面哪个值为真值：\n\n\t\tA: 0\n\t\n\t\tB: undefined\n\t\n\t\tC: []\n\t\n\t\tD: false\n\n#### 6. 下面代码的执行结果是：\n\t\n\t\tfor(var i = 0; i<=5){\n\t\n\t\t++i;\n\t\t\n\t\t}\n\t\talert(i);\n\t\t\n#### 7. 下面代码片段中，一次点击1、2、3、4、5，会对应弹出0、1、2、3、4：____\n\t\n\t\t<ul>\n\t\t\t<li>1</Li>\t\n\t\t\t<li>2</Li>\t\n\t\t\t<li>3</Li>\t\n\t\t\t<li>4</Li>\t\n\t\t\t<li>5</Li>\t\n\t\t</ul>\n\t\t\n\t\t<script>\n\t\t\tvar aLi = document.getElementsByTagName(\"li\");\n\t\t\tfor(var i = 0;i < aLi.lenght;i++){\n\t\t\t\taLi[i].onclick = function(){\n\t\t\t\t\talert(i);\n\t\t\t\t}\n\t\t\t}\n\t\t</script>\n\t\t\n\t\tA: 正确\n\t\n\t\tB: 错误\n\t\t\n\t\t\n#### 8. 执行下面的代码片段，会弹出div的内容\"这是一个div\"，____\n\n\t\t<div id=\"div\">这是一个div</div>\n\t\n\t\t<script>\n\t\t\n\t\t\tvar oDiv = document.getElementsByTagName(\"div\");\n\t\t\t\n\t\t\t\talert(oDiv.innerHTML);\n\t\t\t\t\n\t\t</script> \n\t\t\t\n\t\tA: 正确\n\t \n\t\tB: 错误\n\t\n#### 9. 通过arr[1]可以获取到下面数组中的1.____\n\t\n\t\tvar arr = [1,2,3,4];\n\t\n\t\tA: 正确\n\t\n\t\tB: 错误\n\t\n#### 10. 下面的代码中编写中，正确的是：____\n\t\n\t\tA: var aLi = document.getElementsByTagName(\"li\");\n\t\t\n\t\t\taLi.innerHTML = '今天天气真好啊';\n\t\t\t\n\t\tB: var oDiv1 = document.getElementById(\"div1\");\n\t\t\n\t\t\tvar oDiv2 = document.getElementById(\"div2\");\n\t\t\t\n\t\tC: var oImg = document.getElementById('pic');\n\t\t\n\t\t\tif(oImg.src == \"1.jpg\"){\n\t\t\t\n\t\t\t\toImg.src = \"2.jpg\";\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\tD: var oUl = document.getElementById(\"ul1\");\n\t\t\t\n\t\t\toUl.className = \"active\";\n\t\t\t\t\n#### 11. 下面代码的运行结果是：_____\n\n\t\tvar a = 20;\n\t\t\n\t\t\talert(!a);\n\t\t\n\t\tA: -20\n\t\t\n\t\tB: undefined\n\t\t\n\t\tC: true\n\t\t\n\t\tD: false\n\t\t\n#### 12.\t下面代码的运行结果是：___\n\t\n\t\t\tfunction fn1(){\n\t\t\n\t\t\t\talert(1);\n\t\t\t\n\t\t\t\t}\t\n\t\t\t\n\t\t\t\talert(fn1);\n\t\t\n\t\t\t\t A: 1\n\t\t\n\t\t\t\tB: undefined\n\t\t\n\t\t\t\tC: function fn1(){\n\t\t\t\n\t\t\t\t\t\talert(1);\n\t\t\t\n\t\t\t\t\t}\n\t\t\n\t\t\t\tD: alert(1)\n\t\t\n#### 13. 以下代码的运行结果是：____\n\n\t\tvar i = 0;\n\t\t\n\t\t\talert( ++i == i++ );\n\t\t\t\t\n\t\t\n\t\tA: true\n\t\t\n\t\tB: false\n\t\t\n\t\tC: undefined\n\t\t\n\t\tD: NaN\n\n#### 14. 下面代码中，在定时器没有关闭之前，下面的匿名函数不会被执行:____\n\n\t\tvar timer = null;\n\t\t\n\t\tvar i = 0;\n\t\t\n\t\ttimer = setInertvar(function(){\n\t\t\n\t\t\ti++;\n\t\t\t\n\t\t\talert(i);\n\t\t\t\n\t\t\tif(i == 10){\n\t\t\t\n\t\t\t alert(\"定时器被关闭了。\");\n\t\t\t \n\t\t\t clearInterval(timer);\t\t\t \n\t\t\t\n\t\t\t}\t\t\t\n\t\t\n\t\t},1000)\t\n\t\t\n\t\t(function(){\n\t\t\t\n\t\t\talert(\"我是一个函数。\")\n\t\t\t\n\t\t})\t\n\t\t\n\t\t（）;\n\t\t\n\t\tA: 正确\n\t \n\t\tB: 错误\t\n\t\n#### 15. 下面的等式成立的是：_____\n\n\t\tA: parseInt(12.5) == paeseFloat(12.5)\n\t\n\t\tB: Number(\"\") == parseFloat(\"\");\n\t\n\t\tC: isNaN(\"abc\") == NaN\n\t\n\t\tD: typeof NaN === \"number\"\t\n\t\t\n#### 16. 下面描述中正确的是：___\n\n\t\tA: '=='在比较过程中，不但会比较两边的值，韩慧比较两边的数据类型\n\t\t\n\t\tB: '==='在比较过程中，如果有必要，会进行数据类型转换\n\t\t\n\t\tC: 任何类型的值，使用！进行转换后，结果一定是一个布尔值\n\t\t\n\t\tD: NaN == NaN 的结果是true;\t\t\n\t\n#### 17. 下面的描述中不正确的是:____\n\n\t\tA: arguments 中保存了世纪传入函数内的所有参数\n\t\t\n\t\tB: return 只能在函数内部使用\n\t\t\n\t\tC: setInterval(fn1,1000)只会调用一次 fn1\n\t\t\n\t\tD: Date 对象的getMonth()获取到的值比实际月份小1；\n\t\t\n#### 18. 以下代码中，会出现什么结果___\n\n\t\tvar i = 0;\n\t\t\n\t\twhite(i < 6){\n\t\t\n\t\t\tif(i == 4){\n\t\t\t\n\t\t\t\tcontinue;\n\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\ti++;\n\t\t\n\t\t}\n\t\t\n\t\talert(i);\n\n\t\n\t\tA: 6\n\t\t\n\t\tB: 4\n\t\t\n\t\tC: 5\n\t\t\n\t\tD: 死循环\t\t\n\t\t\n#### 19. 以下代码中，会出现什么结果：____\n\n\t\tfunction fn1(){\n\t\t\n\t\t\tvar a = 0;\n\t\t\t\n\t\t\tfunction fn2(){\n\t\t\t\n\t\t\t\ta++;\n\t\t\t\t\n\t\t\t\talert(a);\n\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\treturn fn2;\n\t\t\t\n\t\t}\n\t\t\n\t\tfn1()();\n\t\tfn1()();\t\n\t\t\n\t\tA: 第一次弹1,第二次弹2\n\t\t\n\t\tB: 第一次弹1,第二次弹1\t\t\n\t\t\n#### 20. 以下代码中，会出现什么结果：___\n\n\t\tfn1(10);\n\t\n\t\tfunction fn1(a){\n\t\t\n\t\t\talert(a === arguments[0]);\n\t\t\n\t\t}\n\t\t\n\t\tA: true\n\t\t\n\t\tB: false\n\n#### 21. alert(\"12\">\"9\")的运行结果正确的是：____\n\n\t\tA: true\n\t\t\n\t\tB: false\n\n#### 22. [1,2,3,4].join(\"0\").split(\"\")的执行结果是:____\n\n\t\tA: '1,2,3,4'\n\t\t\n\t\tB: [1,2,3,4]\n\t\t\n\t\tC: [1,0,2,0,3,0,4]\n\t\t\n\t\tD: '1,0,2,0,3,0,4'\t\n\t\t\n#### 23. 下面对substring()方法描述不正确的是：___\n\n\t\tA: 一共有两个参数，胜率第一个参数表示从开始位置提取到字符串结束。\n\t\t\n\t\tB: 提取之前会比较两个参数的大小，并根据大小调整位置。\n\t\t\n\t\tC: 可以接受负数参数，负数表示从欧往前数字符位置。\n\t\t\n\t\tD: 如果没有设置参数，直接返回整个字符串。\n\t\t\n#### 24. charCodeAt() 方法可以把一个字符串编码转换成指定的字符___\n\n\t\tA: 正确\n\t\t\n\t\tB: 错误\n\n#### 25. 调用indexOf() 方法会返回指定字符串在字符串中出现的所在位置：___\n\n\t\tA: 正确\n\t\t\n\t\tB: 错误\n\t\t\n#### 26. 下面股阿奴数组的描述正确的是：___\n\n\t\tA: 数组的length既可以获取，也可以修改。\n\t\t\n\t\tB: 调用pop()方法，不会修改原数组中的值。\n\t\t\n\t\tC: shift()方法的返回值是新数组的长度。\t\n\t\t\n\t\tD: 调用concat() 方法，会修改原数组的值。\n\t\t\n#### 27. 下面事件中，不会产生冒泡的是：___\n\n\t\tA: mouseover\n\t\t\n\t\tB: keydown\n\t\t\n\t\tC: focus\n\t\t\n\t\tD: click\n\t\t\n#### 28. 可以通过下面那种方式阻止事件的默认行为：___\t\n\n\t\tA: ev.preventDefault()\n\t\t\n\t\tB: ev.cancelBubble = true\n\t\t\n\t\tC: ev.stopPropagation()\n\t\t\n\t\tD: return true; \t\t\t\n\n#### 29. 下面那个DOM 方法可以用来创建一个新的DOM 元素：___\n\n\t\tA: appendChild()\n\t\t\n\t\tB: insertBefore()\n\t\t\n\t\tC: createElement()\n\t\t\n\t\tD: createTextNode()\n\t\t\n#### 30. 当浏览器窗口发生尺寸变化时，会触发下面那个事件：___\n\n\t\tA: onscroll\n\t\t\n\t\tB: onresize\n\t\t\n\t\tC: onload\n\t\t\n\t\tD: onerror\n\t\t\n#### 31. 如果要获取一个元素包含边框和内填充的宽度值，应该使用下面的哪一个属性：___\n\n\t\tA: offsetWidth\n\t\t\n\t\tB: clientWidth\n\t\t\n\t\tC: scrollWidth\n\t\t\n\t\tD: innerWidth\n\n#### 32. 下面JS的两个定时器描述正确的是：___\n\n\t\tA: setInertval() 只会在延迟一段时间之后执行一次指定得代码\n\t\t\n\t\tB: setTimeout() 可以在每间隔一段时间之后就执行一次指定的代码\n\t\t\n\t\tC: 定时器内部的this ，在非严格模式下默认为window对象\n\t\t\n\t\tD: 定时器在执行过程中，会阻塞下面的执行\n\t\t\n#### 33. 通过下面哪一个BOM 对象可以获取浏览器地址栏相关信息:___\n\n\t\tA: location\n\t\t\n\t\tB: history\n\t\t\n\t\tC: window\n\t\t\n\t\tD: navigator\n\t\t\n#### 34. 事件对象中的哪一个属性可以获取鼠标距离浏览器窗口左边的距离：___\n\n\t\tA: clientX\n\t\t\n\t\tB: pageX\n\t\t\n\t\tC: offsetX\n\t\t\n\t\tD: screenX\n\t\t\n#### 35. cookie的默认什么时候失效：___\n\n\t\tA: 浏览器窗口关闭\n\t\t\n\t\tB: 一个小时之后\n\t\t\n\t\tC: 计算机关机\n\t\t\n\t\tD: 切换到其他浏览器标签页\t\n\t\t\n\t\t\n#### 36. 下面那个不属于正则表达式的元字符:___\n\n\t\tA: \\w\n\t\tB: \\a\n\t\tC: \\D\n\t\tD: \\s\n\t\t\n#### 37. 下面那个方法的参数不支持正则表达式：___\n\n\t\tA: replace()\n\t\t\n\t\tB: split()\n\t\t\n\t\tC: search()\n\t\t\n\t\tD: slice()\t\n\t\t\n#### 38. 关于Date() 对象的参数， 下面那个中写法有兼容问题：___\n\n\t\tA: new Date(2016,4,23)\n\t\t\n\t\tB: new Date(123453543565)\n\t\t\n\t\tC: new Date('jun 23,2016')\n\t\t\n\t\tD: new Date('6 23,2016')\n\t\t\n#### 39. 下面描述中，说法不正确的是：___\n\n\t\tA: 事件对象只有在触发时间的时候才会保存信息 \n\t\t\n\t\tB: 正则的g修饰符表示进行全局匹配\n\t\t\n\t\tC: 对象的实行名称可以为字符串类型的数字\n\t\t\n\t\tD: click 事件没有冒泡行为\n\t\t\n#### 40. 瀑布流没有使用下面的哪一个知识点：___\n\n\t\tA: 图片延迟加载\n\t\t\n\t\tB: Image() 对象\n\t\t\n\t\tC: scrollTop\n\t\t\n\t\tD: ev.clientX\n\n#### 41. 关于正则的量词，下面说法不正确的是：___\n\n\t\tA: *表示匹配到0到多少个值\n\t\t\n\t\tB: +表示匹配0到多少个值\n\t\t\n\t\tC: {m,}表示最少匹配m个，最多不限\n\t\t\n\t\tD: {m,n}表示匹配至少m个，最多n个\n\n#### 42. 下面那个不属于JQuery库中的方法：___\n\n\t\tA: CSS()\n\t\t\n\t\tB: animate()\n\t\t\n\t\tC: getComputedStyle()\n\t\t\n\t\tD: attr()\n\t\t\t\t\n#### 43. JQuery 中如何获取一个div元素的内容：___\n\t\n\t\tA: $('div').innerHTML\n\t\t\n\t\tB: $('div').val()\n\t\t\n\t\tC: $('div').html\n\t\t\n\t\tD: $('div').html()\n\n#### 44. 下面那个不是事件对象中的属性：___\n\n\t\tA: keyCode\n\t\t\n\t\tB: ClientX\n\t\t\n\t\tC: offsetLeft\n\t\t\n\t\tD: detail\n\t\t\n#### 45. 下面哪一个属性可以查看一个实例对象的构造函数：___\n\n\t\tA: prototype\n\t\t\n\t\tB: constructor\n\t\t \n\t\tC: instanceof\n\t\t\n\t\tD: typeof\n\t\t\n#### 46. 下面说法错误的是：___\n\n\t\tA: return 关键字只能放在函数内部使用\n\t\t\n\t\tB: 逻辑运算符返回的结果一定是一个布尔值\n\t\t\n\t\tC: 关系运算符返回的结果一定是一个布尔值\n\t\t\n\t\tD: 字符串使用字符编码来比较大小\n\t\t\n#### 47. 下面那个时间不属于一定设备上的手势事件：___\n\n\t\tA: touchstart\n\t\t\n\t\tB: touchmove\n\t\t\n\t\tC: tap\n\t\t\n\t\tD: touchend\n\t\t\t\t\n#### 48. 通过addEventListener()方法给一个元素的某个事件绑定一个匿名函数作为事件处理函数，这个匿名函数没有办法被注销：___\n\n\t\tA: 正确\n\t\t\t\n\t\tB: 错误\n\n#### 49. localstorage 中的数据只要用户不主动清除，将会一直保存在本地：___\n\n\t\tA: 正确\n\t\t\n\t\tB: 错误\n\t\t\n#### 50. 下面描述中，说法正确的是：___\n\n\t\tA: getComputeStyle()发发获取到的时行间的样式\n\t\t\n\t\tB: FireFox浏览器通过 mousewheel 来表示鼠标滚轮事件\n\t\t\n\t\tC: 通过Math.random() 方法可以或得一个0~1之间的随机数字\n\t\t\n\t\tD: split() 是一个数组方法\n\t\t\n## 二、\t简答题\n\n\n1. 要在canvas上绘制内容需要获取什么才能对画布进行操作，并写出基本图形绘制可以能用到的几步(例如一条线的额绘制需要怎么来实现，都需要设置什么？)\t2. \n2. 请写出绘制矩形常用的2种方法，并说说他们的不同点。\n3. 写出绘制圆形的方法，并说明每个参数的意义，我需要顺时针画弧要设置第几个属性，值为什么？\n4. 平移、旋转、缩放他们的共同特点是什么？如果我希望在进行一个旋转操作后画壁回到初始状态该怎么办？用代码阐述，并说说你对此的看法和理解。\n5. 绘制图片的方法有三种形式请分别写出并介绍每个参数(在一个图片正常的操作流程的实现)。\n6. 我们要操作一张图片需要获取这张图片的像素点，使用getlmageData()这个方法得到的对象中哪个属性使我们需要进行操作的，要操作的属性他的数据类型是什么？\n\n\t如果有能帮到大家的地方，希望大家给予点亮收藏并喜欢❤️！！谢谢\n\n文／原创/Dimple（github作者）\n原文链接：https://cuidapao.github.io/\n著作权归作者所有，转载请联系作者获得授权，并标注“github作者”。\n\n\n\n\n\t\n\t\n\t\n\t\t\n\t\t\n\t\t\n\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\n\t\t\n\n\n\n\t\n\n\n\t\n\n\t\t\t\t\n","source":"_posts/面试题.md","raw":"---\ntitle: 给大家罗列这段时间的面试题\ndate: 2016-11-17 10:55:47\ntags: [js,canvas,面试题]\n---\n#### 1. 下面的值中那个不属于JS的基本类型\n\n\t\tA: 'abcd'\n \n\t\tB: 1234 \n\n\t\tC: ['1234']\n\n\t\tD: null\n\t\n#### 2. 下面对数组的描述中，说法不正确的是：\n\t\n\t\tA： 素组是一组属性名和属性的有序集合\n\t\n\t\tB: 素组的length属性既可以获取，也可以被修改\n\t\n\t\tC: 使用push()方法给数组添加值 ，会直接修改原数组\n\t\n\t\tD: shift()的返回值是数组的长度\n\t\n#### 3. 下面的等式不成立的是：\n\t\n\t\tA: 1 == true\n\t\n\t\tB: null == undefined\n\t\n\t\tC: '0' == false\n\t\n\t\tD: isNaN(true) == false\n\t\n#### 4. 任何类型的值与字符串相加，都是在做字符串拼接。\n\n\t\tA: 正确 \n\t\n\t\tB: 错误\n\t\n#### 5. 下面哪个值为真值：\n\n\t\tA: 0\n\t\n\t\tB: undefined\n\t\n\t\tC: []\n\t\n\t\tD: false\n\n#### 6. 下面代码的执行结果是：\n\t\n\t\tfor(var i = 0; i<=5){\n\t\n\t\t++i;\n\t\t\n\t\t}\n\t\talert(i);\n\t\t\n#### 7. 下面代码片段中，一次点击1、2、3、4、5，会对应弹出0、1、2、3、4：____\n\t\n\t\t<ul>\n\t\t\t<li>1</Li>\t\n\t\t\t<li>2</Li>\t\n\t\t\t<li>3</Li>\t\n\t\t\t<li>4</Li>\t\n\t\t\t<li>5</Li>\t\n\t\t</ul>\n\t\t\n\t\t<script>\n\t\t\tvar aLi = document.getElementsByTagName(\"li\");\n\t\t\tfor(var i = 0;i < aLi.lenght;i++){\n\t\t\t\taLi[i].onclick = function(){\n\t\t\t\t\talert(i);\n\t\t\t\t}\n\t\t\t}\n\t\t</script>\n\t\t\n\t\tA: 正确\n\t\n\t\tB: 错误\n\t\t\n\t\t\n#### 8. 执行下面的代码片段，会弹出div的内容\"这是一个div\"，____\n\n\t\t<div id=\"div\">这是一个div</div>\n\t\n\t\t<script>\n\t\t\n\t\t\tvar oDiv = document.getElementsByTagName(\"div\");\n\t\t\t\n\t\t\t\talert(oDiv.innerHTML);\n\t\t\t\t\n\t\t</script> \n\t\t\t\n\t\tA: 正确\n\t \n\t\tB: 错误\n\t\n#### 9. 通过arr[1]可以获取到下面数组中的1.____\n\t\n\t\tvar arr = [1,2,3,4];\n\t\n\t\tA: 正确\n\t\n\t\tB: 错误\n\t\n#### 10. 下面的代码中编写中，正确的是：____\n\t\n\t\tA: var aLi = document.getElementsByTagName(\"li\");\n\t\t\n\t\t\taLi.innerHTML = '今天天气真好啊';\n\t\t\t\n\t\tB: var oDiv1 = document.getElementById(\"div1\");\n\t\t\n\t\t\tvar oDiv2 = document.getElementById(\"div2\");\n\t\t\t\n\t\tC: var oImg = document.getElementById('pic');\n\t\t\n\t\t\tif(oImg.src == \"1.jpg\"){\n\t\t\t\n\t\t\t\toImg.src = \"2.jpg\";\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\tD: var oUl = document.getElementById(\"ul1\");\n\t\t\t\n\t\t\toUl.className = \"active\";\n\t\t\t\t\n#### 11. 下面代码的运行结果是：_____\n\n\t\tvar a = 20;\n\t\t\n\t\t\talert(!a);\n\t\t\n\t\tA: -20\n\t\t\n\t\tB: undefined\n\t\t\n\t\tC: true\n\t\t\n\t\tD: false\n\t\t\n#### 12.\t下面代码的运行结果是：___\n\t\n\t\t\tfunction fn1(){\n\t\t\n\t\t\t\talert(1);\n\t\t\t\n\t\t\t\t}\t\n\t\t\t\n\t\t\t\talert(fn1);\n\t\t\n\t\t\t\t A: 1\n\t\t\n\t\t\t\tB: undefined\n\t\t\n\t\t\t\tC: function fn1(){\n\t\t\t\n\t\t\t\t\t\talert(1);\n\t\t\t\n\t\t\t\t\t}\n\t\t\n\t\t\t\tD: alert(1)\n\t\t\n#### 13. 以下代码的运行结果是：____\n\n\t\tvar i = 0;\n\t\t\n\t\t\talert( ++i == i++ );\n\t\t\t\t\n\t\t\n\t\tA: true\n\t\t\n\t\tB: false\n\t\t\n\t\tC: undefined\n\t\t\n\t\tD: NaN\n\n#### 14. 下面代码中，在定时器没有关闭之前，下面的匿名函数不会被执行:____\n\n\t\tvar timer = null;\n\t\t\n\t\tvar i = 0;\n\t\t\n\t\ttimer = setInertvar(function(){\n\t\t\n\t\t\ti++;\n\t\t\t\n\t\t\talert(i);\n\t\t\t\n\t\t\tif(i == 10){\n\t\t\t\n\t\t\t alert(\"定时器被关闭了。\");\n\t\t\t \n\t\t\t clearInterval(timer);\t\t\t \n\t\t\t\n\t\t\t}\t\t\t\n\t\t\n\t\t},1000)\t\n\t\t\n\t\t(function(){\n\t\t\t\n\t\t\talert(\"我是一个函数。\")\n\t\t\t\n\t\t})\t\n\t\t\n\t\t（）;\n\t\t\n\t\tA: 正确\n\t \n\t\tB: 错误\t\n\t\n#### 15. 下面的等式成立的是：_____\n\n\t\tA: parseInt(12.5) == paeseFloat(12.5)\n\t\n\t\tB: Number(\"\") == parseFloat(\"\");\n\t\n\t\tC: isNaN(\"abc\") == NaN\n\t\n\t\tD: typeof NaN === \"number\"\t\n\t\t\n#### 16. 下面描述中正确的是：___\n\n\t\tA: '=='在比较过程中，不但会比较两边的值，韩慧比较两边的数据类型\n\t\t\n\t\tB: '==='在比较过程中，如果有必要，会进行数据类型转换\n\t\t\n\t\tC: 任何类型的值，使用！进行转换后，结果一定是一个布尔值\n\t\t\n\t\tD: NaN == NaN 的结果是true;\t\t\n\t\n#### 17. 下面的描述中不正确的是:____\n\n\t\tA: arguments 中保存了世纪传入函数内的所有参数\n\t\t\n\t\tB: return 只能在函数内部使用\n\t\t\n\t\tC: setInterval(fn1,1000)只会调用一次 fn1\n\t\t\n\t\tD: Date 对象的getMonth()获取到的值比实际月份小1；\n\t\t\n#### 18. 以下代码中，会出现什么结果___\n\n\t\tvar i = 0;\n\t\t\n\t\twhite(i < 6){\n\t\t\n\t\t\tif(i == 4){\n\t\t\t\n\t\t\t\tcontinue;\n\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\ti++;\n\t\t\n\t\t}\n\t\t\n\t\talert(i);\n\n\t\n\t\tA: 6\n\t\t\n\t\tB: 4\n\t\t\n\t\tC: 5\n\t\t\n\t\tD: 死循环\t\t\n\t\t\n#### 19. 以下代码中，会出现什么结果：____\n\n\t\tfunction fn1(){\n\t\t\n\t\t\tvar a = 0;\n\t\t\t\n\t\t\tfunction fn2(){\n\t\t\t\n\t\t\t\ta++;\n\t\t\t\t\n\t\t\t\talert(a);\n\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\treturn fn2;\n\t\t\t\n\t\t}\n\t\t\n\t\tfn1()();\n\t\tfn1()();\t\n\t\t\n\t\tA: 第一次弹1,第二次弹2\n\t\t\n\t\tB: 第一次弹1,第二次弹1\t\t\n\t\t\n#### 20. 以下代码中，会出现什么结果：___\n\n\t\tfn1(10);\n\t\n\t\tfunction fn1(a){\n\t\t\n\t\t\talert(a === arguments[0]);\n\t\t\n\t\t}\n\t\t\n\t\tA: true\n\t\t\n\t\tB: false\n\n#### 21. alert(\"12\">\"9\")的运行结果正确的是：____\n\n\t\tA: true\n\t\t\n\t\tB: false\n\n#### 22. [1,2,3,4].join(\"0\").split(\"\")的执行结果是:____\n\n\t\tA: '1,2,3,4'\n\t\t\n\t\tB: [1,2,3,4]\n\t\t\n\t\tC: [1,0,2,0,3,0,4]\n\t\t\n\t\tD: '1,0,2,0,3,0,4'\t\n\t\t\n#### 23. 下面对substring()方法描述不正确的是：___\n\n\t\tA: 一共有两个参数，胜率第一个参数表示从开始位置提取到字符串结束。\n\t\t\n\t\tB: 提取之前会比较两个参数的大小，并根据大小调整位置。\n\t\t\n\t\tC: 可以接受负数参数，负数表示从欧往前数字符位置。\n\t\t\n\t\tD: 如果没有设置参数，直接返回整个字符串。\n\t\t\n#### 24. charCodeAt() 方法可以把一个字符串编码转换成指定的字符___\n\n\t\tA: 正确\n\t\t\n\t\tB: 错误\n\n#### 25. 调用indexOf() 方法会返回指定字符串在字符串中出现的所在位置：___\n\n\t\tA: 正确\n\t\t\n\t\tB: 错误\n\t\t\n#### 26. 下面股阿奴数组的描述正确的是：___\n\n\t\tA: 数组的length既可以获取，也可以修改。\n\t\t\n\t\tB: 调用pop()方法，不会修改原数组中的值。\n\t\t\n\t\tC: shift()方法的返回值是新数组的长度。\t\n\t\t\n\t\tD: 调用concat() 方法，会修改原数组的值。\n\t\t\n#### 27. 下面事件中，不会产生冒泡的是：___\n\n\t\tA: mouseover\n\t\t\n\t\tB: keydown\n\t\t\n\t\tC: focus\n\t\t\n\t\tD: click\n\t\t\n#### 28. 可以通过下面那种方式阻止事件的默认行为：___\t\n\n\t\tA: ev.preventDefault()\n\t\t\n\t\tB: ev.cancelBubble = true\n\t\t\n\t\tC: ev.stopPropagation()\n\t\t\n\t\tD: return true; \t\t\t\n\n#### 29. 下面那个DOM 方法可以用来创建一个新的DOM 元素：___\n\n\t\tA: appendChild()\n\t\t\n\t\tB: insertBefore()\n\t\t\n\t\tC: createElement()\n\t\t\n\t\tD: createTextNode()\n\t\t\n#### 30. 当浏览器窗口发生尺寸变化时，会触发下面那个事件：___\n\n\t\tA: onscroll\n\t\t\n\t\tB: onresize\n\t\t\n\t\tC: onload\n\t\t\n\t\tD: onerror\n\t\t\n#### 31. 如果要获取一个元素包含边框和内填充的宽度值，应该使用下面的哪一个属性：___\n\n\t\tA: offsetWidth\n\t\t\n\t\tB: clientWidth\n\t\t\n\t\tC: scrollWidth\n\t\t\n\t\tD: innerWidth\n\n#### 32. 下面JS的两个定时器描述正确的是：___\n\n\t\tA: setInertval() 只会在延迟一段时间之后执行一次指定得代码\n\t\t\n\t\tB: setTimeout() 可以在每间隔一段时间之后就执行一次指定的代码\n\t\t\n\t\tC: 定时器内部的this ，在非严格模式下默认为window对象\n\t\t\n\t\tD: 定时器在执行过程中，会阻塞下面的执行\n\t\t\n#### 33. 通过下面哪一个BOM 对象可以获取浏览器地址栏相关信息:___\n\n\t\tA: location\n\t\t\n\t\tB: history\n\t\t\n\t\tC: window\n\t\t\n\t\tD: navigator\n\t\t\n#### 34. 事件对象中的哪一个属性可以获取鼠标距离浏览器窗口左边的距离：___\n\n\t\tA: clientX\n\t\t\n\t\tB: pageX\n\t\t\n\t\tC: offsetX\n\t\t\n\t\tD: screenX\n\t\t\n#### 35. cookie的默认什么时候失效：___\n\n\t\tA: 浏览器窗口关闭\n\t\t\n\t\tB: 一个小时之后\n\t\t\n\t\tC: 计算机关机\n\t\t\n\t\tD: 切换到其他浏览器标签页\t\n\t\t\n\t\t\n#### 36. 下面那个不属于正则表达式的元字符:___\n\n\t\tA: \\w\n\t\tB: \\a\n\t\tC: \\D\n\t\tD: \\s\n\t\t\n#### 37. 下面那个方法的参数不支持正则表达式：___\n\n\t\tA: replace()\n\t\t\n\t\tB: split()\n\t\t\n\t\tC: search()\n\t\t\n\t\tD: slice()\t\n\t\t\n#### 38. 关于Date() 对象的参数， 下面那个中写法有兼容问题：___\n\n\t\tA: new Date(2016,4,23)\n\t\t\n\t\tB: new Date(123453543565)\n\t\t\n\t\tC: new Date('jun 23,2016')\n\t\t\n\t\tD: new Date('6 23,2016')\n\t\t\n#### 39. 下面描述中，说法不正确的是：___\n\n\t\tA: 事件对象只有在触发时间的时候才会保存信息 \n\t\t\n\t\tB: 正则的g修饰符表示进行全局匹配\n\t\t\n\t\tC: 对象的实行名称可以为字符串类型的数字\n\t\t\n\t\tD: click 事件没有冒泡行为\n\t\t\n#### 40. 瀑布流没有使用下面的哪一个知识点：___\n\n\t\tA: 图片延迟加载\n\t\t\n\t\tB: Image() 对象\n\t\t\n\t\tC: scrollTop\n\t\t\n\t\tD: ev.clientX\n\n#### 41. 关于正则的量词，下面说法不正确的是：___\n\n\t\tA: *表示匹配到0到多少个值\n\t\t\n\t\tB: +表示匹配0到多少个值\n\t\t\n\t\tC: {m,}表示最少匹配m个，最多不限\n\t\t\n\t\tD: {m,n}表示匹配至少m个，最多n个\n\n#### 42. 下面那个不属于JQuery库中的方法：___\n\n\t\tA: CSS()\n\t\t\n\t\tB: animate()\n\t\t\n\t\tC: getComputedStyle()\n\t\t\n\t\tD: attr()\n\t\t\t\t\n#### 43. JQuery 中如何获取一个div元素的内容：___\n\t\n\t\tA: $('div').innerHTML\n\t\t\n\t\tB: $('div').val()\n\t\t\n\t\tC: $('div').html\n\t\t\n\t\tD: $('div').html()\n\n#### 44. 下面那个不是事件对象中的属性：___\n\n\t\tA: keyCode\n\t\t\n\t\tB: ClientX\n\t\t\n\t\tC: offsetLeft\n\t\t\n\t\tD: detail\n\t\t\n#### 45. 下面哪一个属性可以查看一个实例对象的构造函数：___\n\n\t\tA: prototype\n\t\t\n\t\tB: constructor\n\t\t \n\t\tC: instanceof\n\t\t\n\t\tD: typeof\n\t\t\n#### 46. 下面说法错误的是：___\n\n\t\tA: return 关键字只能放在函数内部使用\n\t\t\n\t\tB: 逻辑运算符返回的结果一定是一个布尔值\n\t\t\n\t\tC: 关系运算符返回的结果一定是一个布尔值\n\t\t\n\t\tD: 字符串使用字符编码来比较大小\n\t\t\n#### 47. 下面那个时间不属于一定设备上的手势事件：___\n\n\t\tA: touchstart\n\t\t\n\t\tB: touchmove\n\t\t\n\t\tC: tap\n\t\t\n\t\tD: touchend\n\t\t\t\t\n#### 48. 通过addEventListener()方法给一个元素的某个事件绑定一个匿名函数作为事件处理函数，这个匿名函数没有办法被注销：___\n\n\t\tA: 正确\n\t\t\t\n\t\tB: 错误\n\n#### 49. localstorage 中的数据只要用户不主动清除，将会一直保存在本地：___\n\n\t\tA: 正确\n\t\t\n\t\tB: 错误\n\t\t\n#### 50. 下面描述中，说法正确的是：___\n\n\t\tA: getComputeStyle()发发获取到的时行间的样式\n\t\t\n\t\tB: FireFox浏览器通过 mousewheel 来表示鼠标滚轮事件\n\t\t\n\t\tC: 通过Math.random() 方法可以或得一个0~1之间的随机数字\n\t\t\n\t\tD: split() 是一个数组方法\n\t\t\n## 二、\t简答题\n\n\n1. 要在canvas上绘制内容需要获取什么才能对画布进行操作，并写出基本图形绘制可以能用到的几步(例如一条线的额绘制需要怎么来实现，都需要设置什么？)\t2. \n2. 请写出绘制矩形常用的2种方法，并说说他们的不同点。\n3. 写出绘制圆形的方法，并说明每个参数的意义，我需要顺时针画弧要设置第几个属性，值为什么？\n4. 平移、旋转、缩放他们的共同特点是什么？如果我希望在进行一个旋转操作后画壁回到初始状态该怎么办？用代码阐述，并说说你对此的看法和理解。\n5. 绘制图片的方法有三种形式请分别写出并介绍每个参数(在一个图片正常的操作流程的实现)。\n6. 我们要操作一张图片需要获取这张图片的像素点，使用getlmageData()这个方法得到的对象中哪个属性使我们需要进行操作的，要操作的属性他的数据类型是什么？\n\n\t如果有能帮到大家的地方，希望大家给予点亮收藏并喜欢❤️！！谢谢\n\n文／原创/Dimple（github作者）\n原文链接：https://cuidapao.github.io/\n著作权归作者所有，转载请联系作者获得授权，并标注“github作者”。\n\n\n\n\n\t\n\t\n\t\n\t\t\n\t\t\n\t\t\n\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\n\t\t\n\n\n\n\t\n\n\n\t\n\n\t\t\t\t\n","slug":"面试题","published":1,"updated":"2016-11-17T08:25:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civoyb9ne00059xsmf9d1s7v6","content":"<h4 id=\"1-下面的值中那个不属于JS的基本类型\"><a href=\"#1-下面的值中那个不属于JS的基本类型\" class=\"headerlink\" title=\"1. 下面的值中那个不属于JS的基本类型\"></a>1. 下面的值中那个不属于JS的基本类型</h4><pre><code>A: &apos;abcd&apos;\n\nB: 1234 \n\nC: [&apos;1234&apos;]\n\nD: null\n</code></pre><h4 id=\"2-下面对数组的描述中，说法不正确的是：\"><a href=\"#2-下面对数组的描述中，说法不正确的是：\" class=\"headerlink\" title=\"2. 下面对数组的描述中，说法不正确的是：\"></a>2. 下面对数组的描述中，说法不正确的是：</h4><pre><code>A： 素组是一组属性名和属性的有序集合\n\nB: 素组的length属性既可以获取，也可以被修改\n\nC: 使用push()方法给数组添加值 ，会直接修改原数组\n\nD: shift()的返回值是数组的长度\n</code></pre><h4 id=\"3-下面的等式不成立的是：\"><a href=\"#3-下面的等式不成立的是：\" class=\"headerlink\" title=\"3. 下面的等式不成立的是：\"></a>3. 下面的等式不成立的是：</h4><pre><code>A: 1 == true\n\nB: null == undefined\n\nC: &apos;0&apos; == false\n\nD: isNaN(true) == false\n</code></pre><h4 id=\"4-任何类型的值与字符串相加，都是在做字符串拼接。\"><a href=\"#4-任何类型的值与字符串相加，都是在做字符串拼接。\" class=\"headerlink\" title=\"4. 任何类型的值与字符串相加，都是在做字符串拼接。\"></a>4. 任何类型的值与字符串相加，都是在做字符串拼接。</h4><pre><code>A: 正确 \n\nB: 错误\n</code></pre><h4 id=\"5-下面哪个值为真值：\"><a href=\"#5-下面哪个值为真值：\" class=\"headerlink\" title=\"5. 下面哪个值为真值：\"></a>5. 下面哪个值为真值：</h4><pre><code>A: 0\n\nB: undefined\n\nC: []\n\nD: false\n</code></pre><h4 id=\"6-下面代码的执行结果是：\"><a href=\"#6-下面代码的执行结果是：\" class=\"headerlink\" title=\"6. 下面代码的执行结果是：\"></a>6. 下面代码的执行结果是：</h4><pre><code>for(var i = 0; i&lt;=5){\n\n++i;\n\n}\nalert(i);\n</code></pre><h4 id=\"7-下面代码片段中，一次点击1、2、3、4、5，会对应弹出0、1、2、3、4：\"><a href=\"#7-下面代码片段中，一次点击1、2、3、4、5，会对应弹出0、1、2、3、4：\" class=\"headerlink\" title=\"7. 下面代码片段中，一次点击1、2、3、4、5，会对应弹出0、1、2、3、4：__\"></a>7. 下面代码片段中，一次点击1、2、3、4、5，会对应弹出0、1、2、3、4：<em>__</em></h4><pre><code>&lt;ul&gt;\n    &lt;li&gt;1&lt;/Li&gt;    \n    &lt;li&gt;2&lt;/Li&gt;    \n    &lt;li&gt;3&lt;/Li&gt;    \n    &lt;li&gt;4&lt;/Li&gt;    \n    &lt;li&gt;5&lt;/Li&gt;    \n&lt;/ul&gt;\n\n&lt;script&gt;\n    var aLi = document.getElementsByTagName(&quot;li&quot;);\n    for(var i = 0;i &lt; aLi.lenght;i++){\n        aLi[i].onclick = function(){\n            alert(i);\n        }\n    }\n&lt;/script&gt;\n\nA: 正确\n\nB: 错误\n</code></pre><h4 id=\"8-执行下面的代码片段，会弹出div的内容”这是一个div”，\"><a href=\"#8-执行下面的代码片段，会弹出div的内容”这是一个div”，\" class=\"headerlink\" title=\"8. 执行下面的代码片段，会弹出div的内容”这是一个div”，__\"></a>8. 执行下面的代码片段，会弹出div的内容”这是一个div”，<em>__</em></h4><pre><code>&lt;div id=&quot;div&quot;&gt;这是一个div&lt;/div&gt;\n\n&lt;script&gt;\n\n    var oDiv = document.getElementsByTagName(&quot;div&quot;);\n\n        alert(oDiv.innerHTML);\n\n&lt;/script&gt; \n\nA: 正确\n\nB: 错误\n</code></pre><h4 id=\"9-通过arr-1-可以获取到下面数组中的1\"><a href=\"#9-通过arr-1-可以获取到下面数组中的1\" class=\"headerlink\" title=\"9. 通过arr[1]可以获取到下面数组中的1.__\"></a>9. 通过arr[1]可以获取到下面数组中的1.<em>__</em></h4><pre><code>var arr = [1,2,3,4];\n\nA: 正确\n\nB: 错误\n</code></pre><h4 id=\"10-下面的代码中编写中，正确的是：\"><a href=\"#10-下面的代码中编写中，正确的是：\" class=\"headerlink\" title=\"10. 下面的代码中编写中，正确的是：__\"></a>10. 下面的代码中编写中，正确的是：<em>__</em></h4><pre><code>A: var aLi = document.getElementsByTagName(&quot;li&quot;);\n\n    aLi.innerHTML = &apos;今天天气真好啊&apos;;\n\nB: var oDiv1 = document.getElementById(&quot;div1&quot;);\n\n    var oDiv2 = document.getElementById(&quot;div2&quot;);\n\nC: var oImg = document.getElementById(&apos;pic&apos;);\n\n    if(oImg.src == &quot;1.jpg&quot;){\n\n        oImg.src = &quot;2.jpg&quot;;\n\n    }\n\nD: var oUl = document.getElementById(&quot;ul1&quot;);\n\n    oUl.className = &quot;active&quot;;\n</code></pre><h4 id=\"11-下面代码的运行结果是：\"><a href=\"#11-下面代码的运行结果是：\" class=\"headerlink\" title=\"11. 下面代码的运行结果是：_\"></a>11. 下面代码的运行结果是：<strong>_</strong></h4><pre><code>var a = 20;\n\n    alert(!a);\n\nA: -20\n\nB: undefined\n\nC: true\n\nD: false\n</code></pre><h4 id=\"12-下面代码的运行结果是：\"><a href=\"#12-下面代码的运行结果是：\" class=\"headerlink\" title=\"12.    下面代码的运行结果是：___\"></a>12.    下面代码的运行结果是：___</h4><pre><code>function fn1(){\n\n    alert(1);\n\n    }    \n\n    alert(fn1);\n\n     A: 1\n\n    B: undefined\n\n    C: function fn1(){\n\n            alert(1);\n\n        }\n\n    D: alert(1)\n</code></pre><h4 id=\"13-以下代码的运行结果是：\"><a href=\"#13-以下代码的运行结果是：\" class=\"headerlink\" title=\"13. 以下代码的运行结果是：__\"></a>13. 以下代码的运行结果是：<em>__</em></h4><pre><code>var i = 0;\n\n    alert( ++i == i++ );\n\n\nA: true\n\nB: false\n\nC: undefined\n\nD: NaN\n</code></pre><h4 id=\"14-下面代码中，在定时器没有关闭之前，下面的匿名函数不会被执行\"><a href=\"#14-下面代码中，在定时器没有关闭之前，下面的匿名函数不会被执行\" class=\"headerlink\" title=\"14. 下面代码中，在定时器没有关闭之前，下面的匿名函数不会被执行:__\"></a>14. 下面代码中，在定时器没有关闭之前，下面的匿名函数不会被执行:<em>__</em></h4><pre><code>var timer = null;\n\nvar i = 0;\n\ntimer = setInertvar(function(){\n\n    i++;\n\n    alert(i);\n\n    if(i == 10){\n\n     alert(&quot;定时器被关闭了。&quot;);\n\n     clearInterval(timer);             \n\n    }            \n\n},1000)    \n\n(function(){\n\n    alert(&quot;我是一个函数。&quot;)\n\n})    \n\n（）;\n\nA: 正确\n\nB: 错误    \n</code></pre><h4 id=\"15-下面的等式成立的是：\"><a href=\"#15-下面的等式成立的是：\" class=\"headerlink\" title=\"15. 下面的等式成立的是：_\"></a>15. 下面的等式成立的是：<strong>_</strong></h4><pre><code>A: parseInt(12.5) == paeseFloat(12.5)\n\nB: Number(&quot;&quot;) == parseFloat(&quot;&quot;);\n\nC: isNaN(&quot;abc&quot;) == NaN\n\nD: typeof NaN === &quot;number&quot;    \n</code></pre><h4 id=\"16-下面描述中正确的是：\"><a href=\"#16-下面描述中正确的是：\" class=\"headerlink\" title=\"16. 下面描述中正确的是：___\"></a>16. 下面描述中正确的是：___</h4><pre><code>A: &apos;==&apos;在比较过程中，不但会比较两边的值，韩慧比较两边的数据类型\n\nB: &apos;===&apos;在比较过程中，如果有必要，会进行数据类型转换\n\nC: 任何类型的值，使用！进行转换后，结果一定是一个布尔值\n\nD: NaN == NaN 的结果是true;        \n</code></pre><h4 id=\"17-下面的描述中不正确的是\"><a href=\"#17-下面的描述中不正确的是\" class=\"headerlink\" title=\"17. 下面的描述中不正确的是:__\"></a>17. 下面的描述中不正确的是:<em>__</em></h4><pre><code>A: arguments 中保存了世纪传入函数内的所有参数\n\nB: return 只能在函数内部使用\n\nC: setInterval(fn1,1000)只会调用一次 fn1\n\nD: Date 对象的getMonth()获取到的值比实际月份小1；\n</code></pre><h4 id=\"18-以下代码中，会出现什么结果\"><a href=\"#18-以下代码中，会出现什么结果\" class=\"headerlink\" title=\"18. 以下代码中，会出现什么结果___\"></a>18. 以下代码中，会出现什么结果___</h4><pre><code>var i = 0;\n\nwhite(i &lt; 6){\n\n    if(i == 4){\n\n        continue;\n\n    }\n\n    i++;\n\n}\n\nalert(i);\n\n\nA: 6\n\nB: 4\n\nC: 5\n\nD: 死循环        \n</code></pre><h4 id=\"19-以下代码中，会出现什么结果：\"><a href=\"#19-以下代码中，会出现什么结果：\" class=\"headerlink\" title=\"19. 以下代码中，会出现什么结果：__\"></a>19. 以下代码中，会出现什么结果：<em>__</em></h4><pre><code>function fn1(){\n\n    var a = 0;\n\n    function fn2(){\n\n        a++;\n\n        alert(a);\n\n    }\n\n    return fn2;\n\n}\n\nfn1()();\nfn1()();    \n\nA: 第一次弹1,第二次弹2\n\nB: 第一次弹1,第二次弹1        \n</code></pre><h4 id=\"20-以下代码中，会出现什么结果：\"><a href=\"#20-以下代码中，会出现什么结果：\" class=\"headerlink\" title=\"20. 以下代码中，会出现什么结果：___\"></a>20. 以下代码中，会出现什么结果：___</h4><pre><code>fn1(10);\n\nfunction fn1(a){\n\n    alert(a === arguments[0]);\n\n}\n\nA: true\n\nB: false\n</code></pre><h4 id=\"21-alert-“12”-gt-”9”-的运行结果正确的是：\"><a href=\"#21-alert-“12”-gt-”9”-的运行结果正确的是：\" class=\"headerlink\" title=\"21. alert(“12”&gt;”9”)的运行结果正确的是：__\"></a>21. alert(“12”&gt;”9”)的运行结果正确的是：<em>__</em></h4><pre><code>A: true\n\nB: false\n</code></pre><h4 id=\"22-1-2-3-4-join-“0”-split-“”-的执行结果是\"><a href=\"#22-1-2-3-4-join-“0”-split-“”-的执行结果是\" class=\"headerlink\" title=\"22. [1,2,3,4].join(“0”).split(“”)的执行结果是:__\"></a>22. [1,2,3,4].join(“0”).split(“”)的执行结果是:<em>__</em></h4><pre><code>A: &apos;1,2,3,4&apos;\n\nB: [1,2,3,4]\n\nC: [1,0,2,0,3,0,4]\n\nD: &apos;1,0,2,0,3,0,4&apos;    \n</code></pre><h4 id=\"23-下面对substring-方法描述不正确的是：\"><a href=\"#23-下面对substring-方法描述不正确的是：\" class=\"headerlink\" title=\"23. 下面对substring()方法描述不正确的是：___\"></a>23. 下面对substring()方法描述不正确的是：___</h4><pre><code>A: 一共有两个参数，胜率第一个参数表示从开始位置提取到字符串结束。\n\nB: 提取之前会比较两个参数的大小，并根据大小调整位置。\n\nC: 可以接受负数参数，负数表示从欧往前数字符位置。\n\nD: 如果没有设置参数，直接返回整个字符串。\n</code></pre><h4 id=\"24-charCodeAt-方法可以把一个字符串编码转换成指定的字符\"><a href=\"#24-charCodeAt-方法可以把一个字符串编码转换成指定的字符\" class=\"headerlink\" title=\"24. charCodeAt() 方法可以把一个字符串编码转换成指定的字符___\"></a>24. charCodeAt() 方法可以把一个字符串编码转换成指定的字符___</h4><pre><code>A: 正确\n\nB: 错误\n</code></pre><h4 id=\"25-调用indexOf-方法会返回指定字符串在字符串中出现的所在位置：\"><a href=\"#25-调用indexOf-方法会返回指定字符串在字符串中出现的所在位置：\" class=\"headerlink\" title=\"25. 调用indexOf() 方法会返回指定字符串在字符串中出现的所在位置：___\"></a>25. 调用indexOf() 方法会返回指定字符串在字符串中出现的所在位置：___</h4><pre><code>A: 正确\n\nB: 错误\n</code></pre><h4 id=\"26-下面股阿奴数组的描述正确的是：\"><a href=\"#26-下面股阿奴数组的描述正确的是：\" class=\"headerlink\" title=\"26. 下面股阿奴数组的描述正确的是：___\"></a>26. 下面股阿奴数组的描述正确的是：___</h4><pre><code>A: 数组的length既可以获取，也可以修改。\n\nB: 调用pop()方法，不会修改原数组中的值。\n\nC: shift()方法的返回值是新数组的长度。    \n\nD: 调用concat() 方法，会修改原数组的值。\n</code></pre><h4 id=\"27-下面事件中，不会产生冒泡的是：\"><a href=\"#27-下面事件中，不会产生冒泡的是：\" class=\"headerlink\" title=\"27. 下面事件中，不会产生冒泡的是：___\"></a>27. 下面事件中，不会产生冒泡的是：___</h4><pre><code>A: mouseover\n\nB: keydown\n\nC: focus\n\nD: click\n</code></pre><h4 id=\"28-可以通过下面那种方式阻止事件的默认行为：\"><a href=\"#28-可以通过下面那种方式阻止事件的默认行为：\" class=\"headerlink\" title=\"28. 可以通过下面那种方式阻止事件的默认行为：___\"></a>28. 可以通过下面那种方式阻止事件的默认行为：___</h4><pre><code>A: ev.preventDefault()\n\nB: ev.cancelBubble = true\n\nC: ev.stopPropagation()\n\nD: return true;             \n</code></pre><h4 id=\"29-下面那个DOM-方法可以用来创建一个新的DOM-元素：\"><a href=\"#29-下面那个DOM-方法可以用来创建一个新的DOM-元素：\" class=\"headerlink\" title=\"29. 下面那个DOM 方法可以用来创建一个新的DOM 元素：___\"></a>29. 下面那个DOM 方法可以用来创建一个新的DOM 元素：___</h4><pre><code>A: appendChild()\n\nB: insertBefore()\n\nC: createElement()\n\nD: createTextNode()\n</code></pre><h4 id=\"30-当浏览器窗口发生尺寸变化时，会触发下面那个事件：\"><a href=\"#30-当浏览器窗口发生尺寸变化时，会触发下面那个事件：\" class=\"headerlink\" title=\"30. 当浏览器窗口发生尺寸变化时，会触发下面那个事件：___\"></a>30. 当浏览器窗口发生尺寸变化时，会触发下面那个事件：___</h4><pre><code>A: onscroll\n\nB: onresize\n\nC: onload\n\nD: onerror\n</code></pre><h4 id=\"31-如果要获取一个元素包含边框和内填充的宽度值，应该使用下面的哪一个属性：\"><a href=\"#31-如果要获取一个元素包含边框和内填充的宽度值，应该使用下面的哪一个属性：\" class=\"headerlink\" title=\"31. 如果要获取一个元素包含边框和内填充的宽度值，应该使用下面的哪一个属性：___\"></a>31. 如果要获取一个元素包含边框和内填充的宽度值，应该使用下面的哪一个属性：___</h4><pre><code>A: offsetWidth\n\nB: clientWidth\n\nC: scrollWidth\n\nD: innerWidth\n</code></pre><h4 id=\"32-下面JS的两个定时器描述正确的是：\"><a href=\"#32-下面JS的两个定时器描述正确的是：\" class=\"headerlink\" title=\"32. 下面JS的两个定时器描述正确的是：___\"></a>32. 下面JS的两个定时器描述正确的是：___</h4><pre><code>A: setInertval() 只会在延迟一段时间之后执行一次指定得代码\n\nB: setTimeout() 可以在每间隔一段时间之后就执行一次指定的代码\n\nC: 定时器内部的this ，在非严格模式下默认为window对象\n\nD: 定时器在执行过程中，会阻塞下面的执行\n</code></pre><h4 id=\"33-通过下面哪一个BOM-对象可以获取浏览器地址栏相关信息\"><a href=\"#33-通过下面哪一个BOM-对象可以获取浏览器地址栏相关信息\" class=\"headerlink\" title=\"33. 通过下面哪一个BOM 对象可以获取浏览器地址栏相关信息:___\"></a>33. 通过下面哪一个BOM 对象可以获取浏览器地址栏相关信息:___</h4><pre><code>A: location\n\nB: history\n\nC: window\n\nD: navigator\n</code></pre><h4 id=\"34-事件对象中的哪一个属性可以获取鼠标距离浏览器窗口左边的距离：\"><a href=\"#34-事件对象中的哪一个属性可以获取鼠标距离浏览器窗口左边的距离：\" class=\"headerlink\" title=\"34. 事件对象中的哪一个属性可以获取鼠标距离浏览器窗口左边的距离：___\"></a>34. 事件对象中的哪一个属性可以获取鼠标距离浏览器窗口左边的距离：___</h4><pre><code>A: clientX\n\nB: pageX\n\nC: offsetX\n\nD: screenX\n</code></pre><h4 id=\"35-cookie的默认什么时候失效：\"><a href=\"#35-cookie的默认什么时候失效：\" class=\"headerlink\" title=\"35. cookie的默认什么时候失效：___\"></a>35. cookie的默认什么时候失效：___</h4><pre><code>A: 浏览器窗口关闭\n\nB: 一个小时之后\n\nC: 计算机关机\n\nD: 切换到其他浏览器标签页    \n</code></pre><h4 id=\"36-下面那个不属于正则表达式的元字符\"><a href=\"#36-下面那个不属于正则表达式的元字符\" class=\"headerlink\" title=\"36. 下面那个不属于正则表达式的元字符:___\"></a>36. 下面那个不属于正则表达式的元字符:___</h4><pre><code>A: \\w\nB: \\a\nC: \\D\nD: \\s\n</code></pre><h4 id=\"37-下面那个方法的参数不支持正则表达式：\"><a href=\"#37-下面那个方法的参数不支持正则表达式：\" class=\"headerlink\" title=\"37. 下面那个方法的参数不支持正则表达式：___\"></a>37. 下面那个方法的参数不支持正则表达式：___</h4><pre><code>A: replace()\n\nB: split()\n\nC: search()\n\nD: slice()    \n</code></pre><h4 id=\"38-关于Date-对象的参数，-下面那个中写法有兼容问题：\"><a href=\"#38-关于Date-对象的参数，-下面那个中写法有兼容问题：\" class=\"headerlink\" title=\"38. 关于Date() 对象的参数， 下面那个中写法有兼容问题：___\"></a>38. 关于Date() 对象的参数， 下面那个中写法有兼容问题：___</h4><pre><code>A: new Date(2016,4,23)\n\nB: new Date(123453543565)\n\nC: new Date(&apos;jun 23,2016&apos;)\n\nD: new Date(&apos;6 23,2016&apos;)\n</code></pre><h4 id=\"39-下面描述中，说法不正确的是：\"><a href=\"#39-下面描述中，说法不正确的是：\" class=\"headerlink\" title=\"39. 下面描述中，说法不正确的是：___\"></a>39. 下面描述中，说法不正确的是：___</h4><pre><code>A: 事件对象只有在触发时间的时候才会保存信息 \n\nB: 正则的g修饰符表示进行全局匹配\n\nC: 对象的实行名称可以为字符串类型的数字\n\nD: click 事件没有冒泡行为\n</code></pre><h4 id=\"40-瀑布流没有使用下面的哪一个知识点：\"><a href=\"#40-瀑布流没有使用下面的哪一个知识点：\" class=\"headerlink\" title=\"40. 瀑布流没有使用下面的哪一个知识点：___\"></a>40. 瀑布流没有使用下面的哪一个知识点：___</h4><pre><code>A: 图片延迟加载\n\nB: Image() 对象\n\nC: scrollTop\n\nD: ev.clientX\n</code></pre><h4 id=\"41-关于正则的量词，下面说法不正确的是：\"><a href=\"#41-关于正则的量词，下面说法不正确的是：\" class=\"headerlink\" title=\"41. 关于正则的量词，下面说法不正确的是：___\"></a>41. 关于正则的量词，下面说法不正确的是：___</h4><pre><code>A: *表示匹配到0到多少个值\n\nB: +表示匹配0到多少个值\n\nC: {m,}表示最少匹配m个，最多不限\n\nD: {m,n}表示匹配至少m个，最多n个\n</code></pre><h4 id=\"42-下面那个不属于JQuery库中的方法：\"><a href=\"#42-下面那个不属于JQuery库中的方法：\" class=\"headerlink\" title=\"42. 下面那个不属于JQuery库中的方法：___\"></a>42. 下面那个不属于JQuery库中的方法：___</h4><pre><code>A: CSS()\n\nB: animate()\n\nC: getComputedStyle()\n\nD: attr()\n</code></pre><h4 id=\"43-JQuery-中如何获取一个div元素的内容：\"><a href=\"#43-JQuery-中如何获取一个div元素的内容：\" class=\"headerlink\" title=\"43. JQuery 中如何获取一个div元素的内容：___\"></a>43. JQuery 中如何获取一个div元素的内容：___</h4><pre><code>A: $(&apos;div&apos;).innerHTML\n\nB: $(&apos;div&apos;).val()\n\nC: $(&apos;div&apos;).html\n\nD: $(&apos;div&apos;).html()\n</code></pre><h4 id=\"44-下面那个不是事件对象中的属性：\"><a href=\"#44-下面那个不是事件对象中的属性：\" class=\"headerlink\" title=\"44. 下面那个不是事件对象中的属性：___\"></a>44. 下面那个不是事件对象中的属性：___</h4><pre><code>A: keyCode\n\nB: ClientX\n\nC: offsetLeft\n\nD: detail\n</code></pre><h4 id=\"45-下面哪一个属性可以查看一个实例对象的构造函数：\"><a href=\"#45-下面哪一个属性可以查看一个实例对象的构造函数：\" class=\"headerlink\" title=\"45. 下面哪一个属性可以查看一个实例对象的构造函数：___\"></a>45. 下面哪一个属性可以查看一个实例对象的构造函数：___</h4><pre><code>A: prototype\n\nB: constructor\n\nC: instanceof\n\nD: typeof\n</code></pre><h4 id=\"46-下面说法错误的是：\"><a href=\"#46-下面说法错误的是：\" class=\"headerlink\" title=\"46. 下面说法错误的是：___\"></a>46. 下面说法错误的是：___</h4><pre><code>A: return 关键字只能放在函数内部使用\n\nB: 逻辑运算符返回的结果一定是一个布尔值\n\nC: 关系运算符返回的结果一定是一个布尔值\n\nD: 字符串使用字符编码来比较大小\n</code></pre><h4 id=\"47-下面那个时间不属于一定设备上的手势事件：\"><a href=\"#47-下面那个时间不属于一定设备上的手势事件：\" class=\"headerlink\" title=\"47. 下面那个时间不属于一定设备上的手势事件：___\"></a>47. 下面那个时间不属于一定设备上的手势事件：___</h4><pre><code>A: touchstart\n\nB: touchmove\n\nC: tap\n\nD: touchend\n</code></pre><h4 id=\"48-通过addEventListener-方法给一个元素的某个事件绑定一个匿名函数作为事件处理函数，这个匿名函数没有办法被注销：\"><a href=\"#48-通过addEventListener-方法给一个元素的某个事件绑定一个匿名函数作为事件处理函数，这个匿名函数没有办法被注销：\" class=\"headerlink\" title=\"48. 通过addEventListener()方法给一个元素的某个事件绑定一个匿名函数作为事件处理函数，这个匿名函数没有办法被注销：___\"></a>48. 通过addEventListener()方法给一个元素的某个事件绑定一个匿名函数作为事件处理函数，这个匿名函数没有办法被注销：___</h4><pre><code>A: 正确\n\nB: 错误\n</code></pre><h4 id=\"49-localstorage-中的数据只要用户不主动清除，将会一直保存在本地：\"><a href=\"#49-localstorage-中的数据只要用户不主动清除，将会一直保存在本地：\" class=\"headerlink\" title=\"49. localstorage 中的数据只要用户不主动清除，将会一直保存在本地：___\"></a>49. localstorage 中的数据只要用户不主动清除，将会一直保存在本地：___</h4><pre><code>A: 正确\n\nB: 错误\n</code></pre><h4 id=\"50-下面描述中，说法正确的是：\"><a href=\"#50-下面描述中，说法正确的是：\" class=\"headerlink\" title=\"50. 下面描述中，说法正确的是：___\"></a>50. 下面描述中，说法正确的是：___</h4><pre><code>A: getComputeStyle()发发获取到的时行间的样式\n\nB: FireFox浏览器通过 mousewheel 来表示鼠标滚轮事件\n\nC: 通过Math.random() 方法可以或得一个0~1之间的随机数字\n\nD: split() 是一个数组方法\n</code></pre><h2 id=\"二、-简答题\"><a href=\"#二、-简答题\" class=\"headerlink\" title=\"二、    简答题\"></a>二、    简答题</h2><ol>\n<li>要在canvas上绘制内容需要获取什么才能对画布进行操作，并写出基本图形绘制可以能用到的几步(例如一条线的额绘制需要怎么来实现，都需要设置什么？)    2. </li>\n<li>请写出绘制矩形常用的2种方法，并说说他们的不同点。</li>\n<li>写出绘制圆形的方法，并说明每个参数的意义，我需要顺时针画弧要设置第几个属性，值为什么？</li>\n<li>平移、旋转、缩放他们的共同特点是什么？如果我希望在进行一个旋转操作后画壁回到初始状态该怎么办？用代码阐述，并说说你对此的看法和理解。</li>\n<li>绘制图片的方法有三种形式请分别写出并介绍每个参数(在一个图片正常的操作流程的实现)。</li>\n<li><p>我们要操作一张图片需要获取这张图片的像素点，使用getlmageData()这个方法得到的对象中哪个属性使我们需要进行操作的，要操作的属性他的数据类型是什么？</p>\n<p> 如果有能帮到大家的地方，希望大家给予点亮收藏并喜欢❤️！！谢谢</p>\n</li>\n</ol>\n<p>文／原创/Dimple（github作者）<br>原文链接：<a href=\"https://cuidapao.github.io/\" target=\"_blank\" rel=\"external\">https://cuidapao.github.io/</a><br>著作权归作者所有，转载请联系作者获得授权，并标注“github作者”。</p>\n","excerpt":"","more":"<h4 id=\"1-下面的值中那个不属于JS的基本类型\"><a href=\"#1-下面的值中那个不属于JS的基本类型\" class=\"headerlink\" title=\"1. 下面的值中那个不属于JS的基本类型\"></a>1. 下面的值中那个不属于JS的基本类型</h4><pre><code>A: &apos;abcd&apos;\n\nB: 1234 \n\nC: [&apos;1234&apos;]\n\nD: null\n</code></pre><h4 id=\"2-下面对数组的描述中，说法不正确的是：\"><a href=\"#2-下面对数组的描述中，说法不正确的是：\" class=\"headerlink\" title=\"2. 下面对数组的描述中，说法不正确的是：\"></a>2. 下面对数组的描述中，说法不正确的是：</h4><pre><code>A： 素组是一组属性名和属性的有序集合\n\nB: 素组的length属性既可以获取，也可以被修改\n\nC: 使用push()方法给数组添加值 ，会直接修改原数组\n\nD: shift()的返回值是数组的长度\n</code></pre><h4 id=\"3-下面的等式不成立的是：\"><a href=\"#3-下面的等式不成立的是：\" class=\"headerlink\" title=\"3. 下面的等式不成立的是：\"></a>3. 下面的等式不成立的是：</h4><pre><code>A: 1 == true\n\nB: null == undefined\n\nC: &apos;0&apos; == false\n\nD: isNaN(true) == false\n</code></pre><h4 id=\"4-任何类型的值与字符串相加，都是在做字符串拼接。\"><a href=\"#4-任何类型的值与字符串相加，都是在做字符串拼接。\" class=\"headerlink\" title=\"4. 任何类型的值与字符串相加，都是在做字符串拼接。\"></a>4. 任何类型的值与字符串相加，都是在做字符串拼接。</h4><pre><code>A: 正确 \n\nB: 错误\n</code></pre><h4 id=\"5-下面哪个值为真值：\"><a href=\"#5-下面哪个值为真值：\" class=\"headerlink\" title=\"5. 下面哪个值为真值：\"></a>5. 下面哪个值为真值：</h4><pre><code>A: 0\n\nB: undefined\n\nC: []\n\nD: false\n</code></pre><h4 id=\"6-下面代码的执行结果是：\"><a href=\"#6-下面代码的执行结果是：\" class=\"headerlink\" title=\"6. 下面代码的执行结果是：\"></a>6. 下面代码的执行结果是：</h4><pre><code>for(var i = 0; i&lt;=5){\n\n++i;\n\n}\nalert(i);\n</code></pre><h4 id=\"7-下面代码片段中，一次点击1、2、3、4、5，会对应弹出0、1、2、3、4：\"><a href=\"#7-下面代码片段中，一次点击1、2、3、4、5，会对应弹出0、1、2、3、4：\" class=\"headerlink\" title=\"7. 下面代码片段中，一次点击1、2、3、4、5，会对应弹出0、1、2、3、4：__\"></a>7. 下面代码片段中，一次点击1、2、3、4、5，会对应弹出0、1、2、3、4：<em>__</em></h4><pre><code>&lt;ul&gt;\n    &lt;li&gt;1&lt;/Li&gt;    \n    &lt;li&gt;2&lt;/Li&gt;    \n    &lt;li&gt;3&lt;/Li&gt;    \n    &lt;li&gt;4&lt;/Li&gt;    \n    &lt;li&gt;5&lt;/Li&gt;    \n&lt;/ul&gt;\n\n&lt;script&gt;\n    var aLi = document.getElementsByTagName(&quot;li&quot;);\n    for(var i = 0;i &lt; aLi.lenght;i++){\n        aLi[i].onclick = function(){\n            alert(i);\n        }\n    }\n&lt;/script&gt;\n\nA: 正确\n\nB: 错误\n</code></pre><h4 id=\"8-执行下面的代码片段，会弹出div的内容”这是一个div”，\"><a href=\"#8-执行下面的代码片段，会弹出div的内容”这是一个div”，\" class=\"headerlink\" title=\"8. 执行下面的代码片段，会弹出div的内容”这是一个div”，__\"></a>8. 执行下面的代码片段，会弹出div的内容”这是一个div”，<em>__</em></h4><pre><code>&lt;div id=&quot;div&quot;&gt;这是一个div&lt;/div&gt;\n\n&lt;script&gt;\n\n    var oDiv = document.getElementsByTagName(&quot;div&quot;);\n\n        alert(oDiv.innerHTML);\n\n&lt;/script&gt; \n\nA: 正确\n\nB: 错误\n</code></pre><h4 id=\"9-通过arr-1-可以获取到下面数组中的1\"><a href=\"#9-通过arr-1-可以获取到下面数组中的1\" class=\"headerlink\" title=\"9. 通过arr[1]可以获取到下面数组中的1.__\"></a>9. 通过arr[1]可以获取到下面数组中的1.<em>__</em></h4><pre><code>var arr = [1,2,3,4];\n\nA: 正确\n\nB: 错误\n</code></pre><h4 id=\"10-下面的代码中编写中，正确的是：\"><a href=\"#10-下面的代码中编写中，正确的是：\" class=\"headerlink\" title=\"10. 下面的代码中编写中，正确的是：__\"></a>10. 下面的代码中编写中，正确的是：<em>__</em></h4><pre><code>A: var aLi = document.getElementsByTagName(&quot;li&quot;);\n\n    aLi.innerHTML = &apos;今天天气真好啊&apos;;\n\nB: var oDiv1 = document.getElementById(&quot;div1&quot;);\n\n    var oDiv2 = document.getElementById(&quot;div2&quot;);\n\nC: var oImg = document.getElementById(&apos;pic&apos;);\n\n    if(oImg.src == &quot;1.jpg&quot;){\n\n        oImg.src = &quot;2.jpg&quot;;\n\n    }\n\nD: var oUl = document.getElementById(&quot;ul1&quot;);\n\n    oUl.className = &quot;active&quot;;\n</code></pre><h4 id=\"11-下面代码的运行结果是：\"><a href=\"#11-下面代码的运行结果是：\" class=\"headerlink\" title=\"11. 下面代码的运行结果是：_\"></a>11. 下面代码的运行结果是：<strong>_</strong></h4><pre><code>var a = 20;\n\n    alert(!a);\n\nA: -20\n\nB: undefined\n\nC: true\n\nD: false\n</code></pre><h4 id=\"12-下面代码的运行结果是：\"><a href=\"#12-下面代码的运行结果是：\" class=\"headerlink\" title=\"12.    下面代码的运行结果是：___\"></a>12.    下面代码的运行结果是：___</h4><pre><code>function fn1(){\n\n    alert(1);\n\n    }    \n\n    alert(fn1);\n\n     A: 1\n\n    B: undefined\n\n    C: function fn1(){\n\n            alert(1);\n\n        }\n\n    D: alert(1)\n</code></pre><h4 id=\"13-以下代码的运行结果是：\"><a href=\"#13-以下代码的运行结果是：\" class=\"headerlink\" title=\"13. 以下代码的运行结果是：__\"></a>13. 以下代码的运行结果是：<em>__</em></h4><pre><code>var i = 0;\n\n    alert( ++i == i++ );\n\n\nA: true\n\nB: false\n\nC: undefined\n\nD: NaN\n</code></pre><h4 id=\"14-下面代码中，在定时器没有关闭之前，下面的匿名函数不会被执行\"><a href=\"#14-下面代码中，在定时器没有关闭之前，下面的匿名函数不会被执行\" class=\"headerlink\" title=\"14. 下面代码中，在定时器没有关闭之前，下面的匿名函数不会被执行:__\"></a>14. 下面代码中，在定时器没有关闭之前，下面的匿名函数不会被执行:<em>__</em></h4><pre><code>var timer = null;\n\nvar i = 0;\n\ntimer = setInertvar(function(){\n\n    i++;\n\n    alert(i);\n\n    if(i == 10){\n\n     alert(&quot;定时器被关闭了。&quot;);\n\n     clearInterval(timer);             \n\n    }            \n\n},1000)    \n\n(function(){\n\n    alert(&quot;我是一个函数。&quot;)\n\n})    \n\n（）;\n\nA: 正确\n\nB: 错误    \n</code></pre><h4 id=\"15-下面的等式成立的是：\"><a href=\"#15-下面的等式成立的是：\" class=\"headerlink\" title=\"15. 下面的等式成立的是：_\"></a>15. 下面的等式成立的是：<strong>_</strong></h4><pre><code>A: parseInt(12.5) == paeseFloat(12.5)\n\nB: Number(&quot;&quot;) == parseFloat(&quot;&quot;);\n\nC: isNaN(&quot;abc&quot;) == NaN\n\nD: typeof NaN === &quot;number&quot;    \n</code></pre><h4 id=\"16-下面描述中正确的是：\"><a href=\"#16-下面描述中正确的是：\" class=\"headerlink\" title=\"16. 下面描述中正确的是：___\"></a>16. 下面描述中正确的是：___</h4><pre><code>A: &apos;==&apos;在比较过程中，不但会比较两边的值，韩慧比较两边的数据类型\n\nB: &apos;===&apos;在比较过程中，如果有必要，会进行数据类型转换\n\nC: 任何类型的值，使用！进行转换后，结果一定是一个布尔值\n\nD: NaN == NaN 的结果是true;        \n</code></pre><h4 id=\"17-下面的描述中不正确的是\"><a href=\"#17-下面的描述中不正确的是\" class=\"headerlink\" title=\"17. 下面的描述中不正确的是:__\"></a>17. 下面的描述中不正确的是:<em>__</em></h4><pre><code>A: arguments 中保存了世纪传入函数内的所有参数\n\nB: return 只能在函数内部使用\n\nC: setInterval(fn1,1000)只会调用一次 fn1\n\nD: Date 对象的getMonth()获取到的值比实际月份小1；\n</code></pre><h4 id=\"18-以下代码中，会出现什么结果\"><a href=\"#18-以下代码中，会出现什么结果\" class=\"headerlink\" title=\"18. 以下代码中，会出现什么结果___\"></a>18. 以下代码中，会出现什么结果___</h4><pre><code>var i = 0;\n\nwhite(i &lt; 6){\n\n    if(i == 4){\n\n        continue;\n\n    }\n\n    i++;\n\n}\n\nalert(i);\n\n\nA: 6\n\nB: 4\n\nC: 5\n\nD: 死循环        \n</code></pre><h4 id=\"19-以下代码中，会出现什么结果：\"><a href=\"#19-以下代码中，会出现什么结果：\" class=\"headerlink\" title=\"19. 以下代码中，会出现什么结果：__\"></a>19. 以下代码中，会出现什么结果：<em>__</em></h4><pre><code>function fn1(){\n\n    var a = 0;\n\n    function fn2(){\n\n        a++;\n\n        alert(a);\n\n    }\n\n    return fn2;\n\n}\n\nfn1()();\nfn1()();    \n\nA: 第一次弹1,第二次弹2\n\nB: 第一次弹1,第二次弹1        \n</code></pre><h4 id=\"20-以下代码中，会出现什么结果：\"><a href=\"#20-以下代码中，会出现什么结果：\" class=\"headerlink\" title=\"20. 以下代码中，会出现什么结果：___\"></a>20. 以下代码中，会出现什么结果：___</h4><pre><code>fn1(10);\n\nfunction fn1(a){\n\n    alert(a === arguments[0]);\n\n}\n\nA: true\n\nB: false\n</code></pre><h4 id=\"21-alert-“12”-gt-”9”-的运行结果正确的是：\"><a href=\"#21-alert-“12”-gt-”9”-的运行结果正确的是：\" class=\"headerlink\" title=\"21. alert(“12”&gt;”9”)的运行结果正确的是：__\"></a>21. alert(“12”&gt;”9”)的运行结果正确的是：<em>__</em></h4><pre><code>A: true\n\nB: false\n</code></pre><h4 id=\"22-1-2-3-4-join-“0”-split-“”-的执行结果是\"><a href=\"#22-1-2-3-4-join-“0”-split-“”-的执行结果是\" class=\"headerlink\" title=\"22. [1,2,3,4].join(“0”).split(“”)的执行结果是:__\"></a>22. [1,2,3,4].join(“0”).split(“”)的执行结果是:<em>__</em></h4><pre><code>A: &apos;1,2,3,4&apos;\n\nB: [1,2,3,4]\n\nC: [1,0,2,0,3,0,4]\n\nD: &apos;1,0,2,0,3,0,4&apos;    \n</code></pre><h4 id=\"23-下面对substring-方法描述不正确的是：\"><a href=\"#23-下面对substring-方法描述不正确的是：\" class=\"headerlink\" title=\"23. 下面对substring()方法描述不正确的是：___\"></a>23. 下面对substring()方法描述不正确的是：___</h4><pre><code>A: 一共有两个参数，胜率第一个参数表示从开始位置提取到字符串结束。\n\nB: 提取之前会比较两个参数的大小，并根据大小调整位置。\n\nC: 可以接受负数参数，负数表示从欧往前数字符位置。\n\nD: 如果没有设置参数，直接返回整个字符串。\n</code></pre><h4 id=\"24-charCodeAt-方法可以把一个字符串编码转换成指定的字符\"><a href=\"#24-charCodeAt-方法可以把一个字符串编码转换成指定的字符\" class=\"headerlink\" title=\"24. charCodeAt() 方法可以把一个字符串编码转换成指定的字符___\"></a>24. charCodeAt() 方法可以把一个字符串编码转换成指定的字符___</h4><pre><code>A: 正确\n\nB: 错误\n</code></pre><h4 id=\"25-调用indexOf-方法会返回指定字符串在字符串中出现的所在位置：\"><a href=\"#25-调用indexOf-方法会返回指定字符串在字符串中出现的所在位置：\" class=\"headerlink\" title=\"25. 调用indexOf() 方法会返回指定字符串在字符串中出现的所在位置：___\"></a>25. 调用indexOf() 方法会返回指定字符串在字符串中出现的所在位置：___</h4><pre><code>A: 正确\n\nB: 错误\n</code></pre><h4 id=\"26-下面股阿奴数组的描述正确的是：\"><a href=\"#26-下面股阿奴数组的描述正确的是：\" class=\"headerlink\" title=\"26. 下面股阿奴数组的描述正确的是：___\"></a>26. 下面股阿奴数组的描述正确的是：___</h4><pre><code>A: 数组的length既可以获取，也可以修改。\n\nB: 调用pop()方法，不会修改原数组中的值。\n\nC: shift()方法的返回值是新数组的长度。    \n\nD: 调用concat() 方法，会修改原数组的值。\n</code></pre><h4 id=\"27-下面事件中，不会产生冒泡的是：\"><a href=\"#27-下面事件中，不会产生冒泡的是：\" class=\"headerlink\" title=\"27. 下面事件中，不会产生冒泡的是：___\"></a>27. 下面事件中，不会产生冒泡的是：___</h4><pre><code>A: mouseover\n\nB: keydown\n\nC: focus\n\nD: click\n</code></pre><h4 id=\"28-可以通过下面那种方式阻止事件的默认行为：\"><a href=\"#28-可以通过下面那种方式阻止事件的默认行为：\" class=\"headerlink\" title=\"28. 可以通过下面那种方式阻止事件的默认行为：___\"></a>28. 可以通过下面那种方式阻止事件的默认行为：___</h4><pre><code>A: ev.preventDefault()\n\nB: ev.cancelBubble = true\n\nC: ev.stopPropagation()\n\nD: return true;             \n</code></pre><h4 id=\"29-下面那个DOM-方法可以用来创建一个新的DOM-元素：\"><a href=\"#29-下面那个DOM-方法可以用来创建一个新的DOM-元素：\" class=\"headerlink\" title=\"29. 下面那个DOM 方法可以用来创建一个新的DOM 元素：___\"></a>29. 下面那个DOM 方法可以用来创建一个新的DOM 元素：___</h4><pre><code>A: appendChild()\n\nB: insertBefore()\n\nC: createElement()\n\nD: createTextNode()\n</code></pre><h4 id=\"30-当浏览器窗口发生尺寸变化时，会触发下面那个事件：\"><a href=\"#30-当浏览器窗口发生尺寸变化时，会触发下面那个事件：\" class=\"headerlink\" title=\"30. 当浏览器窗口发生尺寸变化时，会触发下面那个事件：___\"></a>30. 当浏览器窗口发生尺寸变化时，会触发下面那个事件：___</h4><pre><code>A: onscroll\n\nB: onresize\n\nC: onload\n\nD: onerror\n</code></pre><h4 id=\"31-如果要获取一个元素包含边框和内填充的宽度值，应该使用下面的哪一个属性：\"><a href=\"#31-如果要获取一个元素包含边框和内填充的宽度值，应该使用下面的哪一个属性：\" class=\"headerlink\" title=\"31. 如果要获取一个元素包含边框和内填充的宽度值，应该使用下面的哪一个属性：___\"></a>31. 如果要获取一个元素包含边框和内填充的宽度值，应该使用下面的哪一个属性：___</h4><pre><code>A: offsetWidth\n\nB: clientWidth\n\nC: scrollWidth\n\nD: innerWidth\n</code></pre><h4 id=\"32-下面JS的两个定时器描述正确的是：\"><a href=\"#32-下面JS的两个定时器描述正确的是：\" class=\"headerlink\" title=\"32. 下面JS的两个定时器描述正确的是：___\"></a>32. 下面JS的两个定时器描述正确的是：___</h4><pre><code>A: setInertval() 只会在延迟一段时间之后执行一次指定得代码\n\nB: setTimeout() 可以在每间隔一段时间之后就执行一次指定的代码\n\nC: 定时器内部的this ，在非严格模式下默认为window对象\n\nD: 定时器在执行过程中，会阻塞下面的执行\n</code></pre><h4 id=\"33-通过下面哪一个BOM-对象可以获取浏览器地址栏相关信息\"><a href=\"#33-通过下面哪一个BOM-对象可以获取浏览器地址栏相关信息\" class=\"headerlink\" title=\"33. 通过下面哪一个BOM 对象可以获取浏览器地址栏相关信息:___\"></a>33. 通过下面哪一个BOM 对象可以获取浏览器地址栏相关信息:___</h4><pre><code>A: location\n\nB: history\n\nC: window\n\nD: navigator\n</code></pre><h4 id=\"34-事件对象中的哪一个属性可以获取鼠标距离浏览器窗口左边的距离：\"><a href=\"#34-事件对象中的哪一个属性可以获取鼠标距离浏览器窗口左边的距离：\" class=\"headerlink\" title=\"34. 事件对象中的哪一个属性可以获取鼠标距离浏览器窗口左边的距离：___\"></a>34. 事件对象中的哪一个属性可以获取鼠标距离浏览器窗口左边的距离：___</h4><pre><code>A: clientX\n\nB: pageX\n\nC: offsetX\n\nD: screenX\n</code></pre><h4 id=\"35-cookie的默认什么时候失效：\"><a href=\"#35-cookie的默认什么时候失效：\" class=\"headerlink\" title=\"35. cookie的默认什么时候失效：___\"></a>35. cookie的默认什么时候失效：___</h4><pre><code>A: 浏览器窗口关闭\n\nB: 一个小时之后\n\nC: 计算机关机\n\nD: 切换到其他浏览器标签页    \n</code></pre><h4 id=\"36-下面那个不属于正则表达式的元字符\"><a href=\"#36-下面那个不属于正则表达式的元字符\" class=\"headerlink\" title=\"36. 下面那个不属于正则表达式的元字符:___\"></a>36. 下面那个不属于正则表达式的元字符:___</h4><pre><code>A: \\w\nB: \\a\nC: \\D\nD: \\s\n</code></pre><h4 id=\"37-下面那个方法的参数不支持正则表达式：\"><a href=\"#37-下面那个方法的参数不支持正则表达式：\" class=\"headerlink\" title=\"37. 下面那个方法的参数不支持正则表达式：___\"></a>37. 下面那个方法的参数不支持正则表达式：___</h4><pre><code>A: replace()\n\nB: split()\n\nC: search()\n\nD: slice()    \n</code></pre><h4 id=\"38-关于Date-对象的参数，-下面那个中写法有兼容问题：\"><a href=\"#38-关于Date-对象的参数，-下面那个中写法有兼容问题：\" class=\"headerlink\" title=\"38. 关于Date() 对象的参数， 下面那个中写法有兼容问题：___\"></a>38. 关于Date() 对象的参数， 下面那个中写法有兼容问题：___</h4><pre><code>A: new Date(2016,4,23)\n\nB: new Date(123453543565)\n\nC: new Date(&apos;jun 23,2016&apos;)\n\nD: new Date(&apos;6 23,2016&apos;)\n</code></pre><h4 id=\"39-下面描述中，说法不正确的是：\"><a href=\"#39-下面描述中，说法不正确的是：\" class=\"headerlink\" title=\"39. 下面描述中，说法不正确的是：___\"></a>39. 下面描述中，说法不正确的是：___</h4><pre><code>A: 事件对象只有在触发时间的时候才会保存信息 \n\nB: 正则的g修饰符表示进行全局匹配\n\nC: 对象的实行名称可以为字符串类型的数字\n\nD: click 事件没有冒泡行为\n</code></pre><h4 id=\"40-瀑布流没有使用下面的哪一个知识点：\"><a href=\"#40-瀑布流没有使用下面的哪一个知识点：\" class=\"headerlink\" title=\"40. 瀑布流没有使用下面的哪一个知识点：___\"></a>40. 瀑布流没有使用下面的哪一个知识点：___</h4><pre><code>A: 图片延迟加载\n\nB: Image() 对象\n\nC: scrollTop\n\nD: ev.clientX\n</code></pre><h4 id=\"41-关于正则的量词，下面说法不正确的是：\"><a href=\"#41-关于正则的量词，下面说法不正确的是：\" class=\"headerlink\" title=\"41. 关于正则的量词，下面说法不正确的是：___\"></a>41. 关于正则的量词，下面说法不正确的是：___</h4><pre><code>A: *表示匹配到0到多少个值\n\nB: +表示匹配0到多少个值\n\nC: {m,}表示最少匹配m个，最多不限\n\nD: {m,n}表示匹配至少m个，最多n个\n</code></pre><h4 id=\"42-下面那个不属于JQuery库中的方法：\"><a href=\"#42-下面那个不属于JQuery库中的方法：\" class=\"headerlink\" title=\"42. 下面那个不属于JQuery库中的方法：___\"></a>42. 下面那个不属于JQuery库中的方法：___</h4><pre><code>A: CSS()\n\nB: animate()\n\nC: getComputedStyle()\n\nD: attr()\n</code></pre><h4 id=\"43-JQuery-中如何获取一个div元素的内容：\"><a href=\"#43-JQuery-中如何获取一个div元素的内容：\" class=\"headerlink\" title=\"43. JQuery 中如何获取一个div元素的内容：___\"></a>43. JQuery 中如何获取一个div元素的内容：___</h4><pre><code>A: $(&apos;div&apos;).innerHTML\n\nB: $(&apos;div&apos;).val()\n\nC: $(&apos;div&apos;).html\n\nD: $(&apos;div&apos;).html()\n</code></pre><h4 id=\"44-下面那个不是事件对象中的属性：\"><a href=\"#44-下面那个不是事件对象中的属性：\" class=\"headerlink\" title=\"44. 下面那个不是事件对象中的属性：___\"></a>44. 下面那个不是事件对象中的属性：___</h4><pre><code>A: keyCode\n\nB: ClientX\n\nC: offsetLeft\n\nD: detail\n</code></pre><h4 id=\"45-下面哪一个属性可以查看一个实例对象的构造函数：\"><a href=\"#45-下面哪一个属性可以查看一个实例对象的构造函数：\" class=\"headerlink\" title=\"45. 下面哪一个属性可以查看一个实例对象的构造函数：___\"></a>45. 下面哪一个属性可以查看一个实例对象的构造函数：___</h4><pre><code>A: prototype\n\nB: constructor\n\nC: instanceof\n\nD: typeof\n</code></pre><h4 id=\"46-下面说法错误的是：\"><a href=\"#46-下面说法错误的是：\" class=\"headerlink\" title=\"46. 下面说法错误的是：___\"></a>46. 下面说法错误的是：___</h4><pre><code>A: return 关键字只能放在函数内部使用\n\nB: 逻辑运算符返回的结果一定是一个布尔值\n\nC: 关系运算符返回的结果一定是一个布尔值\n\nD: 字符串使用字符编码来比较大小\n</code></pre><h4 id=\"47-下面那个时间不属于一定设备上的手势事件：\"><a href=\"#47-下面那个时间不属于一定设备上的手势事件：\" class=\"headerlink\" title=\"47. 下面那个时间不属于一定设备上的手势事件：___\"></a>47. 下面那个时间不属于一定设备上的手势事件：___</h4><pre><code>A: touchstart\n\nB: touchmove\n\nC: tap\n\nD: touchend\n</code></pre><h4 id=\"48-通过addEventListener-方法给一个元素的某个事件绑定一个匿名函数作为事件处理函数，这个匿名函数没有办法被注销：\"><a href=\"#48-通过addEventListener-方法给一个元素的某个事件绑定一个匿名函数作为事件处理函数，这个匿名函数没有办法被注销：\" class=\"headerlink\" title=\"48. 通过addEventListener()方法给一个元素的某个事件绑定一个匿名函数作为事件处理函数，这个匿名函数没有办法被注销：___\"></a>48. 通过addEventListener()方法给一个元素的某个事件绑定一个匿名函数作为事件处理函数，这个匿名函数没有办法被注销：___</h4><pre><code>A: 正确\n\nB: 错误\n</code></pre><h4 id=\"49-localstorage-中的数据只要用户不主动清除，将会一直保存在本地：\"><a href=\"#49-localstorage-中的数据只要用户不主动清除，将会一直保存在本地：\" class=\"headerlink\" title=\"49. localstorage 中的数据只要用户不主动清除，将会一直保存在本地：___\"></a>49. localstorage 中的数据只要用户不主动清除，将会一直保存在本地：___</h4><pre><code>A: 正确\n\nB: 错误\n</code></pre><h4 id=\"50-下面描述中，说法正确的是：\"><a href=\"#50-下面描述中，说法正确的是：\" class=\"headerlink\" title=\"50. 下面描述中，说法正确的是：___\"></a>50. 下面描述中，说法正确的是：___</h4><pre><code>A: getComputeStyle()发发获取到的时行间的样式\n\nB: FireFox浏览器通过 mousewheel 来表示鼠标滚轮事件\n\nC: 通过Math.random() 方法可以或得一个0~1之间的随机数字\n\nD: split() 是一个数组方法\n</code></pre><h2 id=\"二、-简答题\"><a href=\"#二、-简答题\" class=\"headerlink\" title=\"二、    简答题\"></a>二、    简答题</h2><ol>\n<li>要在canvas上绘制内容需要获取什么才能对画布进行操作，并写出基本图形绘制可以能用到的几步(例如一条线的额绘制需要怎么来实现，都需要设置什么？)    2. </li>\n<li>请写出绘制矩形常用的2种方法，并说说他们的不同点。</li>\n<li>写出绘制圆形的方法，并说明每个参数的意义，我需要顺时针画弧要设置第几个属性，值为什么？</li>\n<li>平移、旋转、缩放他们的共同特点是什么？如果我希望在进行一个旋转操作后画壁回到初始状态该怎么办？用代码阐述，并说说你对此的看法和理解。</li>\n<li>绘制图片的方法有三种形式请分别写出并介绍每个参数(在一个图片正常的操作流程的实现)。</li>\n<li><p>我们要操作一张图片需要获取这张图片的像素点，使用getlmageData()这个方法得到的对象中哪个属性使我们需要进行操作的，要操作的属性他的数据类型是什么？</p>\n<p> 如果有能帮到大家的地方，希望大家给予点亮收藏并喜欢❤️！！谢谢</p>\n</li>\n</ol>\n<p>文／原创/Dimple（github作者）<br>原文链接：<a href=\"https://cuidapao.github.io/\">https://cuidapao.github.io/</a><br>著作权归作者所有，转载请联系作者获得授权，并标注“github作者”。</p>\n"},{"title":"CSS3,实现简单的轮播图","date":"2016-06-15T09:06:23.000Z","_content":"###    用css3实现一个简单的轮播图\n\n大家如果不用插件，如果js还学得不好，实现一个轮播图，那么就试试我这个cs3实现的轮播图把！哈哈哈\n\n\n\n#### 用css3实现一个简单的slider轮播图\n\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t\t<meta charset=\"utf-8\"/>\n\t\t<title></title>\n\t\t<style type=\"text/css\">\n\t\t\t.box{\n\t\t\t\twidth: 456px;\n\t\t\t\theight: 256px;\n\t\t\t\tmargin: auto;\n\t\t\t\toverflow: hidden;\n\t\t\t}\n\t\t\t.bigdiv{\n\t\t\t\twidth: 2400px;\n\t\t\t\tanimation:run 20s linear infinite;\n\n\t\t\t}\n\t\t\timg{\n\t\t\t\twidth: 19%;\n\t\t\t}\n\t\t\t@keyframes run{\n        \t   0%{\n          \t\tmargin-left: 0px;\n            \t}\n               5%{\n            \t margin-left: 0px;\n          \t   }\n          \t   20%{\n            \t margin-left: -456px;\n         \t    }\n           \t  25%{\n             \tmargin-left: -456px;\n           \t  }\n              40%{\n             \tmargin-left: -912px;\n            \t }\n              45%{\n             \tmargin-left: -912px;\n              }\n             60%{\n             \tmargin-left: -1368px;\n             }\n             65%{\n             \tmargin-left: -1368px;\n             }\n             80%{\n             \tmargin-left: -1834px;\n             }\n             85%{\n             \tmargin-left: -1834px;\n             }\n             100%{\n             \tmargin-left: -2280px;-\n             }\n\n\t\t}\n\n\t</style>\n\t</head>\n\t<body>\n   \t \t<div class=\"box\">\n    \t \t  <div class=\"bigdiv\">\n    \t   \t \t      <img src=\"放置图片路径\" \talt=\"\">   // 这里没有放置图片  大家可以自己添加\n    \t   \t     \t  <img src=\"放置图片路径\" \talt=\"\">   // 这里没有放置图片  大家可以自己添加\n    \t   \t      \t  <img src=\"放置图片路径\"\t\talt=\"\">   // 这里没有放置图片  大家可以自己添加\n    \t   \t      \t  <img src=\"放置图片路径\" \talt=\"\">   // 这里没有放置图片  大家可以自己添加\n    \t   \t    \t  <img src=\"放置图片路径\" \talt=\"\">   // 这里没有放置图片  大家可以自己添加\n    \t  \t </div>\n   \t\t </div>\n\n\t</body>\n\t</html>\n\t\n这样一个轮播图就出来了   大家看完如果觉得不错  就收藏一下⭐️⭐️⭐️⭐️⭐️\n\n","source":"_posts/纯CSS3实现轮播图.md","raw":"---\ntitle: CSS3,实现简单的轮播图\ndate: 2016-6-15 17:06:23\ntags: [CSS,实现简单的轮播图]\n---\n###    用css3实现一个简单的轮播图\n\n大家如果不用插件，如果js还学得不好，实现一个轮播图，那么就试试我这个cs3实现的轮播图把！哈哈哈\n\n\n\n#### 用css3实现一个简单的slider轮播图\n\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t\t<meta charset=\"utf-8\"/>\n\t\t<title></title>\n\t\t<style type=\"text/css\">\n\t\t\t.box{\n\t\t\t\twidth: 456px;\n\t\t\t\theight: 256px;\n\t\t\t\tmargin: auto;\n\t\t\t\toverflow: hidden;\n\t\t\t}\n\t\t\t.bigdiv{\n\t\t\t\twidth: 2400px;\n\t\t\t\tanimation:run 20s linear infinite;\n\n\t\t\t}\n\t\t\timg{\n\t\t\t\twidth: 19%;\n\t\t\t}\n\t\t\t@keyframes run{\n        \t   0%{\n          \t\tmargin-left: 0px;\n            \t}\n               5%{\n            \t margin-left: 0px;\n          \t   }\n          \t   20%{\n            \t margin-left: -456px;\n         \t    }\n           \t  25%{\n             \tmargin-left: -456px;\n           \t  }\n              40%{\n             \tmargin-left: -912px;\n            \t }\n              45%{\n             \tmargin-left: -912px;\n              }\n             60%{\n             \tmargin-left: -1368px;\n             }\n             65%{\n             \tmargin-left: -1368px;\n             }\n             80%{\n             \tmargin-left: -1834px;\n             }\n             85%{\n             \tmargin-left: -1834px;\n             }\n             100%{\n             \tmargin-left: -2280px;-\n             }\n\n\t\t}\n\n\t</style>\n\t</head>\n\t<body>\n   \t \t<div class=\"box\">\n    \t \t  <div class=\"bigdiv\">\n    \t   \t \t      <img src=\"放置图片路径\" \talt=\"\">   // 这里没有放置图片  大家可以自己添加\n    \t   \t     \t  <img src=\"放置图片路径\" \talt=\"\">   // 这里没有放置图片  大家可以自己添加\n    \t   \t      \t  <img src=\"放置图片路径\"\t\talt=\"\">   // 这里没有放置图片  大家可以自己添加\n    \t   \t      \t  <img src=\"放置图片路径\" \talt=\"\">   // 这里没有放置图片  大家可以自己添加\n    \t   \t    \t  <img src=\"放置图片路径\" \talt=\"\">   // 这里没有放置图片  大家可以自己添加\n    \t  \t </div>\n   \t\t </div>\n\n\t</body>\n\t</html>\n\t\n这样一个轮播图就出来了   大家看完如果觉得不错  就收藏一下⭐️⭐️⭐️⭐️⭐️\n\n","slug":"纯CSS3实现轮播图","published":1,"updated":"2016-11-16T09:27:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civoyb9ni00079xsmckvympdb","content":"<h3 id=\"用css3实现一个简单的轮播图\"><a href=\"#用css3实现一个简单的轮播图\" class=\"headerlink\" title=\"用css3实现一个简单的轮播图\"></a>用css3实现一个简单的轮播图</h3><p>大家如果不用插件，如果js还学得不好，实现一个轮播图，那么就试试我这个cs3实现的轮播图把！哈哈哈</p>\n<h4 id=\"用css3实现一个简单的slider轮播图\"><a href=\"#用css3实现一个简单的slider轮播图\" class=\"headerlink\" title=\"用css3实现一个简单的slider轮播图\"></a>用css3实现一个简单的slider轮播图</h4><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;utf-8&quot;/&gt;\n    &lt;title&gt;&lt;/title&gt;\n    &lt;style type=&quot;text/css&quot;&gt;\n        .box{\n            width: 456px;\n            height: 256px;\n            margin: auto;\n            overflow: hidden;\n        }\n        .bigdiv{\n            width: 2400px;\n            animation:run 20s linear infinite;\n\n        }\n        img{\n            width: 19%;\n        }\n        @keyframes run{\n           0%{\n              margin-left: 0px;\n            }\n           5%{\n             margin-left: 0px;\n             }\n             20%{\n             margin-left: -456px;\n             }\n             25%{\n             margin-left: -456px;\n             }\n          40%{\n             margin-left: -912px;\n             }\n          45%{\n             margin-left: -912px;\n          }\n         60%{\n             margin-left: -1368px;\n         }\n         65%{\n             margin-left: -1368px;\n         }\n         80%{\n             margin-left: -1834px;\n         }\n         85%{\n             margin-left: -1834px;\n         }\n         100%{\n             margin-left: -2280px;-\n         }\n\n    }\n\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n        &lt;div class=&quot;box&quot;&gt;\n           &lt;div class=&quot;bigdiv&quot;&gt;\n                      &lt;img src=&quot;放置图片路径&quot;     alt=&quot;&quot;&gt;   // 这里没有放置图片  大家可以自己添加\n                      &lt;img src=&quot;放置图片路径&quot;     alt=&quot;&quot;&gt;   // 这里没有放置图片  大家可以自己添加\n                       &lt;img src=&quot;放置图片路径&quot;        alt=&quot;&quot;&gt;   // 这里没有放置图片  大家可以自己添加\n                       &lt;img src=&quot;放置图片路径&quot;     alt=&quot;&quot;&gt;   // 这里没有放置图片  大家可以自己添加\n                     &lt;img src=&quot;放置图片路径&quot;     alt=&quot;&quot;&gt;   // 这里没有放置图片  大家可以自己添加\n           &lt;/div&gt;\n        &lt;/div&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>这样一个轮播图就出来了   大家看完如果觉得不错  就收藏一下⭐️⭐️⭐️⭐️⭐️</p>\n","excerpt":"","more":"<h3 id=\"用css3实现一个简单的轮播图\"><a href=\"#用css3实现一个简单的轮播图\" class=\"headerlink\" title=\"用css3实现一个简单的轮播图\"></a>用css3实现一个简单的轮播图</h3><p>大家如果不用插件，如果js还学得不好，实现一个轮播图，那么就试试我这个cs3实现的轮播图把！哈哈哈</p>\n<h4 id=\"用css3实现一个简单的slider轮播图\"><a href=\"#用css3实现一个简单的slider轮播图\" class=\"headerlink\" title=\"用css3实现一个简单的slider轮播图\"></a>用css3实现一个简单的slider轮播图</h4><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;utf-8&quot;/&gt;\n    &lt;title&gt;&lt;/title&gt;\n    &lt;style type=&quot;text/css&quot;&gt;\n        .box{\n            width: 456px;\n            height: 256px;\n            margin: auto;\n            overflow: hidden;\n        }\n        .bigdiv{\n            width: 2400px;\n            animation:run 20s linear infinite;\n\n        }\n        img{\n            width: 19%;\n        }\n        @keyframes run{\n           0%{\n              margin-left: 0px;\n            }\n           5%{\n             margin-left: 0px;\n             }\n             20%{\n             margin-left: -456px;\n             }\n             25%{\n             margin-left: -456px;\n             }\n          40%{\n             margin-left: -912px;\n             }\n          45%{\n             margin-left: -912px;\n          }\n         60%{\n             margin-left: -1368px;\n         }\n         65%{\n             margin-left: -1368px;\n         }\n         80%{\n             margin-left: -1834px;\n         }\n         85%{\n             margin-left: -1834px;\n         }\n         100%{\n             margin-left: -2280px;-\n         }\n\n    }\n\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n        &lt;div class=&quot;box&quot;&gt;\n           &lt;div class=&quot;bigdiv&quot;&gt;\n                      &lt;img src=&quot;放置图片路径&quot;     alt=&quot;&quot;&gt;   // 这里没有放置图片  大家可以自己添加\n                      &lt;img src=&quot;放置图片路径&quot;     alt=&quot;&quot;&gt;   // 这里没有放置图片  大家可以自己添加\n                       &lt;img src=&quot;放置图片路径&quot;        alt=&quot;&quot;&gt;   // 这里没有放置图片  大家可以自己添加\n                       &lt;img src=&quot;放置图片路径&quot;     alt=&quot;&quot;&gt;   // 这里没有放置图片  大家可以自己添加\n                     &lt;img src=&quot;放置图片路径&quot;     alt=&quot;&quot;&gt;   // 这里没有放置图片  大家可以自己添加\n           &lt;/div&gt;\n        &lt;/div&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>这样一个轮播图就出来了   大家看完如果觉得不错  就收藏一下⭐️⭐️⭐️⭐️⭐️</p>\n"},{"title":"函数详解","date":"2016-08-10T11:54:21.000Z","_content":"\n# javaScript之函数详解\n\n本文档内容参考[<font style=\"color:blue\">《JavaScript闯关记》</font>](http://gold.xitu.io/post/582087522e958a0054f8ed36)之函数\n\n函数是一段代码，他只定义一次，但可以被执行或调用任意次。在 JavaScript 里，函数即对象，程序可以随意操控它们。比如，可以把函数赋值给变量，或者作为参数传递给其他函数，也可以给它们设置属性，甚至调用它们的方法。如果函数挂载在一个对象上，作为对象的一个属性，就称它为对象的方法。如果函数嵌套在其他函数中定义，这样它们就可以访问它们被定义时所处的作用域中的任何变量。\n\n\n#### 函数定义\n\n在 JavaScript 中，函数实际上是对象，每个函数都是Function构造函数的实例，因此函数名实际上也是一个指向函数对象的指针，不会与某个函数绑定。函数通常有以下3中定义方式。例如：\n \t\n\t// 写法一：函数声明（推荐写法）\n\n\tfunction   sum(num1, num2){\n\t\n\t\treturn   num1 + num2;\n\t\t\n\t}\n\n\t// 写法二：函数表达式（推荐写法）\n\t\n\tvar    sum =function(num1, num2){\n\t\n\t\treturn    num1 + num2;\n\t\t\n\t};\n\n\t// 写法三：Function 构造函数（不推荐写法）\n\n\tvar   sum =new   Function(\"num1\",\"num2\",\"return num1 + \tnum2\");\n\t\n由于函数名仅仅是指向函数的指针，因此函数名与包含对象指针的其他变量没有什么不同。换句话说，一个函数可能会有多个名字。例如：\n\n\tfunction   sum(num1, num2){\n\t\n\treturnnum1 + num2;\n\n\t}\n\n\tconsole.log(sum(10,10));   // 20\n\n\tvar   anotherSum = sum;\n\n\tconsole.log(anotherSum(10,10));   // 20\n\n\tsum = null;\n\n\tconsole.log(anotherSum(10,10));  // 20\n\n### 没有重载\n\n将函数名想象为指针，也有助于理解为什么 JavaScript 中没有函数重载的概念。\n\n\tfunction   addSomeNumber(num){\n\t\n\treturn   num +100;\n\n\t}\n\n\tfunction   addSomeNumber(num){\n\t\n\treturn   num +200;\n\n\t}\n\n\tvar   result = addSomeNumber(100);  // 300\n\n\n显然，这个例子中声明了两个同名函数，而结果则是后面的函数覆盖了前面的函数。以上代码实际上与下面的代码没有什么区别。\n\n\tvar   addSomeNumber = function(num){\n\t\n\t\treturn   num +100;\n\n\t};\n\n\taddSomeNumber = function(num){\n\t\n\t\treturn   num +200;\n\n\t};\n\n\tvar   result = addSomeNumber(100);   // 300\n\t\n\n通过重写代码之后可以很容易明白，在创建第二个函数时，实际上覆盖了引用第一个函数的变量addSomeNumber。\n\n函数声明与函数表达式（函数是js中的一等公民，JavaScript 引擎在渲染js时会把通过函数声明声明的函数放在js的顶部优先解析）\n\n解析器在向执行环境中加载数据时，对「函数声明」和「函数表达式」并非一视同仁。解析器会率先读取函数声明，并使其在执行任何代码之前可用（可以访问）；至于函数表达式，则必须等到解析器执行到它所在的代码行，才会真正被解释执行。例如：\n\n\tconsole.log(sum(10,10));   // 20\n\n\tfunction   sum(num1, num2){\n\n  \treturn   num1 + num2;\n\n\t}\n\n以上代码完全可以正常运行。因为在代码开始执行之前，解析器就已经通过一个名为函数声明提升（function declaration hoisting）的过程，读取并将函数声明添加到执行环境中。对代码求值时，JavaScript 引擎在第一遍会声明函数并将它们放到源代码树的顶部。所以，即使声明函数的代码在调用它的代码后面，JavaScript 引擎也能把函数声明提升到顶部。把上面的「函数声明」改为等价的「函数表达式」，就会在执行期间导致错误。例如：\n\n\tconsole.log(sum(10,10));   // Uncaught TypeError: sum \tis not a function\n\n\tvar   sum =function(num1, num2){\n\t\n\treturn   num1 + num2;\n\n\t};\n\n除了上述区别之外，「函数声明」与「函数表达式」的语法是等价的。\n\n### 作为值的函数\n\n因为 JavaScript 中的函数名本身就是变量，所以函数也可以作为值来使用。也就是说，不仅可以像传递参数一样把一个函数传递给另一个函数，而且可以将一个函数作为另一个函数的结果返回。来看一看下面的函数。\n\n\tfunction   callSomeFunction(someFunction,someArgument){\n\n  \treturn   someFunction(someArgument);\n\n\t}\n\t\n这个函数接受两个参数。第一个参数应该是一个函数，第二个参数应该是要传递给该函数的一个值。然后，就可以像下面的例子一样传递函数了。\n\n\n\tfunction   add10(num){ \t\t        \n\t\n\t\n\t\treturn   num +10;\n\n\t}\n\n\tvar   result1 = callSomeFunction(add10,10);\n\n\tconsole.log(result1);   // 20\n\n\tfunction   getGreeting(name){\n\t\n\t\treturn   \"Hello, \"+ name;\n\n\t}\n\n\tvar  result2 = callSomeFunction(getGreeting,\"Nicholas\");\n\n\tconsole.log(result2);   // \"Hello, Nicholas\"\n\n\t\n这里的callSomeFunction()函数是通用的，即无论第一个参数中传递进来的是什么函数，它都会返回执行第一个参数后的结果。要访问函数的指针而不执行函数的话，必须去掉函数名后面的那对圆括号。因此上面例子中传递给callSomeFunction()的是add10和getGreeting，而不是执行它们之后的结果。\n\n当然，还可以从一个函数中返回另一个函数，而且这也是极为有用的一种技术。例如，假设有一个对象数组，我们想要根据某个对象属性对数组进行排序。而传递给数组sort()方法的比较函数要接收两个参数，即要比较的值。可是，我们需要一种方式来指明按照哪个属性来排序。要解决这个问题，可以定义一个函数，它接收一个属性名，然后根据这个属性名来创建一个比较函数，下面就是这个函数的定义。\n\n\tfunction   createComparisonFunction(propertyName){\n\t\n\t\treturn   function(object1, object2){\n\t\t\n\t\t\t var   value1 = object1[propertyName];\n\t\t\t \n\t\t\t var   value2 = object2[propertyName];\n\t\t\t \n\t\t\t if(value1 < value2){\n\t\t\t \n\t\t\t \t\treturn -1;        \n\t\t\t \t\t\n\t\t\t \t}else  if(value1 > value2){\n\t\t\t \t\n\t\t\t \treturn 1;      \n\t\t\t \t\n\t\t\t \t}else{\n\t\t\t \t\n\t\t\t \t\treturn 0;        \n\t\t\t \t\t\n\t\t\t \t}    \n\t\t\t }\n\t\t  }\n\n这个函数定义看起来有点复杂，但实际上无非就是在一个函数中嵌套了另一个函数，而且内部函数前面加了一个return操作符。在内部函数接收到propertyName参数后，它会使用方括号表示法来取得给定属性的值。取得了想要的属性值之后，定义比较函数就非常简单了。上面这个函数可以像在下面例子中这样使用。\n\n\tvar   data = [{name:\"Zachary\",age:28}, {name:\"Nicholas\",age:29}];\n\n\tdata.sort(createComparisonFunction(\"name\"));\n\n\tconsole.log(data[0].name);   //Nicholas\n\n\tdata.sort(createComparisonFunction(\"age\"));\n\n\tconsole.log(data[0].name);   // Zachary\n\n这里，我们创建了一个包含两个对象的数组data。其中，每个对象都包含一个name属性和一个age属性。在默认情况下，sort()方法会调用每个对象的toString()方法以确定它们的次序；但得到的结果往往并不符合人类的思维习惯。因此，我们调用createComparisonFunction(\"name\")方法创建了一个比较函数，以便按照每个对象的name属性值进行排序。而结果排在前面的第一项是name为\"Nicholas\"，age是29的对象。然后，我们又使用了createComparisonFunction(\"age\")返回的比较函数，这次是按照对象的age属性排序。得到的结果是name值为\"Zachary\"，age值是28的对象排在了第一位。\n\n### 函数的形参和实参\n\n在函数内部，有两个特殊的对象：arguments和this。其中，arguments是一个类数组对象，包含着传入函数中的所有参数。虽然arguments的主要用途是保存函数参数，但这个对象还有一个名叫callee的属性，该属性是一个指针，指向拥有这个arguments对象的函数。请看下面这个非常经典的阶乘函数。\n\n\tfunction   factorial(num){\n\t\n\t\tif(num <=1) {\n\t\t\n\t\t\treturn 1;  \n\t\t\t\n\t\t}else{\n\t\t\n\t\t\treturn  num * factorial(num-1)    \n\t\t\t\n\t\t}\n\t\t\n\t}\n\n定义阶乘函数一般都要用到递归算法，如上面的代码所示，在函数有名字，而且名字以后也不会变的情况下，这样定义没有问题。但问题是这个函数的执行与函数名factorial紧紧耦合在了一起。为了消除这种紧密耦合的现象，可以像下面这样使用arguments.callee。\n\n\tfunction   factorial(num){\n\t\t\n\t\t\tif(num <=1) {\n\t\t\t\n\t\t\t\treturn  1;  \n\t\t\t\t\t\n\t\t\t}else{\n\t\t\t\n\t\t\t\treturn  num *arguments.callee(num-1)  \n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t}\n\n在这个重写后的factorial()函数的函数体内，没有再引用函数名factorial。这样，无论引用函数时使用的是什么名字，都可以保证正常完成递归调用。例如：\n\n\tvar   trueFactorial = factorial;\n\n\tfactorial =function(){\n\t\n\t\treturn  0;\n\t\t\n\t};\n\n\tconsole.log(trueFactorial(5));   // 120\n\n\tconsole.log(factorial(5));   // 0\n\n在此，变量trueFactorial获得了factorial的值，实际上是在另一个位置上保存了一个函数的指针。然后，我们又将一个简单地返回0的函数赋值给factorial变量。如果像原来的factorial()那样不使用arguments.callee，调用trueFactorial()就会返回0。可是，在解除了函数体内的代码与函数名的耦合状态之后，trueFactorial()仍然能够正常地计算阶乘；至于factorial()，它现在只是一个返回0的函数。\n\n函数内部的另一个特殊对象是this，其行为与 Java 和 C# 中的this大致类似。换句话说，this引用的是函数据以执行的环境对象（当在网页的全局作用域中调用函数时，this对象引用的就是window）。来看下面的例子。\n\n\twindow.color =\"red\";\n\n\tvar o = {color:\"blue\"};\n\n\tfunction sayColor(){\n\t\n\t\tconsole.log(this.color);\n\t\t\n\t}\n\n\tsayColor();   // \"red\"\n\n\to.sayColor = sayColor;\n\n\to.sayColor();   // \"blue\"\n\n上面这个函数sayColor()是在全局作用域中定义的，它引用了this对象。由于在调用函数之前，this的值并不确定，因此this可能会在代码执行过程中引用不同的对象。当在全局作用域中调用sayColor()时，this引用的是全局对象window；换句话说，对this.color求值会转换成对window.color求值，于是结果就返回了\"red\"。而当把这个函数赋给对象o并调用o.sayColor()时，this引用的是对象o，因此对this.color求值会转换成对o.color求值，结果就返回了\"blue\"。\n\n请大家一定要牢记，函数的名字仅仅是一个包含指针的变量而已。因此，即使是在不同的环境中执行，全局的sayColor()函数与o.sayColor()指向的仍然是同一个函数。\n\nECMAScript 5也规范化了另一个函数对象的属性caller。这个属性中保存着「调用当前函数的函数的引用」，如果是在全局作用域中调用当前函数，它的值为null。例如：\n\n\tfunction  outer(){  \n\n        inner();\n\n\t}\n\n\tfunction  inner(){\n\n      console.log(arguments.callee.caller);\n\n\t}\n\n\touter();\n\n以上代码会导致警告框中显示outer()函数的源代码。因为outer()调用了inter()，所以arguments.callee.caller就指向outer()。\n\n在严格模式下，访问arguments.callee属性，或为函数的caller属性赋值，都会导致错误。\n\n### 函数的属性和方法\n\nJavaScript 中的函数是对象，因此函数也有属性和方法。每个函数都包含两个属性：length和prototype。其中，length属性表示函数希望接收的命名参数的个数，如下面的例子所示。\n\n\tfunction   sayName(name){\n\t\n\t\tconsole.log(name);\n\n\t}\n\n\tfunction   sum(num1, num2){\n\t\n\t\treturn    num1 + num2;\n\n\t}\n\n\tfunction   sayHi(){\n\t\n\t\t console.log(\"hi\");\n\n\t}\n\n\tconsole.log(sayName.length);     // 1\n\n\tconsole.log(sum.length);   // 2\n\n\tconsole.log(sayHi.length);   // 0\n对于 JavaScript 中的引用类型而言，prototype是保存它们所有实例方法的真正所在。换句话说，诸如toString()和valueOf()等方法实际上都保存在prototype名下，只不过是通过各自对象的实例访问罢了。在创建自定义引用类型以及实现继承时，prototype属性的作用是极为重要的。在 ECMAScript 5中，prototype属性是不可枚举的，因此使用for-in无法发现。\n\n每个函数都包含两个非继承而来的方法：apply()和call()。这两个方法的用途都是在特定的作用域中调用函数，实际上等于设置函数体内this对象的值。首先，apply()方法接收两个参数：一个是在其中运行函数的作用域，另一个是参数数组。其中，第二个参数可以是Array的实例，也可以是arguments对象。例如：\n\n\tfunction   sum(num1, num2){\n\t\treturn   num1 + num2;\n\n\t}\n\n\tfunction    callSum1(num1, num2){\n\t\n\t\treturn   sum.apply(this,arguments);  // 传入 arguments 对象\n\n\t}\n\n\tfunction   callSum2(num1, num2){\n\t\treturn   sum.apply(this, [num1, num2]);   // 传入数组\n\n\t}\n\n\tconsole.log(callSum1(10,10));   // 20\n\n\tconsole.log(callSum2(10,10));   // 20\n在上面这个例子中，callSum1()在执行sum()函数时传入了this（因为是在全局作用域中调用的，所以传入的就是window对象）和arguments对象。而callSum2同样也调用了sum()函数，但它传入的则是this和一个参数数组。这两个函数都会正常执行并返回正确的结果。\n\ncall()方法与apply()方法的作用相同，它们的区别仅在于接收参数的方式不同。对于call()方法而言，第一个参数是this值没有变化，变化的是其余参数都直接传递给函数。换句话说，在使用call()方法时，传递给函数的参数必须逐个列举出来，如下面的例子所示。\n\n\tfunction   sum(num1, num2){\n\t\n\t\treturnnum1 + num2;\n\n\t}\n\n\tfunction   callSum(num1, num2){\n\t\n\t\treturnsum.call(this, num1, num2);\n\n\t}\n\n\tconsole.log(callSum(10,10));   // 20\n\n在使用call()方法的情况下，callSum()必须明确地传入每一个参数。结果与使用apply()没有什么不同。至于是使用apply()还是call()，完全取决于你采取哪种给函数传递参数的方式最方便。如果你打算直接传入arguments对象，或者包含函数中先接收到的也是一个数组，那么使用apply()肯定更方便；否则，选择call()可能更合适。（在不给函数传递参数的情况下，使用哪个方法都无所谓。）\n\n事实上，传递参数并非apply()和call()真正的用武之地；它们真正强大的地方是能够扩充函数赖以运行的作用域。下面来看一个例子。\n\n\twindow.color =\"red\";\n\n\tvar o = {color:\"blue\"};\n\n\tfunction   sayColor(){\n\t\n\t\tconsole.log(this.color);\n\n\t}\n\n\tsayColor();   // red\n\n\tsayColor.call(this);   // red\n\n\tsayColor.call(window);   // red\n\n\tsayColor.call(o);   // blue\n\n这个例子是在前面说明this对象的示例基础上修改而成的。这一次，sayColor()也是作为全局函数定义的，而且当在全局作用域中调用它时，它确实会显示\"red\"，因为对this.color的求值会转换成对window.color的求值。而sayColor.call(this)和sayColor.call(window)，则是两种显式地在全局作用域中调用函数的方式，结果当然都会显示\"red\"。但是，当运行sayColor.call(o)时，函数的执行环境就不一样了，因为此时函数体内的this对象指向了o，于是结果显示的是\"blue\"。\n\n使用call()或apply()来扩充作用域的最大好处，就是对象不需要与方法有任何耦合关系。在前面例子的第一个版本中，我们是先将sayColor()函数放到了对象o中，然后再通过o来调用它的；而在这里重写的例子中，就不需要先前那个多余的步骤了。\n\n2、全局安装gulp\n        2.1、说明：全局安装gulp目的是为了通过她执行gulp任务；\n\n        2.2、安装：命令提示符执行npm install gulp -g；\n\n        2.3、查看是否正确安装：命令提示符执行gulp -v，出现版本号即为正确安装。\n\n3、新建package.json文件\n       3.1、说明：package.json是基于nodejs项目必不可少的配置文件，它是存放在项目根目录的普通json文件；\n\n       3.2、执行命令提示符执行npm init进行手动安装\n\n      3.3、安装完成后会在当前文件夹下看到如下package.json文件\n\n\n\n文/原创／Dimple（github作者）\n原文链接：https://cuidapao.github.io/\n著作权归作者所有，转载请联系作者获得授权，并标注\"github作者\"。\n\n\n","source":"_posts/函数详解.md","raw":"---\ntitle: 函数详解\ndate: 2016-8-10 19:54:21\ntags: [javascript,函数详解]\n---\n\n# javaScript之函数详解\n\n本文档内容参考[<font style=\"color:blue\">《JavaScript闯关记》</font>](http://gold.xitu.io/post/582087522e958a0054f8ed36)之函数\n\n函数是一段代码，他只定义一次，但可以被执行或调用任意次。在 JavaScript 里，函数即对象，程序可以随意操控它们。比如，可以把函数赋值给变量，或者作为参数传递给其他函数，也可以给它们设置属性，甚至调用它们的方法。如果函数挂载在一个对象上，作为对象的一个属性，就称它为对象的方法。如果函数嵌套在其他函数中定义，这样它们就可以访问它们被定义时所处的作用域中的任何变量。\n\n\n#### 函数定义\n\n在 JavaScript 中，函数实际上是对象，每个函数都是Function构造函数的实例，因此函数名实际上也是一个指向函数对象的指针，不会与某个函数绑定。函数通常有以下3中定义方式。例如：\n \t\n\t// 写法一：函数声明（推荐写法）\n\n\tfunction   sum(num1, num2){\n\t\n\t\treturn   num1 + num2;\n\t\t\n\t}\n\n\t// 写法二：函数表达式（推荐写法）\n\t\n\tvar    sum =function(num1, num2){\n\t\n\t\treturn    num1 + num2;\n\t\t\n\t};\n\n\t// 写法三：Function 构造函数（不推荐写法）\n\n\tvar   sum =new   Function(\"num1\",\"num2\",\"return num1 + \tnum2\");\n\t\n由于函数名仅仅是指向函数的指针，因此函数名与包含对象指针的其他变量没有什么不同。换句话说，一个函数可能会有多个名字。例如：\n\n\tfunction   sum(num1, num2){\n\t\n\treturnnum1 + num2;\n\n\t}\n\n\tconsole.log(sum(10,10));   // 20\n\n\tvar   anotherSum = sum;\n\n\tconsole.log(anotherSum(10,10));   // 20\n\n\tsum = null;\n\n\tconsole.log(anotherSum(10,10));  // 20\n\n### 没有重载\n\n将函数名想象为指针，也有助于理解为什么 JavaScript 中没有函数重载的概念。\n\n\tfunction   addSomeNumber(num){\n\t\n\treturn   num +100;\n\n\t}\n\n\tfunction   addSomeNumber(num){\n\t\n\treturn   num +200;\n\n\t}\n\n\tvar   result = addSomeNumber(100);  // 300\n\n\n显然，这个例子中声明了两个同名函数，而结果则是后面的函数覆盖了前面的函数。以上代码实际上与下面的代码没有什么区别。\n\n\tvar   addSomeNumber = function(num){\n\t\n\t\treturn   num +100;\n\n\t};\n\n\taddSomeNumber = function(num){\n\t\n\t\treturn   num +200;\n\n\t};\n\n\tvar   result = addSomeNumber(100);   // 300\n\t\n\n通过重写代码之后可以很容易明白，在创建第二个函数时，实际上覆盖了引用第一个函数的变量addSomeNumber。\n\n函数声明与函数表达式（函数是js中的一等公民，JavaScript 引擎在渲染js时会把通过函数声明声明的函数放在js的顶部优先解析）\n\n解析器在向执行环境中加载数据时，对「函数声明」和「函数表达式」并非一视同仁。解析器会率先读取函数声明，并使其在执行任何代码之前可用（可以访问）；至于函数表达式，则必须等到解析器执行到它所在的代码行，才会真正被解释执行。例如：\n\n\tconsole.log(sum(10,10));   // 20\n\n\tfunction   sum(num1, num2){\n\n  \treturn   num1 + num2;\n\n\t}\n\n以上代码完全可以正常运行。因为在代码开始执行之前，解析器就已经通过一个名为函数声明提升（function declaration hoisting）的过程，读取并将函数声明添加到执行环境中。对代码求值时，JavaScript 引擎在第一遍会声明函数并将它们放到源代码树的顶部。所以，即使声明函数的代码在调用它的代码后面，JavaScript 引擎也能把函数声明提升到顶部。把上面的「函数声明」改为等价的「函数表达式」，就会在执行期间导致错误。例如：\n\n\tconsole.log(sum(10,10));   // Uncaught TypeError: sum \tis not a function\n\n\tvar   sum =function(num1, num2){\n\t\n\treturn   num1 + num2;\n\n\t};\n\n除了上述区别之外，「函数声明」与「函数表达式」的语法是等价的。\n\n### 作为值的函数\n\n因为 JavaScript 中的函数名本身就是变量，所以函数也可以作为值来使用。也就是说，不仅可以像传递参数一样把一个函数传递给另一个函数，而且可以将一个函数作为另一个函数的结果返回。来看一看下面的函数。\n\n\tfunction   callSomeFunction(someFunction,someArgument){\n\n  \treturn   someFunction(someArgument);\n\n\t}\n\t\n这个函数接受两个参数。第一个参数应该是一个函数，第二个参数应该是要传递给该函数的一个值。然后，就可以像下面的例子一样传递函数了。\n\n\n\tfunction   add10(num){ \t\t        \n\t\n\t\n\t\treturn   num +10;\n\n\t}\n\n\tvar   result1 = callSomeFunction(add10,10);\n\n\tconsole.log(result1);   // 20\n\n\tfunction   getGreeting(name){\n\t\n\t\treturn   \"Hello, \"+ name;\n\n\t}\n\n\tvar  result2 = callSomeFunction(getGreeting,\"Nicholas\");\n\n\tconsole.log(result2);   // \"Hello, Nicholas\"\n\n\t\n这里的callSomeFunction()函数是通用的，即无论第一个参数中传递进来的是什么函数，它都会返回执行第一个参数后的结果。要访问函数的指针而不执行函数的话，必须去掉函数名后面的那对圆括号。因此上面例子中传递给callSomeFunction()的是add10和getGreeting，而不是执行它们之后的结果。\n\n当然，还可以从一个函数中返回另一个函数，而且这也是极为有用的一种技术。例如，假设有一个对象数组，我们想要根据某个对象属性对数组进行排序。而传递给数组sort()方法的比较函数要接收两个参数，即要比较的值。可是，我们需要一种方式来指明按照哪个属性来排序。要解决这个问题，可以定义一个函数，它接收一个属性名，然后根据这个属性名来创建一个比较函数，下面就是这个函数的定义。\n\n\tfunction   createComparisonFunction(propertyName){\n\t\n\t\treturn   function(object1, object2){\n\t\t\n\t\t\t var   value1 = object1[propertyName];\n\t\t\t \n\t\t\t var   value2 = object2[propertyName];\n\t\t\t \n\t\t\t if(value1 < value2){\n\t\t\t \n\t\t\t \t\treturn -1;        \n\t\t\t \t\t\n\t\t\t \t}else  if(value1 > value2){\n\t\t\t \t\n\t\t\t \treturn 1;      \n\t\t\t \t\n\t\t\t \t}else{\n\t\t\t \t\n\t\t\t \t\treturn 0;        \n\t\t\t \t\t\n\t\t\t \t}    \n\t\t\t }\n\t\t  }\n\n这个函数定义看起来有点复杂，但实际上无非就是在一个函数中嵌套了另一个函数，而且内部函数前面加了一个return操作符。在内部函数接收到propertyName参数后，它会使用方括号表示法来取得给定属性的值。取得了想要的属性值之后，定义比较函数就非常简单了。上面这个函数可以像在下面例子中这样使用。\n\n\tvar   data = [{name:\"Zachary\",age:28}, {name:\"Nicholas\",age:29}];\n\n\tdata.sort(createComparisonFunction(\"name\"));\n\n\tconsole.log(data[0].name);   //Nicholas\n\n\tdata.sort(createComparisonFunction(\"age\"));\n\n\tconsole.log(data[0].name);   // Zachary\n\n这里，我们创建了一个包含两个对象的数组data。其中，每个对象都包含一个name属性和一个age属性。在默认情况下，sort()方法会调用每个对象的toString()方法以确定它们的次序；但得到的结果往往并不符合人类的思维习惯。因此，我们调用createComparisonFunction(\"name\")方法创建了一个比较函数，以便按照每个对象的name属性值进行排序。而结果排在前面的第一项是name为\"Nicholas\"，age是29的对象。然后，我们又使用了createComparisonFunction(\"age\")返回的比较函数，这次是按照对象的age属性排序。得到的结果是name值为\"Zachary\"，age值是28的对象排在了第一位。\n\n### 函数的形参和实参\n\n在函数内部，有两个特殊的对象：arguments和this。其中，arguments是一个类数组对象，包含着传入函数中的所有参数。虽然arguments的主要用途是保存函数参数，但这个对象还有一个名叫callee的属性，该属性是一个指针，指向拥有这个arguments对象的函数。请看下面这个非常经典的阶乘函数。\n\n\tfunction   factorial(num){\n\t\n\t\tif(num <=1) {\n\t\t\n\t\t\treturn 1;  \n\t\t\t\n\t\t}else{\n\t\t\n\t\t\treturn  num * factorial(num-1)    \n\t\t\t\n\t\t}\n\t\t\n\t}\n\n定义阶乘函数一般都要用到递归算法，如上面的代码所示，在函数有名字，而且名字以后也不会变的情况下，这样定义没有问题。但问题是这个函数的执行与函数名factorial紧紧耦合在了一起。为了消除这种紧密耦合的现象，可以像下面这样使用arguments.callee。\n\n\tfunction   factorial(num){\n\t\t\n\t\t\tif(num <=1) {\n\t\t\t\n\t\t\t\treturn  1;  \n\t\t\t\t\t\n\t\t\t}else{\n\t\t\t\n\t\t\t\treturn  num *arguments.callee(num-1)  \n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t}\n\n在这个重写后的factorial()函数的函数体内，没有再引用函数名factorial。这样，无论引用函数时使用的是什么名字，都可以保证正常完成递归调用。例如：\n\n\tvar   trueFactorial = factorial;\n\n\tfactorial =function(){\n\t\n\t\treturn  0;\n\t\t\n\t};\n\n\tconsole.log(trueFactorial(5));   // 120\n\n\tconsole.log(factorial(5));   // 0\n\n在此，变量trueFactorial获得了factorial的值，实际上是在另一个位置上保存了一个函数的指针。然后，我们又将一个简单地返回0的函数赋值给factorial变量。如果像原来的factorial()那样不使用arguments.callee，调用trueFactorial()就会返回0。可是，在解除了函数体内的代码与函数名的耦合状态之后，trueFactorial()仍然能够正常地计算阶乘；至于factorial()，它现在只是一个返回0的函数。\n\n函数内部的另一个特殊对象是this，其行为与 Java 和 C# 中的this大致类似。换句话说，this引用的是函数据以执行的环境对象（当在网页的全局作用域中调用函数时，this对象引用的就是window）。来看下面的例子。\n\n\twindow.color =\"red\";\n\n\tvar o = {color:\"blue\"};\n\n\tfunction sayColor(){\n\t\n\t\tconsole.log(this.color);\n\t\t\n\t}\n\n\tsayColor();   // \"red\"\n\n\to.sayColor = sayColor;\n\n\to.sayColor();   // \"blue\"\n\n上面这个函数sayColor()是在全局作用域中定义的，它引用了this对象。由于在调用函数之前，this的值并不确定，因此this可能会在代码执行过程中引用不同的对象。当在全局作用域中调用sayColor()时，this引用的是全局对象window；换句话说，对this.color求值会转换成对window.color求值，于是结果就返回了\"red\"。而当把这个函数赋给对象o并调用o.sayColor()时，this引用的是对象o，因此对this.color求值会转换成对o.color求值，结果就返回了\"blue\"。\n\n请大家一定要牢记，函数的名字仅仅是一个包含指针的变量而已。因此，即使是在不同的环境中执行，全局的sayColor()函数与o.sayColor()指向的仍然是同一个函数。\n\nECMAScript 5也规范化了另一个函数对象的属性caller。这个属性中保存着「调用当前函数的函数的引用」，如果是在全局作用域中调用当前函数，它的值为null。例如：\n\n\tfunction  outer(){  \n\n        inner();\n\n\t}\n\n\tfunction  inner(){\n\n      console.log(arguments.callee.caller);\n\n\t}\n\n\touter();\n\n以上代码会导致警告框中显示outer()函数的源代码。因为outer()调用了inter()，所以arguments.callee.caller就指向outer()。\n\n在严格模式下，访问arguments.callee属性，或为函数的caller属性赋值，都会导致错误。\n\n### 函数的属性和方法\n\nJavaScript 中的函数是对象，因此函数也有属性和方法。每个函数都包含两个属性：length和prototype。其中，length属性表示函数希望接收的命名参数的个数，如下面的例子所示。\n\n\tfunction   sayName(name){\n\t\n\t\tconsole.log(name);\n\n\t}\n\n\tfunction   sum(num1, num2){\n\t\n\t\treturn    num1 + num2;\n\n\t}\n\n\tfunction   sayHi(){\n\t\n\t\t console.log(\"hi\");\n\n\t}\n\n\tconsole.log(sayName.length);     // 1\n\n\tconsole.log(sum.length);   // 2\n\n\tconsole.log(sayHi.length);   // 0\n对于 JavaScript 中的引用类型而言，prototype是保存它们所有实例方法的真正所在。换句话说，诸如toString()和valueOf()等方法实际上都保存在prototype名下，只不过是通过各自对象的实例访问罢了。在创建自定义引用类型以及实现继承时，prototype属性的作用是极为重要的。在 ECMAScript 5中，prototype属性是不可枚举的，因此使用for-in无法发现。\n\n每个函数都包含两个非继承而来的方法：apply()和call()。这两个方法的用途都是在特定的作用域中调用函数，实际上等于设置函数体内this对象的值。首先，apply()方法接收两个参数：一个是在其中运行函数的作用域，另一个是参数数组。其中，第二个参数可以是Array的实例，也可以是arguments对象。例如：\n\n\tfunction   sum(num1, num2){\n\t\treturn   num1 + num2;\n\n\t}\n\n\tfunction    callSum1(num1, num2){\n\t\n\t\treturn   sum.apply(this,arguments);  // 传入 arguments 对象\n\n\t}\n\n\tfunction   callSum2(num1, num2){\n\t\treturn   sum.apply(this, [num1, num2]);   // 传入数组\n\n\t}\n\n\tconsole.log(callSum1(10,10));   // 20\n\n\tconsole.log(callSum2(10,10));   // 20\n在上面这个例子中，callSum1()在执行sum()函数时传入了this（因为是在全局作用域中调用的，所以传入的就是window对象）和arguments对象。而callSum2同样也调用了sum()函数，但它传入的则是this和一个参数数组。这两个函数都会正常执行并返回正确的结果。\n\ncall()方法与apply()方法的作用相同，它们的区别仅在于接收参数的方式不同。对于call()方法而言，第一个参数是this值没有变化，变化的是其余参数都直接传递给函数。换句话说，在使用call()方法时，传递给函数的参数必须逐个列举出来，如下面的例子所示。\n\n\tfunction   sum(num1, num2){\n\t\n\t\treturnnum1 + num2;\n\n\t}\n\n\tfunction   callSum(num1, num2){\n\t\n\t\treturnsum.call(this, num1, num2);\n\n\t}\n\n\tconsole.log(callSum(10,10));   // 20\n\n在使用call()方法的情况下，callSum()必须明确地传入每一个参数。结果与使用apply()没有什么不同。至于是使用apply()还是call()，完全取决于你采取哪种给函数传递参数的方式最方便。如果你打算直接传入arguments对象，或者包含函数中先接收到的也是一个数组，那么使用apply()肯定更方便；否则，选择call()可能更合适。（在不给函数传递参数的情况下，使用哪个方法都无所谓。）\n\n事实上，传递参数并非apply()和call()真正的用武之地；它们真正强大的地方是能够扩充函数赖以运行的作用域。下面来看一个例子。\n\n\twindow.color =\"red\";\n\n\tvar o = {color:\"blue\"};\n\n\tfunction   sayColor(){\n\t\n\t\tconsole.log(this.color);\n\n\t}\n\n\tsayColor();   // red\n\n\tsayColor.call(this);   // red\n\n\tsayColor.call(window);   // red\n\n\tsayColor.call(o);   // blue\n\n这个例子是在前面说明this对象的示例基础上修改而成的。这一次，sayColor()也是作为全局函数定义的，而且当在全局作用域中调用它时，它确实会显示\"red\"，因为对this.color的求值会转换成对window.color的求值。而sayColor.call(this)和sayColor.call(window)，则是两种显式地在全局作用域中调用函数的方式，结果当然都会显示\"red\"。但是，当运行sayColor.call(o)时，函数的执行环境就不一样了，因为此时函数体内的this对象指向了o，于是结果显示的是\"blue\"。\n\n使用call()或apply()来扩充作用域的最大好处，就是对象不需要与方法有任何耦合关系。在前面例子的第一个版本中，我们是先将sayColor()函数放到了对象o中，然后再通过o来调用它的；而在这里重写的例子中，就不需要先前那个多余的步骤了。\n\n2、全局安装gulp\n        2.1、说明：全局安装gulp目的是为了通过她执行gulp任务；\n\n        2.2、安装：命令提示符执行npm install gulp -g；\n\n        2.3、查看是否正确安装：命令提示符执行gulp -v，出现版本号即为正确安装。\n\n3、新建package.json文件\n       3.1、说明：package.json是基于nodejs项目必不可少的配置文件，它是存放在项目根目录的普通json文件；\n\n       3.2、执行命令提示符执行npm init进行手动安装\n\n      3.3、安装完成后会在当前文件夹下看到如下package.json文件\n\n\n\n文/原创／Dimple（github作者）\n原文链接：https://cuidapao.github.io/\n著作权归作者所有，转载请联系作者获得授权，并标注\"github作者\"。\n\n\n","slug":"函数详解","published":1,"updated":"2016-11-16T13:01:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civoyb9ot000s9xsmxpe8rmes","content":"<h1 id=\"javaScript之函数详解\"><a href=\"#javaScript之函数详解\" class=\"headerlink\" title=\"javaScript之函数详解\"></a>javaScript之函数详解</h1><p>本文档内容参考<a href=\"http://gold.xitu.io/post/582087522e958a0054f8ed36\" target=\"_blank\" rel=\"external\"><font style=\"color:blue\">《JavaScript闯关记》</font></a>之函数</p>\n<p>函数是一段代码，他只定义一次，但可以被执行或调用任意次。在 JavaScript 里，函数即对象，程序可以随意操控它们。比如，可以把函数赋值给变量，或者作为参数传递给其他函数，也可以给它们设置属性，甚至调用它们的方法。如果函数挂载在一个对象上，作为对象的一个属性，就称它为对象的方法。如果函数嵌套在其他函数中定义，这样它们就可以访问它们被定义时所处的作用域中的任何变量。</p>\n<h4 id=\"函数定义\"><a href=\"#函数定义\" class=\"headerlink\" title=\"函数定义\"></a>函数定义</h4><p>在 JavaScript 中，函数实际上是对象，每个函数都是Function构造函数的实例，因此函数名实际上也是一个指向函数对象的指针，不会与某个函数绑定。函数通常有以下3中定义方式。例如：</p>\n<pre><code>// 写法一：函数声明（推荐写法）\n\nfunction   sum(num1, num2){\n\n    return   num1 + num2;\n\n}\n\n// 写法二：函数表达式（推荐写法）\n\nvar    sum =function(num1, num2){\n\n    return    num1 + num2;\n\n};\n\n// 写法三：Function 构造函数（不推荐写法）\n\nvar   sum =new   Function(&quot;num1&quot;,&quot;num2&quot;,&quot;return num1 +     num2&quot;);\n</code></pre><p>由于函数名仅仅是指向函数的指针，因此函数名与包含对象指针的其他变量没有什么不同。换句话说，一个函数可能会有多个名字。例如：</p>\n<pre><code>function   sum(num1, num2){\n\nreturnnum1 + num2;\n\n}\n\nconsole.log(sum(10,10));   // 20\n\nvar   anotherSum = sum;\n\nconsole.log(anotherSum(10,10));   // 20\n\nsum = null;\n\nconsole.log(anotherSum(10,10));  // 20\n</code></pre><h3 id=\"没有重载\"><a href=\"#没有重载\" class=\"headerlink\" title=\"没有重载\"></a>没有重载</h3><p>将函数名想象为指针，也有助于理解为什么 JavaScript 中没有函数重载的概念。</p>\n<pre><code>function   addSomeNumber(num){\n\nreturn   num +100;\n\n}\n\nfunction   addSomeNumber(num){\n\nreturn   num +200;\n\n}\n\nvar   result = addSomeNumber(100);  // 300\n</code></pre><p>显然，这个例子中声明了两个同名函数，而结果则是后面的函数覆盖了前面的函数。以上代码实际上与下面的代码没有什么区别。</p>\n<pre><code>var   addSomeNumber = function(num){\n\n    return   num +100;\n\n};\n\naddSomeNumber = function(num){\n\n    return   num +200;\n\n};\n\nvar   result = addSomeNumber(100);   // 300\n</code></pre><p>通过重写代码之后可以很容易明白，在创建第二个函数时，实际上覆盖了引用第一个函数的变量addSomeNumber。</p>\n<p>函数声明与函数表达式（函数是js中的一等公民，JavaScript 引擎在渲染js时会把通过函数声明声明的函数放在js的顶部优先解析）</p>\n<p>解析器在向执行环境中加载数据时，对「函数声明」和「函数表达式」并非一视同仁。解析器会率先读取函数声明，并使其在执行任何代码之前可用（可以访问）；至于函数表达式，则必须等到解析器执行到它所在的代码行，才会真正被解释执行。例如：</p>\n<pre><code>console.log(sum(10,10));   // 20\n\nfunction   sum(num1, num2){\n\n  return   num1 + num2;\n\n}\n</code></pre><p>以上代码完全可以正常运行。因为在代码开始执行之前，解析器就已经通过一个名为函数声明提升（function declaration hoisting）的过程，读取并将函数声明添加到执行环境中。对代码求值时，JavaScript 引擎在第一遍会声明函数并将它们放到源代码树的顶部。所以，即使声明函数的代码在调用它的代码后面，JavaScript 引擎也能把函数声明提升到顶部。把上面的「函数声明」改为等价的「函数表达式」，就会在执行期间导致错误。例如：</p>\n<pre><code>console.log(sum(10,10));   // Uncaught TypeError: sum     is not a function\n\nvar   sum =function(num1, num2){\n\nreturn   num1 + num2;\n\n};\n</code></pre><p>除了上述区别之外，「函数声明」与「函数表达式」的语法是等价的。</p>\n<h3 id=\"作为值的函数\"><a href=\"#作为值的函数\" class=\"headerlink\" title=\"作为值的函数\"></a>作为值的函数</h3><p>因为 JavaScript 中的函数名本身就是变量，所以函数也可以作为值来使用。也就是说，不仅可以像传递参数一样把一个函数传递给另一个函数，而且可以将一个函数作为另一个函数的结果返回。来看一看下面的函数。</p>\n<pre><code>function   callSomeFunction(someFunction,someArgument){\n\n  return   someFunction(someArgument);\n\n}\n</code></pre><p>这个函数接受两个参数。第一个参数应该是一个函数，第二个参数应该是要传递给该函数的一个值。然后，就可以像下面的例子一样传递函数了。</p>\n<pre><code>function   add10(num){                 \n\n\n    return   num +10;\n\n}\n\nvar   result1 = callSomeFunction(add10,10);\n\nconsole.log(result1);   // 20\n\nfunction   getGreeting(name){\n\n    return   &quot;Hello, &quot;+ name;\n\n}\n\nvar  result2 = callSomeFunction(getGreeting,&quot;Nicholas&quot;);\n\nconsole.log(result2);   // &quot;Hello, Nicholas&quot;\n</code></pre><p>这里的callSomeFunction()函数是通用的，即无论第一个参数中传递进来的是什么函数，它都会返回执行第一个参数后的结果。要访问函数的指针而不执行函数的话，必须去掉函数名后面的那对圆括号。因此上面例子中传递给callSomeFunction()的是add10和getGreeting，而不是执行它们之后的结果。</p>\n<p>当然，还可以从一个函数中返回另一个函数，而且这也是极为有用的一种技术。例如，假设有一个对象数组，我们想要根据某个对象属性对数组进行排序。而传递给数组sort()方法的比较函数要接收两个参数，即要比较的值。可是，我们需要一种方式来指明按照哪个属性来排序。要解决这个问题，可以定义一个函数，它接收一个属性名，然后根据这个属性名来创建一个比较函数，下面就是这个函数的定义。</p>\n<pre><code>function   createComparisonFunction(propertyName){\n\n    return   function(object1, object2){\n\n         var   value1 = object1[propertyName];\n\n         var   value2 = object2[propertyName];\n\n         if(value1 &lt; value2){\n\n                 return -1;        \n\n             }else  if(value1 &gt; value2){\n\n             return 1;      \n\n             }else{\n\n                 return 0;        \n\n             }    \n         }\n      }\n</code></pre><p>这个函数定义看起来有点复杂，但实际上无非就是在一个函数中嵌套了另一个函数，而且内部函数前面加了一个return操作符。在内部函数接收到propertyName参数后，它会使用方括号表示法来取得给定属性的值。取得了想要的属性值之后，定义比较函数就非常简单了。上面这个函数可以像在下面例子中这样使用。</p>\n<pre><code>var   data = [{name:&quot;Zachary&quot;,age:28}, {name:&quot;Nicholas&quot;,age:29}];\n\ndata.sort(createComparisonFunction(&quot;name&quot;));\n\nconsole.log(data[0].name);   //Nicholas\n\ndata.sort(createComparisonFunction(&quot;age&quot;));\n\nconsole.log(data[0].name);   // Zachary\n</code></pre><p>这里，我们创建了一个包含两个对象的数组data。其中，每个对象都包含一个name属性和一个age属性。在默认情况下，sort()方法会调用每个对象的toString()方法以确定它们的次序；但得到的结果往往并不符合人类的思维习惯。因此，我们调用createComparisonFunction(“name”)方法创建了一个比较函数，以便按照每个对象的name属性值进行排序。而结果排在前面的第一项是name为”Nicholas”，age是29的对象。然后，我们又使用了createComparisonFunction(“age”)返回的比较函数，这次是按照对象的age属性排序。得到的结果是name值为”Zachary”，age值是28的对象排在了第一位。</p>\n<h3 id=\"函数的形参和实参\"><a href=\"#函数的形参和实参\" class=\"headerlink\" title=\"函数的形参和实参\"></a>函数的形参和实参</h3><p>在函数内部，有两个特殊的对象：arguments和this。其中，arguments是一个类数组对象，包含着传入函数中的所有参数。虽然arguments的主要用途是保存函数参数，但这个对象还有一个名叫callee的属性，该属性是一个指针，指向拥有这个arguments对象的函数。请看下面这个非常经典的阶乘函数。</p>\n<pre><code>function   factorial(num){\n\n    if(num &lt;=1) {\n\n        return 1;  \n\n    }else{\n\n        return  num * factorial(num-1)    \n\n    }\n\n}\n</code></pre><p>定义阶乘函数一般都要用到递归算法，如上面的代码所示，在函数有名字，而且名字以后也不会变的情况下，这样定义没有问题。但问题是这个函数的执行与函数名factorial紧紧耦合在了一起。为了消除这种紧密耦合的现象，可以像下面这样使用arguments.callee。</p>\n<pre><code>function   factorial(num){\n\n        if(num &lt;=1) {\n\n            return  1;  \n\n        }else{\n\n            return  num *arguments.callee(num-1)  \n\n        }\n\n}\n</code></pre><p>在这个重写后的factorial()函数的函数体内，没有再引用函数名factorial。这样，无论引用函数时使用的是什么名字，都可以保证正常完成递归调用。例如：</p>\n<pre><code>var   trueFactorial = factorial;\n\nfactorial =function(){\n\n    return  0;\n\n};\n\nconsole.log(trueFactorial(5));   // 120\n\nconsole.log(factorial(5));   // 0\n</code></pre><p>在此，变量trueFactorial获得了factorial的值，实际上是在另一个位置上保存了一个函数的指针。然后，我们又将一个简单地返回0的函数赋值给factorial变量。如果像原来的factorial()那样不使用arguments.callee，调用trueFactorial()就会返回0。可是，在解除了函数体内的代码与函数名的耦合状态之后，trueFactorial()仍然能够正常地计算阶乘；至于factorial()，它现在只是一个返回0的函数。</p>\n<p>函数内部的另一个特殊对象是this，其行为与 Java 和 C# 中的this大致类似。换句话说，this引用的是函数据以执行的环境对象（当在网页的全局作用域中调用函数时，this对象引用的就是window）。来看下面的例子。</p>\n<pre><code>window.color =&quot;red&quot;;\n\nvar o = {color:&quot;blue&quot;};\n\nfunction sayColor(){\n\n    console.log(this.color);\n\n}\n\nsayColor();   // &quot;red&quot;\n\no.sayColor = sayColor;\n\no.sayColor();   // &quot;blue&quot;\n</code></pre><p>上面这个函数sayColor()是在全局作用域中定义的，它引用了this对象。由于在调用函数之前，this的值并不确定，因此this可能会在代码执行过程中引用不同的对象。当在全局作用域中调用sayColor()时，this引用的是全局对象window；换句话说，对this.color求值会转换成对window.color求值，于是结果就返回了”red”。而当把这个函数赋给对象o并调用o.sayColor()时，this引用的是对象o，因此对this.color求值会转换成对o.color求值，结果就返回了”blue”。</p>\n<p>请大家一定要牢记，函数的名字仅仅是一个包含指针的变量而已。因此，即使是在不同的环境中执行，全局的sayColor()函数与o.sayColor()指向的仍然是同一个函数。</p>\n<p>ECMAScript 5也规范化了另一个函数对象的属性caller。这个属性中保存着「调用当前函数的函数的引用」，如果是在全局作用域中调用当前函数，它的值为null。例如：</p>\n<pre><code>function  outer(){  \n\n    inner();\n\n}\n\nfunction  inner(){\n\n  console.log(arguments.callee.caller);\n\n}\n\nouter();\n</code></pre><p>以上代码会导致警告框中显示outer()函数的源代码。因为outer()调用了inter()，所以arguments.callee.caller就指向outer()。</p>\n<p>在严格模式下，访问arguments.callee属性，或为函数的caller属性赋值，都会导致错误。</p>\n<h3 id=\"函数的属性和方法\"><a href=\"#函数的属性和方法\" class=\"headerlink\" title=\"函数的属性和方法\"></a>函数的属性和方法</h3><p>JavaScript 中的函数是对象，因此函数也有属性和方法。每个函数都包含两个属性：length和prototype。其中，length属性表示函数希望接收的命名参数的个数，如下面的例子所示。</p>\n<pre><code>function   sayName(name){\n\n    console.log(name);\n\n}\n\nfunction   sum(num1, num2){\n\n    return    num1 + num2;\n\n}\n\nfunction   sayHi(){\n\n     console.log(&quot;hi&quot;);\n\n}\n\nconsole.log(sayName.length);     // 1\n\nconsole.log(sum.length);   // 2\n\nconsole.log(sayHi.length);   // 0\n</code></pre><p>对于 JavaScript 中的引用类型而言，prototype是保存它们所有实例方法的真正所在。换句话说，诸如toString()和valueOf()等方法实际上都保存在prototype名下，只不过是通过各自对象的实例访问罢了。在创建自定义引用类型以及实现继承时，prototype属性的作用是极为重要的。在 ECMAScript 5中，prototype属性是不可枚举的，因此使用for-in无法发现。</p>\n<p>每个函数都包含两个非继承而来的方法：apply()和call()。这两个方法的用途都是在特定的作用域中调用函数，实际上等于设置函数体内this对象的值。首先，apply()方法接收两个参数：一个是在其中运行函数的作用域，另一个是参数数组。其中，第二个参数可以是Array的实例，也可以是arguments对象。例如：</p>\n<pre><code>function   sum(num1, num2){\n    return   num1 + num2;\n\n}\n\nfunction    callSum1(num1, num2){\n\n    return   sum.apply(this,arguments);  // 传入 arguments 对象\n\n}\n\nfunction   callSum2(num1, num2){\n    return   sum.apply(this, [num1, num2]);   // 传入数组\n\n}\n\nconsole.log(callSum1(10,10));   // 20\n\nconsole.log(callSum2(10,10));   // 20\n</code></pre><p>在上面这个例子中，callSum1()在执行sum()函数时传入了this（因为是在全局作用域中调用的，所以传入的就是window对象）和arguments对象。而callSum2同样也调用了sum()函数，但它传入的则是this和一个参数数组。这两个函数都会正常执行并返回正确的结果。</p>\n<p>call()方法与apply()方法的作用相同，它们的区别仅在于接收参数的方式不同。对于call()方法而言，第一个参数是this值没有变化，变化的是其余参数都直接传递给函数。换句话说，在使用call()方法时，传递给函数的参数必须逐个列举出来，如下面的例子所示。</p>\n<pre><code>function   sum(num1, num2){\n\n    returnnum1 + num2;\n\n}\n\nfunction   callSum(num1, num2){\n\n    returnsum.call(this, num1, num2);\n\n}\n\nconsole.log(callSum(10,10));   // 20\n</code></pre><p>在使用call()方法的情况下，callSum()必须明确地传入每一个参数。结果与使用apply()没有什么不同。至于是使用apply()还是call()，完全取决于你采取哪种给函数传递参数的方式最方便。如果你打算直接传入arguments对象，或者包含函数中先接收到的也是一个数组，那么使用apply()肯定更方便；否则，选择call()可能更合适。（在不给函数传递参数的情况下，使用哪个方法都无所谓。）</p>\n<p>事实上，传递参数并非apply()和call()真正的用武之地；它们真正强大的地方是能够扩充函数赖以运行的作用域。下面来看一个例子。</p>\n<pre><code>window.color =&quot;red&quot;;\n\nvar o = {color:&quot;blue&quot;};\n\nfunction   sayColor(){\n\n    console.log(this.color);\n\n}\n\nsayColor();   // red\n\nsayColor.call(this);   // red\n\nsayColor.call(window);   // red\n\nsayColor.call(o);   // blue\n</code></pre><p>这个例子是在前面说明this对象的示例基础上修改而成的。这一次，sayColor()也是作为全局函数定义的，而且当在全局作用域中调用它时，它确实会显示”red”，因为对this.color的求值会转换成对window.color的求值。而sayColor.call(this)和sayColor.call(window)，则是两种显式地在全局作用域中调用函数的方式，结果当然都会显示”red”。但是，当运行sayColor.call(o)时，函数的执行环境就不一样了，因为此时函数体内的this对象指向了o，于是结果显示的是”blue”。</p>\n<p>使用call()或apply()来扩充作用域的最大好处，就是对象不需要与方法有任何耦合关系。在前面例子的第一个版本中，我们是先将sayColor()函数放到了对象o中，然后再通过o来调用它的；而在这里重写的例子中，就不需要先前那个多余的步骤了。</p>\n<p>2、全局安装gulp<br>        2.1、说明：全局安装gulp目的是为了通过她执行gulp任务；</p>\n<pre><code>2.2、安装：命令提示符执行npm install gulp -g；\n\n2.3、查看是否正确安装：命令提示符执行gulp -v，出现版本号即为正确安装。\n</code></pre><p>3、新建package.json文件<br>       3.1、说明：package.json是基于nodejs项目必不可少的配置文件，它是存放在项目根目录的普通json文件；</p>\n<pre><code> 3.2、执行命令提示符执行npm init进行手动安装\n\n3.3、安装完成后会在当前文件夹下看到如下package.json文件\n</code></pre><p>文/原创／Dimple（github作者）<br>原文链接：<a href=\"https://cuidapao.github.io/\" target=\"_blank\" rel=\"external\">https://cuidapao.github.io/</a><br>著作权归作者所有，转载请联系作者获得授权，并标注”github作者”。</p>\n","excerpt":"","more":"<h1 id=\"javaScript之函数详解\"><a href=\"#javaScript之函数详解\" class=\"headerlink\" title=\"javaScript之函数详解\"></a>javaScript之函数详解</h1><p>本文档内容参考<a href=\"http://gold.xitu.io/post/582087522e958a0054f8ed36\"><font style=\"color:blue\">《JavaScript闯关记》</font></a>之函数</p>\n<p>函数是一段代码，他只定义一次，但可以被执行或调用任意次。在 JavaScript 里，函数即对象，程序可以随意操控它们。比如，可以把函数赋值给变量，或者作为参数传递给其他函数，也可以给它们设置属性，甚至调用它们的方法。如果函数挂载在一个对象上，作为对象的一个属性，就称它为对象的方法。如果函数嵌套在其他函数中定义，这样它们就可以访问它们被定义时所处的作用域中的任何变量。</p>\n<h4 id=\"函数定义\"><a href=\"#函数定义\" class=\"headerlink\" title=\"函数定义\"></a>函数定义</h4><p>在 JavaScript 中，函数实际上是对象，每个函数都是Function构造函数的实例，因此函数名实际上也是一个指向函数对象的指针，不会与某个函数绑定。函数通常有以下3中定义方式。例如：</p>\n<pre><code>// 写法一：函数声明（推荐写法）\n\nfunction   sum(num1, num2){\n\n    return   num1 + num2;\n\n}\n\n// 写法二：函数表达式（推荐写法）\n\nvar    sum =function(num1, num2){\n\n    return    num1 + num2;\n\n};\n\n// 写法三：Function 构造函数（不推荐写法）\n\nvar   sum =new   Function(&quot;num1&quot;,&quot;num2&quot;,&quot;return num1 +     num2&quot;);\n</code></pre><p>由于函数名仅仅是指向函数的指针，因此函数名与包含对象指针的其他变量没有什么不同。换句话说，一个函数可能会有多个名字。例如：</p>\n<pre><code>function   sum(num1, num2){\n\nreturnnum1 + num2;\n\n}\n\nconsole.log(sum(10,10));   // 20\n\nvar   anotherSum = sum;\n\nconsole.log(anotherSum(10,10));   // 20\n\nsum = null;\n\nconsole.log(anotherSum(10,10));  // 20\n</code></pre><h3 id=\"没有重载\"><a href=\"#没有重载\" class=\"headerlink\" title=\"没有重载\"></a>没有重载</h3><p>将函数名想象为指针，也有助于理解为什么 JavaScript 中没有函数重载的概念。</p>\n<pre><code>function   addSomeNumber(num){\n\nreturn   num +100;\n\n}\n\nfunction   addSomeNumber(num){\n\nreturn   num +200;\n\n}\n\nvar   result = addSomeNumber(100);  // 300\n</code></pre><p>显然，这个例子中声明了两个同名函数，而结果则是后面的函数覆盖了前面的函数。以上代码实际上与下面的代码没有什么区别。</p>\n<pre><code>var   addSomeNumber = function(num){\n\n    return   num +100;\n\n};\n\naddSomeNumber = function(num){\n\n    return   num +200;\n\n};\n\nvar   result = addSomeNumber(100);   // 300\n</code></pre><p>通过重写代码之后可以很容易明白，在创建第二个函数时，实际上覆盖了引用第一个函数的变量addSomeNumber。</p>\n<p>函数声明与函数表达式（函数是js中的一等公民，JavaScript 引擎在渲染js时会把通过函数声明声明的函数放在js的顶部优先解析）</p>\n<p>解析器在向执行环境中加载数据时，对「函数声明」和「函数表达式」并非一视同仁。解析器会率先读取函数声明，并使其在执行任何代码之前可用（可以访问）；至于函数表达式，则必须等到解析器执行到它所在的代码行，才会真正被解释执行。例如：</p>\n<pre><code>console.log(sum(10,10));   // 20\n\nfunction   sum(num1, num2){\n\n  return   num1 + num2;\n\n}\n</code></pre><p>以上代码完全可以正常运行。因为在代码开始执行之前，解析器就已经通过一个名为函数声明提升（function declaration hoisting）的过程，读取并将函数声明添加到执行环境中。对代码求值时，JavaScript 引擎在第一遍会声明函数并将它们放到源代码树的顶部。所以，即使声明函数的代码在调用它的代码后面，JavaScript 引擎也能把函数声明提升到顶部。把上面的「函数声明」改为等价的「函数表达式」，就会在执行期间导致错误。例如：</p>\n<pre><code>console.log(sum(10,10));   // Uncaught TypeError: sum     is not a function\n\nvar   sum =function(num1, num2){\n\nreturn   num1 + num2;\n\n};\n</code></pre><p>除了上述区别之外，「函数声明」与「函数表达式」的语法是等价的。</p>\n<h3 id=\"作为值的函数\"><a href=\"#作为值的函数\" class=\"headerlink\" title=\"作为值的函数\"></a>作为值的函数</h3><p>因为 JavaScript 中的函数名本身就是变量，所以函数也可以作为值来使用。也就是说，不仅可以像传递参数一样把一个函数传递给另一个函数，而且可以将一个函数作为另一个函数的结果返回。来看一看下面的函数。</p>\n<pre><code>function   callSomeFunction(someFunction,someArgument){\n\n  return   someFunction(someArgument);\n\n}\n</code></pre><p>这个函数接受两个参数。第一个参数应该是一个函数，第二个参数应该是要传递给该函数的一个值。然后，就可以像下面的例子一样传递函数了。</p>\n<pre><code>function   add10(num){                 \n\n\n    return   num +10;\n\n}\n\nvar   result1 = callSomeFunction(add10,10);\n\nconsole.log(result1);   // 20\n\nfunction   getGreeting(name){\n\n    return   &quot;Hello, &quot;+ name;\n\n}\n\nvar  result2 = callSomeFunction(getGreeting,&quot;Nicholas&quot;);\n\nconsole.log(result2);   // &quot;Hello, Nicholas&quot;\n</code></pre><p>这里的callSomeFunction()函数是通用的，即无论第一个参数中传递进来的是什么函数，它都会返回执行第一个参数后的结果。要访问函数的指针而不执行函数的话，必须去掉函数名后面的那对圆括号。因此上面例子中传递给callSomeFunction()的是add10和getGreeting，而不是执行它们之后的结果。</p>\n<p>当然，还可以从一个函数中返回另一个函数，而且这也是极为有用的一种技术。例如，假设有一个对象数组，我们想要根据某个对象属性对数组进行排序。而传递给数组sort()方法的比较函数要接收两个参数，即要比较的值。可是，我们需要一种方式来指明按照哪个属性来排序。要解决这个问题，可以定义一个函数，它接收一个属性名，然后根据这个属性名来创建一个比较函数，下面就是这个函数的定义。</p>\n<pre><code>function   createComparisonFunction(propertyName){\n\n    return   function(object1, object2){\n\n         var   value1 = object1[propertyName];\n\n         var   value2 = object2[propertyName];\n\n         if(value1 &lt; value2){\n\n                 return -1;        \n\n             }else  if(value1 &gt; value2){\n\n             return 1;      \n\n             }else{\n\n                 return 0;        \n\n             }    \n         }\n      }\n</code></pre><p>这个函数定义看起来有点复杂，但实际上无非就是在一个函数中嵌套了另一个函数，而且内部函数前面加了一个return操作符。在内部函数接收到propertyName参数后，它会使用方括号表示法来取得给定属性的值。取得了想要的属性值之后，定义比较函数就非常简单了。上面这个函数可以像在下面例子中这样使用。</p>\n<pre><code>var   data = [{name:&quot;Zachary&quot;,age:28}, {name:&quot;Nicholas&quot;,age:29}];\n\ndata.sort(createComparisonFunction(&quot;name&quot;));\n\nconsole.log(data[0].name);   //Nicholas\n\ndata.sort(createComparisonFunction(&quot;age&quot;));\n\nconsole.log(data[0].name);   // Zachary\n</code></pre><p>这里，我们创建了一个包含两个对象的数组data。其中，每个对象都包含一个name属性和一个age属性。在默认情况下，sort()方法会调用每个对象的toString()方法以确定它们的次序；但得到的结果往往并不符合人类的思维习惯。因此，我们调用createComparisonFunction(“name”)方法创建了一个比较函数，以便按照每个对象的name属性值进行排序。而结果排在前面的第一项是name为”Nicholas”，age是29的对象。然后，我们又使用了createComparisonFunction(“age”)返回的比较函数，这次是按照对象的age属性排序。得到的结果是name值为”Zachary”，age值是28的对象排在了第一位。</p>\n<h3 id=\"函数的形参和实参\"><a href=\"#函数的形参和实参\" class=\"headerlink\" title=\"函数的形参和实参\"></a>函数的形参和实参</h3><p>在函数内部，有两个特殊的对象：arguments和this。其中，arguments是一个类数组对象，包含着传入函数中的所有参数。虽然arguments的主要用途是保存函数参数，但这个对象还有一个名叫callee的属性，该属性是一个指针，指向拥有这个arguments对象的函数。请看下面这个非常经典的阶乘函数。</p>\n<pre><code>function   factorial(num){\n\n    if(num &lt;=1) {\n\n        return 1;  \n\n    }else{\n\n        return  num * factorial(num-1)    \n\n    }\n\n}\n</code></pre><p>定义阶乘函数一般都要用到递归算法，如上面的代码所示，在函数有名字，而且名字以后也不会变的情况下，这样定义没有问题。但问题是这个函数的执行与函数名factorial紧紧耦合在了一起。为了消除这种紧密耦合的现象，可以像下面这样使用arguments.callee。</p>\n<pre><code>function   factorial(num){\n\n        if(num &lt;=1) {\n\n            return  1;  \n\n        }else{\n\n            return  num *arguments.callee(num-1)  \n\n        }\n\n}\n</code></pre><p>在这个重写后的factorial()函数的函数体内，没有再引用函数名factorial。这样，无论引用函数时使用的是什么名字，都可以保证正常完成递归调用。例如：</p>\n<pre><code>var   trueFactorial = factorial;\n\nfactorial =function(){\n\n    return  0;\n\n};\n\nconsole.log(trueFactorial(5));   // 120\n\nconsole.log(factorial(5));   // 0\n</code></pre><p>在此，变量trueFactorial获得了factorial的值，实际上是在另一个位置上保存了一个函数的指针。然后，我们又将一个简单地返回0的函数赋值给factorial变量。如果像原来的factorial()那样不使用arguments.callee，调用trueFactorial()就会返回0。可是，在解除了函数体内的代码与函数名的耦合状态之后，trueFactorial()仍然能够正常地计算阶乘；至于factorial()，它现在只是一个返回0的函数。</p>\n<p>函数内部的另一个特殊对象是this，其行为与 Java 和 C# 中的this大致类似。换句话说，this引用的是函数据以执行的环境对象（当在网页的全局作用域中调用函数时，this对象引用的就是window）。来看下面的例子。</p>\n<pre><code>window.color =&quot;red&quot;;\n\nvar o = {color:&quot;blue&quot;};\n\nfunction sayColor(){\n\n    console.log(this.color);\n\n}\n\nsayColor();   // &quot;red&quot;\n\no.sayColor = sayColor;\n\no.sayColor();   // &quot;blue&quot;\n</code></pre><p>上面这个函数sayColor()是在全局作用域中定义的，它引用了this对象。由于在调用函数之前，this的值并不确定，因此this可能会在代码执行过程中引用不同的对象。当在全局作用域中调用sayColor()时，this引用的是全局对象window；换句话说，对this.color求值会转换成对window.color求值，于是结果就返回了”red”。而当把这个函数赋给对象o并调用o.sayColor()时，this引用的是对象o，因此对this.color求值会转换成对o.color求值，结果就返回了”blue”。</p>\n<p>请大家一定要牢记，函数的名字仅仅是一个包含指针的变量而已。因此，即使是在不同的环境中执行，全局的sayColor()函数与o.sayColor()指向的仍然是同一个函数。</p>\n<p>ECMAScript 5也规范化了另一个函数对象的属性caller。这个属性中保存着「调用当前函数的函数的引用」，如果是在全局作用域中调用当前函数，它的值为null。例如：</p>\n<pre><code>function  outer(){  \n\n    inner();\n\n}\n\nfunction  inner(){\n\n  console.log(arguments.callee.caller);\n\n}\n\nouter();\n</code></pre><p>以上代码会导致警告框中显示outer()函数的源代码。因为outer()调用了inter()，所以arguments.callee.caller就指向outer()。</p>\n<p>在严格模式下，访问arguments.callee属性，或为函数的caller属性赋值，都会导致错误。</p>\n<h3 id=\"函数的属性和方法\"><a href=\"#函数的属性和方法\" class=\"headerlink\" title=\"函数的属性和方法\"></a>函数的属性和方法</h3><p>JavaScript 中的函数是对象，因此函数也有属性和方法。每个函数都包含两个属性：length和prototype。其中，length属性表示函数希望接收的命名参数的个数，如下面的例子所示。</p>\n<pre><code>function   sayName(name){\n\n    console.log(name);\n\n}\n\nfunction   sum(num1, num2){\n\n    return    num1 + num2;\n\n}\n\nfunction   sayHi(){\n\n     console.log(&quot;hi&quot;);\n\n}\n\nconsole.log(sayName.length);     // 1\n\nconsole.log(sum.length);   // 2\n\nconsole.log(sayHi.length);   // 0\n</code></pre><p>对于 JavaScript 中的引用类型而言，prototype是保存它们所有实例方法的真正所在。换句话说，诸如toString()和valueOf()等方法实际上都保存在prototype名下，只不过是通过各自对象的实例访问罢了。在创建自定义引用类型以及实现继承时，prototype属性的作用是极为重要的。在 ECMAScript 5中，prototype属性是不可枚举的，因此使用for-in无法发现。</p>\n<p>每个函数都包含两个非继承而来的方法：apply()和call()。这两个方法的用途都是在特定的作用域中调用函数，实际上等于设置函数体内this对象的值。首先，apply()方法接收两个参数：一个是在其中运行函数的作用域，另一个是参数数组。其中，第二个参数可以是Array的实例，也可以是arguments对象。例如：</p>\n<pre><code>function   sum(num1, num2){\n    return   num1 + num2;\n\n}\n\nfunction    callSum1(num1, num2){\n\n    return   sum.apply(this,arguments);  // 传入 arguments 对象\n\n}\n\nfunction   callSum2(num1, num2){\n    return   sum.apply(this, [num1, num2]);   // 传入数组\n\n}\n\nconsole.log(callSum1(10,10));   // 20\n\nconsole.log(callSum2(10,10));   // 20\n</code></pre><p>在上面这个例子中，callSum1()在执行sum()函数时传入了this（因为是在全局作用域中调用的，所以传入的就是window对象）和arguments对象。而callSum2同样也调用了sum()函数，但它传入的则是this和一个参数数组。这两个函数都会正常执行并返回正确的结果。</p>\n<p>call()方法与apply()方法的作用相同，它们的区别仅在于接收参数的方式不同。对于call()方法而言，第一个参数是this值没有变化，变化的是其余参数都直接传递给函数。换句话说，在使用call()方法时，传递给函数的参数必须逐个列举出来，如下面的例子所示。</p>\n<pre><code>function   sum(num1, num2){\n\n    returnnum1 + num2;\n\n}\n\nfunction   callSum(num1, num2){\n\n    returnsum.call(this, num1, num2);\n\n}\n\nconsole.log(callSum(10,10));   // 20\n</code></pre><p>在使用call()方法的情况下，callSum()必须明确地传入每一个参数。结果与使用apply()没有什么不同。至于是使用apply()还是call()，完全取决于你采取哪种给函数传递参数的方式最方便。如果你打算直接传入arguments对象，或者包含函数中先接收到的也是一个数组，那么使用apply()肯定更方便；否则，选择call()可能更合适。（在不给函数传递参数的情况下，使用哪个方法都无所谓。）</p>\n<p>事实上，传递参数并非apply()和call()真正的用武之地；它们真正强大的地方是能够扩充函数赖以运行的作用域。下面来看一个例子。</p>\n<pre><code>window.color =&quot;red&quot;;\n\nvar o = {color:&quot;blue&quot;};\n\nfunction   sayColor(){\n\n    console.log(this.color);\n\n}\n\nsayColor();   // red\n\nsayColor.call(this);   // red\n\nsayColor.call(window);   // red\n\nsayColor.call(o);   // blue\n</code></pre><p>这个例子是在前面说明this对象的示例基础上修改而成的。这一次，sayColor()也是作为全局函数定义的，而且当在全局作用域中调用它时，它确实会显示”red”，因为对this.color的求值会转换成对window.color的求值。而sayColor.call(this)和sayColor.call(window)，则是两种显式地在全局作用域中调用函数的方式，结果当然都会显示”red”。但是，当运行sayColor.call(o)时，函数的执行环境就不一样了，因为此时函数体内的this对象指向了o，于是结果显示的是”blue”。</p>\n<p>使用call()或apply()来扩充作用域的最大好处，就是对象不需要与方法有任何耦合关系。在前面例子的第一个版本中，我们是先将sayColor()函数放到了对象o中，然后再通过o来调用它的；而在这里重写的例子中，就不需要先前那个多余的步骤了。</p>\n<p>2、全局安装gulp<br>        2.1、说明：全局安装gulp目的是为了通过她执行gulp任务；</p>\n<pre><code>2.2、安装：命令提示符执行npm install gulp -g；\n\n2.3、查看是否正确安装：命令提示符执行gulp -v，出现版本号即为正确安装。\n</code></pre><p>3、新建package.json文件<br>       3.1、说明：package.json是基于nodejs项目必不可少的配置文件，它是存放在项目根目录的普通json文件；</p>\n<pre><code> 3.2、执行命令提示符执行npm init进行手动安装\n\n3.3、安装完成后会在当前文件夹下看到如下package.json文件\n</code></pre><p>文/原创／Dimple（github作者）<br>原文链接：<a href=\"https://cuidapao.github.io/\">https://cuidapao.github.io/</a><br>著作权归作者所有，转载请联系作者获得授权，并标注”github作者”。</p>\n"},{"title":"前端开发面试题","date":"2016-07-29T06:10:57.000Z","_content":"# 前言\n\n## [<font style=\"color:blue\">只看问题点这里</font>](http://markyun.github.io/2015/Front-end-Developer-Questions/)\n\n## [<font style=\"color:blue\">看全部问题和答案点这里</font>](https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions/Questions-and-Answers)\n\n\n本文由我收集总结了一些前端面试题，初学者阅后也要用心钻研其中的原理，重要知识需要系统学习、透彻学习，形成自己的知识链。万不可投机取巧，临时抱佛脚只求面试侥幸混过关是错误的！也是不可能的！不可能的！不可能的！\n\n前端还是一个年轻的行业，新的行业标准， 框架， 库都不断在更新和新增，正如赫门在2015深JS大会上的《前端服务化之路》主题演讲中说的一句话：“每18至24个月，前端都会难一倍”，这些变化使前端的能力更加丰富、创造的应用也会更加完美。所以关注各种前端技术，跟上快速变化的节奏，也是身为一个前端程序员必备的技能之一。\n\n最近也收到许多微博私信的鼓励和更正题目信息，后面会经常更新题目和答案到[<font style=\"color:blue\">github</font>](https://cuidapao.github.io/)博客。希望前端er达到既能使用也会表达，对理论知识有自己的理解。可根据下面的知识点一个一个去进阶学习，形成自己的职业技能链。\n\n面试有几点需注意：(来源[<font style=\"color:blue\">寒冬winter</font>](http://weibo.com/wintercn) 老师，github:@wintercn)\n\n面试题目： 根据你的等级和职位的变化，入门级到专家级，广度和深度都会有所增加。\n\n题目类型： 理论知识、算法、项目细节、技术视野、开放性题、工作案例。\n\n细节追问： 可以确保问到你开始不懂或面试官开始不懂为止，这样可以大大延展题目的区分度和深度，知道你的实际能力。因为这种知识关联是长时期的学习，临时抱佛脚绝对是记不住的。\n\n回答问题再棒，面试官（可能是你面试职位的直接领导），会考虑我要不要这个人做我的同事？所以态度很重要、除了能做事，还要会做人。（感觉更像是相亲( •̣̣̣̣̣̥́௰•̣̣̣̣̣̥̀ )）\n\n资深的前端开发能把absolute和relative弄混，这样的人不要也罢，因为团队需要的是：你这个人具有可以依靠的才能（靠谱）。\n\n### 前端开发知识点：\n\n#### HTML&CSS：\n    对Web标准的理解、浏览器内核差异、兼容性、hack、CSS基本功：布局、盒子模型、选择器优先级、\n    HTML5、CSS3、Flexbox\n\n#### JavaScript：\n    数据类型、运算、对象、Function、继承、闭包、作用域、原型链、事件、RegExp、JSON、Ajax、\n    DOM、BOM、内存泄漏、跨域、异步装载、模板引擎、前端MVC、路由、模块化、Canvas、ECMAScript 6、Nodejs\n\n其他：\n    移动端、响应式、自动化构建、HTTP、离线存储、WEB安全、优化、重构、团队协作、可维护、易用性、SEO、UED、架构、职业生涯、快速学习能力\n作为一名前端工程师，无论工作年头长短都应该掌握的知识点：\n\n此条由 王子墨 发表在 攻城师的实验室\n\n    1、DOM结构 —— 两个节点之间可能存在哪些关系以及如何在节点之间任意移动。\n\n    2、DOM操作 —— 如何添加、移除、移动、复制、创建和查找节点等。\n\n    3、事件 —— 如何使用事件，以及IE和标准DOM事件模型之间存在的差别。\n\n    4、XMLHttpRequest —— 这是什么、怎样完整地执行一次GET请求、怎样检测错误。\n\n    5、严格模式与混杂模式 —— 如何触发这两种模式，区分它们有何意义。\n\n    6、盒模型 —— 外边距、内边距和边框之间的关系，及IE8以下版本的浏览器中的盒模型\n\n    7、块级元素与行内元素 —— 怎么用CSS控制它们、以及如何合理的使用它们\n\n    8、浮动元素 —— 怎么使用它们、它们有什么问题以及怎么解决这些问题。\n\n    9、HTML与XHTML —— 二者有什么区别，你觉得应该使用哪一个并说出理由。\n\n    10、JSON —— 作用、用途、设计结构。\n\n#### 备注：\n\n\t根据自己需要选择性阅读，面试题是对理论知识的总结，让自己学会应该如何表达。\n\n\t资料答案不够正确和全面，欢迎欢迎Star和提交issues。\n\n\t格式不断修改更新中。\n\n#### 新增ECMAScript6 相关问题\n\n\n#### HTML\n\nDoctype作用？标准模式与兼容模式各有什么区别?\n\n\t（1）、<!DOCTYPE>声明位于位于HTML文档中的第一行，处于 <html> 标签之前。告知浏览器的解析器用什么文档标准\t解析这个文档。DOCTYPE不存在或格式不正确会导致文档以兼容模式呈现。\n\n\t（2）、标准模式的排版 和JS运作模式都是以该浏览器支持的最高标准运行。在兼容模式中，页面以宽松的向后兼容的方\t式显示,模拟老式浏览器的行为以防止站点无法工作。\n\t\nHTML5 为什么只需要写 <!DOCTYPE HTML>？\n\n\t HTML5 不基于 SGML，因此不需要对DTD进行引用，但是需要doctype来规范浏览器的行为（让浏览器按照它们应该的\t方式来运行）；\n\n\t 而HTML4.01基于SGML,所以需要对DTD进行引用，才能告知浏览器文档所使用的文档类型。\n\t \n行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？\n\n\t首先：CSS规范规定，每个元素都有display属性，确定该元素的类型，每个元素都有默认的display值，如div的\tdisplay默认值为“block”，则为“块级”元素；span默认display属性值为“inline”，是“行内”元素。\n\n\t（1）行内元素有：a b span img input select strong（强调的语气）\n\t（2）块级元素有：div ul ol li dl dt dd h1 h2 h3 h4…p\n\t\n\t（3）常见的空元素：\n    <br> <hr> <img> <input> <link> <meta>\n    鲜为人知的是：\n    <area> <base> <col> <command> <embed> <keygen> <param> <source> <track> <wbr>\n\n不同浏览器（版本）、HTML4（5）、CSS2等实际略有差异\n参考: http://stackoverflow.com/questions/6867254/browsers-default-css-for-html-elements\n页面导入样式时，使用link和@import有什么区别？\n\n\t（1）link属于XHTML标签，除了加载CSS外，还能用于定义RSS, 定义rel连接属性等作用；而@import是CSS提供的，\t只能用于加载CSS;\n\n\t（2）页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载;\n\n\t（3）import是CSS2.1 提出的，只在IE5以上才能被识别，而link是XHTML标签，无兼容问题;\n\t介绍一下你对浏览器内核的理解？    \n\t\n介绍一下你对浏览器内核的理解？\n\n\t主要分成两部分：渲染引擎(layout engineer或Rendering Engine)和JS引擎。\n\t渲染引擎：负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入CSS等），以及计算网页的显示方式，\t然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏\t览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核。\n\n\tJS引擎则：解析和执行javascript来实现网页的动态效果。\n\n\t最开始渲染引擎和JS引擎并没有区分的很明确，后来JS引擎越来越独立，内核就倾向于只指渲染引擎。\n\t\n常见的浏览器内核有哪些？\n\n\tTrident内核：IE,MaxThon,TT,The World,360,搜狗浏览器等。[又称MSHTML]\n\tGecko内核：Netscape6及以上版本，FF,MozillaSuite/SeaMonkey等\n\tPresto内核：Opera7及以上。      [Opera内核原为：Presto，现为：Blink;]\n\tWebkit内核：Safari,Chrome等。   [ Chrome的：Blink（WebKit的分支）]\n\t\n详细文章：[<font style=\"color:blue\">浏览器内核的解析和对比</font>](http://www.cnblogs.com/fullhouse/archive/2011/12/19/2293455.html)\n\n\thtml5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？\n\n\t* HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加。\n      绘画 canvas;\n      用于媒介回放的 video 和 audio 元素;\n      本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失;\n      sessionStorage 的数据在浏览器关闭后自动删除;\n      语意化更好的内容元素，比如 article、footer、header、nav、section;\n      表单控件，calendar、date、time、email、url、search;\n      新的技术webworker, websocket, Geolocation;\n\n  \t移除的元素：\n      \t纯表现的元素：basefont，big，center，font, s，strike，tt，u;\n      \t对可用性产生负面影响的元素：frame，frameset，noframes；\n\n\t* 支持HTML5新标签：\n    \t IE8/IE7/IE6支持通过document.createElement方法产生的标签，\n    \t 可以利用这一特性让这些浏览器支持HTML5新标签，\n    \t 浏览器支持新标签后，还需要添加标签默认的样式。\n\n    \t 当然也可以直接使用成熟的框架、比如html5shim;\n    \t <!--[if lt IE 9]>\n        \t<script> src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"</script>\n    \t <![endif]-->\n\n\t* 如何区分HTML5： DOCTYPE声明\\新增的结构元素\\功能元素\n\n简述一下你对HTML语义化的理解？\n\n\t用正确的标签做正确的事情。\n\thtml语义化让页面的内容结构化，结构更清晰，便于对浏览器、搜索引擎解析;\n\t即使在没有样式CSS情况下也以一种文档格式显示，并且是容易阅读的;\n\t搜索引擎的爬虫也依赖于HTML标记来确定上下文和各个关键字的权重，利于SEO;\n\t使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。\n\t\nHTML5的离线储存怎么使用，工作原理能不能解释一下？\n\n\t在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件。\n\t原理：HTML5的离线存储是基于一个新建的.appcache文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线\t存储资源，这些资源就会像cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据\t进行页面展示。\n\n\n\t如何使用：\n\t1、页面头部像下面一样加入一个manifest的属性；\n\t2、在cache.manifest文件的编写离线存储的资源；\n    \tCACHE MANIFEST\n    \t#v0.11\n   \t \tCACHE:\n    \tjs/app.js\n    \tcss/style.css\n    \tNETWORK:\n    \tresourse/logo.png\n   \t\tFALLBACK:\n    \t/ /offline.html\n\t3、在离线状态时，操作window.applicationCache进行需求实现。\n\t\n\u0010\u0010\u0010\u0010\u0010\u0010详细的使用请参考：[<font style=\"color:blue\">HTML5 离线缓存-manifest简介</font>](http://yanhaijing.com/html/2014/12/28/html5-manifest/)\n\n[<font style=\"color:blue\">有趣的HTML5：离线存储</font>](https://segmentfault.com/a/1190000000732617)\n\n浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢？\n\n\t在线的情况下，浏览器发现html头部有manifest属性，它会请求manifest文件，如果是第一次访问app，那么浏览器就\t会根据manifest文件的内容下载相应的资源并且进行离线存储。如果已经访问过app并且资源已经离线存储了，那么浏览\t器就会使用离线的资源加载页面，然后浏览器会对比新的manifest文件与旧的manifest文件，如果文件没有发生改变，\t就不做任何操作，如果文件改变了，那么就会重新下载文件中的资源并进行离线存储。\n\t离线的情况下，浏览器就直接使用离线存储的资源。\n\t\n详细请参考：[<font style=\"color:blue\">有趣的HTML5：离线存储</font>](https://segmentfault.com/a/1190000000732617)\n\n请描述一下 cookies，sessionStorage 和 localStorage 的区别？\n\n\tcookie是网站为了标示用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）。\n\tcookie数据始终在同源的http请求中携带（即使不需要），记会在浏览器和服务器间来回传递。\n\tsessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。\n\n\t存储大小：\n    \tcookie数据大小不能超过4k。\n    \tsessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。\n\n\t有期时间：\n   \t\tlocalStorage    存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；\n    \tsessionStorage  数据在当前浏览器窗口关闭后自动删除。\n    \tcookie          设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭\niframe有那些缺点？\n\n\t*iframe会阻塞主页面的Onload事件；\n\t*搜索引擎的检索程序无法解读这种页面，不利于SEO;\n\n\t*iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。\n\n\t使用iframe之前需要考虑这两个缺点。如果需要使用iframe，最好是通过javascript\n\t动态给iframe添加src属性值，这样可以绕开以上两个问题。\n\t\t\nLabel的作用是什么？是怎么用的？\n\n\tlabel标签来定义表单控制间的关系,当用户选择该标签时，浏览器会自动将焦点转到和标签相关的表单控件上。\n\n\t<label for=\"Name\">Number:</label>\n\t<input type=“text“name=\"Name\" id=\"Name\"/>\n\n\t<label>Date:<input type=\"text\" name=\"B\"/></label>\nHTML5的form如何关闭自动完成功能？\n\n\t给不想要提示的 form 或某个 input 设置为 autocomplete=off。\n如何实现浏览器内多个标签页之间的通信? (阿里)\n\n\tWebSocket、SharedWorker；\n\t也可以调用localstorge、cookies等本地存储方式；\n\n\tlocalstorge另一个浏览上下文里被添加、修改或删除时，它都会触发一个事件，\n\t我们通过监听事件，控制它的值来进行页面信息通信；\n\t注意quirks：Safari 在无痕模式下设置localstorge值时会抛出 QuotaExceededError 的异常；\nwebSocket如何兼容低浏览器？(阿里)\n\n\tAdobe Flash Socket 、\n\tActiveX HTMLFile (IE) 、\n\t基于 multipart 编码发送 XHR 、\n\t基于长轮询的 XHR\n\t页面可见性（Page Visibility API） 可以有哪些用途？\n\n\t通过 visibilityState 的值检测页面当前是否可见，以及打开网页的时间等;\n\t在页面被切换到其他后台进程的时候，自动暂停音乐或视频的播放；\n如何在页面上实现一个圆形的可点击区域？\n\n\t1、map+area或者svg\n\t2、border-radius\n\t3、纯js实现 需要求一个点在不在圆上简单算法、获取鼠标坐标等等\n\n实现不使用 border 画出1px高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果。\n\n\t<div style=\"height:1px;overflow:hidden;background:red\"></div>\n网页验证码是干嘛的，是为了解决什么安全问题?\n\n\t区分用户是计算机还是人的公共全自动程序。可以防止恶意破解密码、刷票、论坛灌水；\n\t有效防止黑客对某一个特定注册用户用特定程序暴力破解方式进行不断的登陆尝试。\ntitle与h1的区别、b与strong的区别、i与em的区别？\n\n\ttitle属性没有明确意义只表示是个标题，H1则表示层次明确的标题，对页面信息的抓取也有很大的影响；\n\n\tstrong是标明重点内容，有语气加强的含义，使用阅读设备阅读网络时：<strong>会重读，而<B>是展示强调内容。\n\n\ti内容展示为斜体，em表示强调的文本；\n\n\tPhysical Style Elements -- 自然样式标签\n\tb, i, u, s, pre\n\tSemantic Style Elements -- 语义样式标签\n\tstrong, em, ins, del, code\n\t应该准确使用语义样式标签, 但不能滥用, 如果不能确定时首选使用自然样式标签。\n#### CSS\n\n介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？\n\n\t（1）有两种， IE 盒子模型、W3C 盒子模型；\n\t（2）盒模型： 内容(content)、填充(padding)、边界(margin)、 边框(border)；\n\t（3）区  别： IE的content部分把 border 和 padding计算了进去;\n\t\nCSS选择符有哪些？哪些属性可以继承？\n\n\t*   1.id选择器（ # myid）\n    \t2.类选择器（.myclassname）\n   \t \t3.标签选择器（div, h1, p）\n    \t4.相邻选择器（h1 + p）\n    \t5.子选择器（ul > li）\n    \t6.后代选择器（li a）\n    \t7.通配符选择器（ * ）\n    \t8.属性选择器（a[rel = \"external\"]）\n    \t9.伪类选择器（a:hover, li:nth-child）\n\n\t*   可继承的样式： font-size font-family color, UL LI DL DD DT;\n\n\t*   不可继承的样式：border padding margin width height ;\n\t\t\nCSS优先级算法如何计算？\n\n*   优先级就近原则，同权重情况下样式定义最近者为准;\n\n*   载入样式以最后载入的定位为准;\n\n优先级为:\n   !important >  id > class > tag\n    important 比 内联优先级高\nCSS3新增伪类有那些？\n\n    举例：\n    p:first-of-type 选择属于其父元素的首个 <p> 元素的每个 <p> 元素。\n    p:last-of-type  选择属于其父元素的最后 <p> 元素的每个 <p> 元素。\n    p:only-of-type  选择属于其父元素唯一的 <p> 元素的每个 <p> 元素。\n    p:only-child        选择属于其父元素的唯一子元素的每个 <p> 元素。\n    p:nth-child(2)  选择属于其父元素的第二个子元素的每个 <p> 元素。\n\n    :after          在元素之前添加内容,也可以用来做清除浮动。\n    :before         在元素之后添加内容\n    :enabled        \n    :disabled       控制表单控件的禁用状态。\n    :checked        单选框或复选框被选中。\n    \n如何居中div？\n\n\t* 水平居中：给div设置一个宽度，然后添加margin:0 auto属性\n\n\tdiv{\n    \twidth:200px;\n    \tmargin:0 auto;\n\t}\n\t* 让绝对定位的div居中\n\n\tdiv {\n    \tposition: absolute;\n    \twidth: 300px;\n    \theight: 300px;\n    \tmargin: auto;\n    \ttop: 0;\n    \tleft: 0;\n    \tbottom: 0;\n    \tright: 0;\n    \tbackground-color: pink; /* 方便看效果 */\n\t}\n\t* 水平垂直居中一\n\n\t确定容器的宽高 宽500 高 300 的层\n\t设置层的外边距\n\n\tdiv {\n    \tposition: relative;     /* 相对定位或绝对定位均可 */\n    \twidth:500px; \n    \theight:300px;\n    \ttop: 50%;\n    \tleft: 50%;\n    \tmargin: -150px 0 0 -250px;      /* 外边距为自身宽高的一半 */\n    \tbackground-color: pink;     /* 方便看效果 */\n\n \t}\n \n\t* 水平垂直居中二\n\n\t未知容器的宽高，利用 `transform` 属性\n\n\tdiv {\n    \tposition: absolute;     /* 相对定位或绝对定位均可 */\n    \twidth:500px; \n    \theight:300px;\n    \ttop: 50%;\n    \tleft: 50%;\n    \ttransform: translate(-50%, -50%);\n    \tbackground-color: pink;     /* 方便看效果 */\n\n\t}\n\n\t* 水平垂直居中三\n\n\t利用 flex 布局\n\t实际使用时应考虑兼容性\n\n\t.container {\n    \tdisplay: flex; \n    \talign-items: center;        /* 垂直居中 */\n    \tjustify-content: center;    /* 水平居中 */\n\n\t}\n\t.container div {\n    \twidth: 100px;\n    \theight: 100px;\n    \tbackground-color: pink;     /* 方便看效果 */\n\t}  \t\n\ndisplay有哪些值？说明他们的作用。\n\n  \tblock         块类型。默认宽度为父元素宽度，可设置宽高，换行显示。\n  \tnone          缺省值。象行内元素类型一样显示。\n  \tinline        行内元素类型。默认宽度为内容宽度，不可设置宽高，同行显示。\n  \tinline-block  默认宽度为内容宽度，可以设置宽高，同行显示。\n  \tlist-item     象块类型元素一样显示，并添加样式列表标记。\n  \ttable         此元素会作为块级表格来显示。\n  \tinherit       规定应该从父元素继承 display 属性的值。\n  \t\nposition的值relative和absolute定位原点是？\n\n  \tabsolute\n    生成绝对定位的元素，相对于值不为 static的第一个父元素进行定位。\n  \tfixed （老IE不支持）\n    生成绝对定位的元素，相对于浏览器窗口进行定位。\n  \trelative\n    生成相对定位的元素，相对于其正常位置进行定位。\n  \tstatic\n    默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right z-index 声明）。\n  \tinherit\n    规定从父元素继承 position 属性的值。\n    \nCSS3有哪些新特性？\n\n  \t新增各种CSS选择器  （: not(.input)：所有 class 不是“input”的节点）\n  \t圆角            （border-radius:8px）\n  \t多列布局      （multi-column layout）\n  \t阴影和反射   （Shadow\\Reflect）\n  \t文字特效      （text-shadow、）\n  \t文字渲染      （Text-decoration）\n  \t线性渐变      （gradient）\n  \t旋转            （transform）\n  \t缩放,定位,倾斜,动画,多背景\n  \t例如:transform:\\scale(0.85,0.90)\\ translate(0px,-30px)\\ skew(-9deg,0deg)\\Animation:\n  \t\n请解释一下CSS3的Flexbox（弹性盒布局模型）,以及适用场景？\n\n \t一个用于页面布局的全新CSS3功能，Flexbox可以把列表放在同一个方向（从上到下排列，从左到右），并让列表能延伸\t到占用可用的空间。\n \t较为复杂的布局还可以通过嵌套一个伸缩容器（flex container）来实现。\n \t采用Flex布局的元素，称为Flex容器（flex container），简称\"容器\"。\n \t它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称\"项目\"。\n \t常规布局是基于块和内联流方向，而Flex布局是基于flex-flow流可以很方便的用来做局中，能对不同屏幕大小自适应。\n \t在布局上有了比以前更加灵活的空间。\n\n \t具体：http://www.w3cplus.com/css3/flexbox-basics.html\n \t\n用纯CSS创建一个三角形的原理是什么？\n\n\t把上、左、右三条边隐藏掉（颜色设为 transparent）\n\t#demo {\n  \t\twidth: 0;\n \t\theight: 0;\n  \t\tborder-width: 20px;\n  \t\tborder-style: solid;\n  \t\tborder-color: transparent transparent red transparent;\n\t}\n一个满屏 品 字布局 如何设计?\n\n\t简单的方式：\n    \t上面的div宽100%，\n    \t下面的两个div分别宽50%，\n    \t然后用float或者inline使其不换行即可\n    \t\ncss多列等高如何实现？\n\n\t利用padding-bottom|margin-bottom正负值相抵；\n\t设置父容器设置超出隐藏（overflow:hidden），这样子父容器的高度就还是它里面的列没有设定padding-bottom时\t的高度，\n\t当它里面的任 一列高度增加了，则父容器的高度被撑到里面最高那列的高度，\n\t其他比这列矮的列会用它们的padding-bottom补偿这部分高度差。\n\t\n经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用hack的技巧 ？\n\t\n\t* png24位的图片在iE6浏览器上出现背景，解决方案是做成PNG8.\n\n\t* 浏览器默认的margin和padding不同。解决方案是加一个全局的*{margin:0;padding:0;}来统一。\n\n\t* IE6双边距bug:块属性标签float后，又有横行的margin情况下，在ie6显示margin比设置的大。\n\n  \t浮动ie产生的双倍距离 #box{ float:left; width:10px; margin:0 0 0 100px;}\n\n  \t这种情况之下IE会产生20px的距离，解决方案是在float的标签样式控制中加入 ——_display:inline;将其转化为行\t内属性。(_这个符号只有ie6会识别)\n\n  \t渐进识别的方式，从总体中逐渐排除局部。\n\n  \t首先，巧妙的使用“\\9”这一标记，将IE游览器从所有情况中分离出来。\n  \t接着，再次使用“+”将IE8和IE7、IE6分离开来，这样IE8已经独立识别。\n\n  \tcss\n      \t.bb{\n          \tbackground-color:red;/*所有识别*/\n          \tbackground-color:#00deff\\9; /*IE6、7、8识别*/\n          \t+background-color:#a200ff;/*IE6、7识别*/\n         \t _background-color:#1e0bd1;/*IE6识别*/\n      \t}\n\n\n\t*  IE下,可以使用获取常规属性的方法来获取自定义属性,\n   \t\t也可以使用getAttribute()获取自定义属性;\n   \t\tFirefox下,只能使用getAttribute()获取自定义属性。\n   \t\t解决方法:统一通过getAttribute()获取自定义属性。\n\n\t*  IE下,even对象有x,y属性,但是没有pageX,pageY属性;\n   \t\tFirefox下,event对象有pageX,pageY属性,但是没有x,y属性。\n\n\t*  解决方法：（条件注释）缺点是在IE浏览器下可能会增加额外的HTTP请求数。\n\n\t*  Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示,\n   \t\t可通过加入 CSS 属性 -webkit-text-size-adjust: none; 解决。\n\n\t超链接访问过后hover样式就不出现了 被点击访问过的超链接样式不在具有hover和active了解决方法是改变CSS属性\t的排列顺序:\n\tL-V-H-A :  a:link {} a:visited {} a:hover {} a:active {}\n\t\nli与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？\n\n\t行框的排列会受到中间空白（回车\\空格）等的影响，因为空格也属于字符,这些空白也会被应用样式，占据空间，所以会\t有间隔，把字符大小设为0，就没有空格了。\n为什么要初始化CSS样式?\n\n\t- 因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没对CSS初始化往往会出现浏览器之间的页面\t显示差异。\n\n\t- 当然，初始化样式会对SEO有一定的影响，但鱼和熊掌不可兼得，但力求影响最小的情况下初始化。\n\n\t最简单的初始化方法： * {padding: 0; margin: 0;} （强烈不建议）\n\n\t淘宝的样式初始化代码：\n\tbody, h1, h2, h3, h4, h5, h6, hr, p, blockquote, dl, dt, dd, ul, ol, li, pre, form, \tfieldset, legend, button, input, textarea, th, td { margin:0; padding:0; }\n\tbody, button, input, select, textarea { font:12px/1.5tahoma, arial, \\5b8b\\4f53; }\n\th1, h2, h3, h4, h5, h6{ font-size:100%; }\n\taddress, cite, dfn, em, var { font-style:normal; }\n\tcode, kbd, pre, samp { font-family:couriernew, courier, monospace; }\n\tsmall{ font-size:12px; }\n\tul, ol { list-style:none; }\n\ta { text-decoration:none; }\n\ta:hover { text-decoration:underline; }\n\tsup { vertical-align:text-top; }\n\tsub{ vertical-align:text-bottom; }\n\tlegend { color:#000; }\n\tfieldset, img { border:0; }\n\tbutton, input, select, textarea { font-size:100%; }\n\ttable { border-collapse:collapse; border-spacing:0; }\n\t\nabsolute的containing block(容器块)计算方式跟正常流有什么不同？\n\n\t无论属于哪种，都要先找到其祖先元素中最近的 position 值不为 static 的元素，然后再判断：\n\t1、若此元素为 inline 元素，则 containing block 为能够包含这个元素生成的第一个和最后一个 inline box \t的 padding box (除 margin, border 外的区域) 的最小矩形；\n\t2、否则,则由这个祖先元素的 padding box 构成。\n\t如果都找不到，则为 initial containing block。\n\n\t补充：\n\t1. static(默认的)/relative：简单说就是它的父元素的内容框（即去掉padding的部分）\n\t2. absolute: 向上找最近的定位为absolute/relative的元素\n\t3. fixed: 它的containing block一律为根元素(html/body)，根元素也是initial containing block\n\t\n##### CSS里的visibility属性有个collapse属性值是干嘛用的？在不同浏览器下以后什么区别？\n\n##### position跟display、margin collapse、overflow、float这些特性相互叠加后会怎么样？\n\n##### 对BFC规范(块级格式化上下文：block formatting context)的理解？\n\n\t（W3C CSS 2.1 规范中的一个概念,它是一个独立容器，决定了元素如何对其内容进行定位,以及与其他元素的关系和相\t互作用。）\n \t\t一个页面是由很多个 Box 组成的,元素的类型和 display 属性,决定了这个 Box 的类型。\n \t\t不同类型的 Box,会参与不同的 Formatting Context（决定如何渲染文档的容器）,因此Box内的元素会以不同的方式渲染,也就是说BFC内部的元素和外部的元素不会互相影响。\n \t\t\ncss定义的权重\n\n\t以下是权重的规则：标签的权重为1，class的权重为10，id的权重为100，以下例子是演示各种定义的权重值：\n\n\t/*权重为1*/\n\tdiv{\n\t}\n\t/*权重为10*/\n\t.class1{\n\t}\n\t/*权重为100*/\n\t#id1{\n\t}\n\t/*权重为100+1=101*/\n\t#id1 div{\n\t}\n\t/*权重为10+1=11*/\n\t.class1 div{\n\t}\n\t/*权重为10+10+1=21*/\n\t.class1 .class2 div{\n\t}\n\t\n\t如果权重相同，则最后定义的样式会起作用，但是应该避免这种情况出现\n\t\n请解释一下为什么需要清除浮动？清除浮动的方式\n\t\n清除浮动是为了清除使用浮动元素产生的影响。浮动的元素，高度会塌陷，而高度的塌陷使我们页面后面的布局不能正常显示。\n\n\t1、父级div定义height；\n\t2、父级div 也一起浮动；\n\t3、常规的使用一个class；\n    \t.clearfix:before, .clearfix:after {\n        \tcontent: \" \";\n        \tdisplay: table;\n    \t}\n    \t\t.clearfix:after {\n        \tclear: both;\n    \t}\n    \t.clearfix {\n        \t*zoom: 1;\n    \t}\n\n\t4、SASS编译的时候，浮动元素的父级div定义伪类:after\n    \t&:after,&:before{\n        \tcontent: \" \";\n        \tvisibility: hidden;\n        \tdisplay: block;\n        \theight: 0;\n        \tclear: both;\n    \t}\n\n解析原理：\n\t1) display:block 使生成的元素以块级元素显示,占满剩余空间;\n\t2) height:0 避免生成内容破坏原有布局的高度。\n\t3) visibility:hidden 使生成的内容不可见，并允许可能被生成内容盖住的内容可以进行点击和交互;\n\t4）通过 content:\".\"生成内容作为最后一个元素，至于content里面是点还是其他都是可以的，例如oocss里面就有\t经典的 content:\".\",有些版本可能content 里面内容为空,一丝冰凉是不推荐这样做的,firefox直到7.0 \tcontent:”\" 仍然会产生额外的空隙；\n\t5）zoom：1 触发IE hasLayout。\n\n\t通过分析发现，除了clear：both用来闭合浮动的，其他代码无非都是为了隐藏掉content生成的内容，这也就是其他版\t本的闭合浮动为什么会有font-size：0，line-height：0。\n\t\nzoom:1的清楚浮动原理?\n\n\t清楚浮动，触发hasLayout；\n\tZoom属性是IE浏览器的专有属性，它可以设置或检索对象的缩放比例。解决ie下比较奇葩的bug。\n\t譬如外边距（margin）的重叠，浮动清除，触发ie的haslayout属性等。\n\n\t来龙去脉大概如下：\n\t当设置了zoom的值之后，所设置的元素就会就会扩大或者缩小，高度宽度就会重新计算了，这里一旦改变zoom值时其实也\t会发生重新渲染，运用这个原理，也就解决了ie下子元素浮动时候父元素不随着自动扩大的问题。\n\n\tZoom属是IE浏览器的专有属性，火狐和老版本的webkit核心的浏览器都不支持这个属性。然而，zoom现在已经被逐步标\t准化，出现在 CSS 3.0 规范草案中。\n\n\t目前非ie由于不支持这个属性，它们又是通过什么属性来实现元素的缩放呢？\n\t可以通过css3里面的动画属性scale进行缩放。\n\t\n移动端的布局用过媒体查询吗？\n\n\t假设你现在正用一台显示设备来阅读这篇文章，同时你也想把它投影到屏幕上，或者打印出来， 而显示设备、屏幕投影和\t打印等这些媒介都有自己的特点，CSS就是为文档提供在不同媒介上展示的适配方法\n\t\n\t当媒体查询为真时，相关的样式表或样式规则会按照正常的级联规被应用。 当媒体查询返回假， 标签上带有媒体查询的\t样式表 仍将被下载 （只不过不会被应用）。\n\n\t包含了一个媒体类型和至少一个使用 宽度、高度和颜色等媒体属性来限制样式表范围的表达式。 CSS3加入的媒体查询使\t得无需修改内容便可以使样式应用于某些特定的设备范围。\n\n\t@media (min-width: 700px) and (orientation: landscape){ .sidebar { display: none; } }\n\t\n使用 CSS 预处理器吗？喜欢那个？\n\n\tSASS (SASS、LESS没有本质区别，只因为团队前端都是用的SASS)\n\tCSS优化、提高性能的方法有哪些？\n\n\t关键选择器（key selector）。选择器的最后面的部分为关键选择器（即用来匹配目标元素的部分）；\n\t如果规则拥有 ID 选择器作为其关键选择器，则不要为规则增加标签。过滤掉无关的规则（这样样式系统就不会浪费时间\t去匹配它们了）；\n\t提取项目的通用公有样式，增强可复用性，按模块编写组件；增强项目的协同开发性、可维护性和可扩展性;\n\t使用预处理工具或构建工具（gulp对css进行语法检查、自动补前缀、打包压缩、自动优雅降级）；\n\t\n浏览器是怎样解析CSS选择器的？\n\n\t样式系统从关键选择器开始匹配，然后左移查找规则选择器的祖先元素。\n\t只要选择器的子树一直在工作，样式系统就会持续左移，直到和规则匹配，或者是因为不匹配而放弃该规则。\n\t在网页中的应该使用奇数还是偶数的字体？为什么呢？\n\nmargin和padding分别适合什么场景使用？\n\n\tmargin是用来隔开元素与元素的间距；padding是用来隔开元素与内容的间隔。\n\tmargin用于布局分开元素使元素与元素互不相干；\n\tpadding用于元素与内容之间的间隔，让内容（文字）与（包裹）元素之间有一段\n\t抽离样式模块怎么写，说出思路，有无实践经验？[阿里航旅的面试题]\n\n元素竖向的百分比设定是相对于容器的高度吗？\n\n全屏滚动的原理是什么？用到了CSS的那些属性？\n\n什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE？\n\n视差滚动效果，如何给每页做不同的动画？（回到顶部，向下滑动要再次出现，和只出现一次分别怎么做？）\n\n\t::before 和 :after中双冒号和单冒号 有什么区别？解释一下这2个伪元素的作用。\n\n\t单冒号(:)用于CSS3伪类，双冒号(::)用于CSS3伪元素。（伪元素由双冒号和伪元素名称组成）\n\t双冒号是在当前规范中引入的，用于区分伪类和伪元素。不过浏览器需要同时支持旧的已经存在的伪元素写法，\n\t比如:first-line、:first-letter、:before、:after等，\n\t而新的在CSS3中引入的伪元素则不允许再支持旧的单冒号的写法。\n\n\t想让插入的内容出现在其它内容前，使用::before，否者，使用::after；\n\t在代码顺序上，::after生成的内容也比::before生成的内容靠后。\n\t如果按堆栈视角，::after生成的内容会在::before生成的内容之上\n\t\n如何修改chrome记住密码后自动填充表单的黄色背景 ？\n\n\tinput:-webkit-autofill, textarea:-webkit-autofill, select:-webkit-autofill {\n  \t\tbackground-color: rgb(250, 255, 189); /* #FAFFBD; */\n  \t\tbackground-image: none;\n  \t\tcolor: rgb(0, 0, 0);\n\t}\n\t\n你对line-height是如何理解的？\n\n设置元素浮动后，该元素的display值是多少？\n\n\t自动变成了 display:block\n\t\n怎么让Chrome支持小于12px 的文字？\n\n\t1、用图片：如果是内容固定不变情况下，使用将小于12px文字内容切出做图片，这样不影响兼容也不影响美观。\n\t2、使用12px及12px以上字体大小：为了兼容各大主流浏览器，建议设计美工图时候设置大于或等于12px的字体大小，如\t果是接单的这个时候就需要给客户讲解小于12px浏览器不兼容等事宜。\n\t3、继续使用小于12px字体大小样式设置：如果不考虑chrome可以不用考虑兼容，同时在设置小于12px对象设置-\twebkit-text-size-adjust:none，做到最大兼容考虑。\n\t4、使用12px以上字体：为了兼容、为了代码更简单 从新考虑权重下兼容性。        \n\t\n让页面里的字体变清晰，变细用CSS怎么做？\n\n\t-webkit-font-smoothing: antialiased;\n\t\nfont-style属性可以让它赋值为“oblique” oblique是什么意思？\n\n\t倾斜的字体样式\nposition:fixed;在android下无效怎么处理？\n\n\tfixed的元素是相对整个页面固定位置的，你在屏幕上滑动只是在移动这个所谓的viewport，\n\t原来的网页还好好的在那，fixed的内容也没有变过位置，\n\t所以说并不是iOS不支持fixed，只是fixed的元素不是相对手机屏幕固定的。\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, \tminimum-scale=1.0, user-scalable=no\"/>\n\t\n如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里）\n\n\t多数显示器默认频率是60Hz，即1秒刷新60次，所以理论上最小间隔为1/60＊1000ms ＝ 16.7ms\n\tdisplay:inline-block 什么时候会显示间隙？(携程)\n\n\t移除空格、使用margin负值、使用font-size:0、letter-spacing、word-spacing\n\t\noverflow: scroll时不能平滑滚动的问题怎么处理？\n\n\t有一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度。\n\npng、jpg、gif 这些图片格式解释一下，分别什么时候用。有没有了解过webp？\n\n什么是Cookie 隔离？（或者说：请求资源的时候不要让它带cookie怎么做）\n\n\t如果静态文件都放在主域名下，那静态文件请求的时候都带有的cookie的数据提交给server的，非常浪费流量，\n\t所以不如隔离开。\n\n\t因为cookie有域的限制，因此不能跨域提交请求，故使用非主要域名的时候，请求头中就不会带有cookie数据，\n\t这样可以降低请求头的大小，降低请求时间，从而达到降低整体请求延时的目的。\n\n\t同时这种方式不会将cookie传入Web Server，也减少了Web Server对cookie的处理分析环节，\n\t提高了webserver的http请求的解析速度。\n\t\nstyle标签写在body后与body前有什么区别？\n\n什么是CSS 预处理器 / 后处理器？\n\n\t- 预处理器例如：LESS、Sass、Stylus，用来预编译Sass或less，增强了css代码的复用性，\n  \t还有层级、mixin、变量、循环、函数等，具有很方便的UI组件模块化开发能力，极大的提高工作效率。\n\n\t- 后处理器例如：PostCSS，通常被视为在完成的样式表中根据CSS规范处理CSS，让其更有效；目前最常做的\n  \t是给CSS属性添加浏览器私有前缀，实现跨浏览器兼容性的问题。\n  \t\n#### JavaScript\n\n介绍js的基本数据类型。\n\n \tUndefined、Null、Boolean、Number、String、\n \tECMAScript 2015 新增:Symbol(创建后独一无二且不可变的数据类型 )\n \t\n介绍js有哪些内置对象？\n\n\tObject 是 JavaScript 中所有对象的父对象\n\n\t数据封装类对象：Object、Array、Boolean、Number 和 String\n\t其他对象：Function、Arguments、Math、Date、RegExp、Error\n\n\t参考：http://www.ibm.com/developerworks/cn/web/wa-objectsinjs-v1b/index.html\n\t\n说几条写JavaScript的基本规范？\n\n\t1.不要在同一行声明多个变量。\n\t2.请使用 ===/!==来比较true/false或者数值\n\t3.使用对象字面量替代new Array这种形式\n\t4.不要使用全局函数。\n\t5.Switch语句必须带有default分支\n\t6.函数不应该有时候有返回值，有时候没有返回值。\n\t7.For循环必须使用大括号\n\t8.If语句必须使用大括号\n\t9.for-in循环中的变量 应该使用var关键字明确限定作用域，从而避免作用域污染。\n\t\nJavaScript原型，原型链 ? 有什么特点？\n\n\t每个对象都会在其内部初始化一个属性，就是prototype(原型)，当我们访问一个对象的属性时，\n\t如果这个对象内部不存在这个属性，那么他就会去prototype里找这个属性，这个prototype又会有自己的\tprototype，\n\t于是就这样一直找下去，也就是我们平时所说的原型链的概念。\n\t关系：instance.constructor.prototype = instance.__proto__\n\n\t特点：\n\t\tJavaScript对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改\t\t原型时，与之相关的对象也会继承这一改变。\n\n\n \t当我们需要一个属性的时，Javascript引擎会先看当前对象中是否有这个属性， 如果没有的话，\n \t就会查找他的Prototype对象是否有这个属性，如此递推下去，一直检索到 Object 内建对象。\n    \tfunction Func(){}\n    \tFunc.prototype.name = \"Sean\";\n    \tFunc.prototype.getInfo = function() {\n      \t\treturn this.name;\n    \t}\n    \tvar person = new Func();//现在可以参考var person = Object.create(oldObject);\n    \tconsole.log(person.getInfo());//它拥有了Func的属性和方法\n    \t//\"Sean\"\n    \tconsole.log(Func.prototype);\n    \t// Func { name=\"Sean\", getInfo=function()}\n    \t\nJavaScript有几种类型的值？，你能画一下他们的内存图吗？\n\n\t栈：原始数据类型（Undefined，Null，Boolean，Number、String） \n\t堆：引用数据类型（对象、数组和函数）\n\n\t两种类型的区别是：存储位置不同；\n\t原始数据类型直接存储在栈(stack)中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存\t储；\n\t引用数据类型存储在堆(heap)中的对象,占据空间大、大小不固定。如果存储在栈中，将会影响程序运行的性能；引用数\t据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得\t地址后从堆中获得实体\n\n![Mou icon](https://camo.githubusercontent.com/d1947e624a0444d1032a85800013df487adc5550/687474703a2f2f7777772e77337363686f6f6c2e636f6d2e636e2f692f63745f6a735f76616c75652e676966)\n\nJavascript如何实现继承？\n\n\t1、构造继承\n\t2、原型继承\n\t3、实例继承\n\t4、拷贝继承\n\n\t原型prototype机制或apply和call方法去实现较简单，建议使用构造函数与原型混合方式。\n        function Parent(){\n            this.name = 'wang';\n        }\n\n        function Child(){\n            this.age = 28;\n        }\n        Child.prototype = new Parent();//继承了Parent，通过原型\n\n        var demo = new Child();\n        alert(demo.age);\n        alert(demo.name);//得到被继承的属性\nJavaScript继承的几种实现方式？\n\n参考：[<font style=\"color:blue\">构造函数的继承</font>](http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html)，[<font style=\"color:blue\">非构造函数的继承</font>](http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance_continued.html)；\n\t\njavascript创建对象的几种方式？\n\n\tjavascript创建对象简单的说,无非就是使用内置对象或各种自定义对象，当然还可以用JSON；但写法有很多种，也能\t混合使用。\n\n\n\t1、对象字面量的方式   \n\n    \tperson={firstname:\"Mark\",lastname:\"Yun\",age:25,eyecolor:\"black\"};\n\n\t2、用function来模拟无参的构造函数\n\n    \tfunction Person(){}\n    \tvar person=new Person();//定义一个function，如果使用new\"实例化\",该function可以看作是一个\t\tClass\n    \tperson.name=\"Mark\";\n    \tperson.age=\"25\";\n    \tperson.work=function(){\n    \talert(person.name+\" hello...\");\n    \t}\n    \tperson.work();\n\n\t3、用function来模拟参构造函数来实现（用this关键字定义构造的上下文属性）\n\n    function Pet(name,age,hobby){\n       this.name=name;//this作用域：当前对象\n       this.age=age;\n       this.hobby=hobby;\n       this.eat=function(){\n          alert(\"我叫\"+this.name+\",我喜欢\"+this.hobby+\",是个程序员\");\n       }\n    }\n    var maidou =new Pet(\"麦兜\",25,\"coding\");//实例化、创建对象\n    maidou.eat();//调用eat方法\n\n\n\t4、用工厂方式来创建（内置对象）\n\n     var wcDog =new Object();\n     wcDog.name=\"旺财\";\n     wcDog.age=3;\n     wcDog.work=function(){\n       alert(\"我是\"+wcDog.name+\",汪汪汪......\");\n     }\n     wcDog.work();\n\n\n\t5、用原型方式来创建\n\n    function Dog(){\n\n     }\n     Dog.prototype.name=\"旺财\";\n     Dog.prototype.eat=function(){\n     alert(this.name+\"是个吃货\");\n     }\n     var wangcai =new Dog();\n     wangcai.eat();\n\n\n\t6、用混合方式来创建\n\n    function Car(name,price){\n      this.name=name;\n      this.price=price; \n    }\n     Car.prototype.sell=function(){\n       alert(\"我是\"+this.name+\"，我现在卖\"+this.price+\"万元\");\n      }\n    var camry =new Car(\"凯美瑞\",27);\n    camry.sell();\n     \nJavascript作用链域?\n\n\t全局函数无法查看局部函数的内部细节，但局部函数可以查看其上层的函数细节，直至全局细节。\n\t当需要从局部函数查找某一属性或方法时，如果当前作用域没有找到，就会上溯到上层作用域查找，\n\t直至全局函数，这种组织形式就是作用域链。\n\t\n谈谈This对象的理解。\n\n\tthis总是指向函数的直接调用者（而非间接调用者）；\n\t如果有new关键字，this指向new出来的那个对象；\n\t在事件中，this指向触发这个事件的对象，特殊的是，IE中的attachEvent中的this总是指向全局对象Window；\n\t\neval是做什么的？\n\n\t它的功能是把对应的字符串解析成JS代码并运行；\n\t应该避免使用eval，不安全，非常耗性能（2次，一次解析成js语句，一次执行）。\n\t由JSON字符串转换为JSON对象的时候可以用eval，var obj =eval('('+ str +')');\n\t\n什么是window对象? 什么是document对象?\n\nnull，undefined 的区别？\n\n\tnull        表示一个对象是“没有值”的值，也就是值为“空”；\n\tundefined   表示一个变量没有被声明，不存在这个值，或者被声明了但没有被赋值；\n\n\tundefined不是一个有效的JSON，而null是；\n\tundefined的类型(typeof)是undefined；\n\tnull的类型(typeof)是object；\n\n\n\tJavascript将未赋值的变量默认值设为undefined；\n\tJavascript从来不会将变量设为null。它是用来让程序员表明某个用var声明的变量时没有值的。\n\n\ttypeof undefined\n    \t//\"undefined\"\n    \tundefined :是一个表示\"无\"的原始值或者说表示\"缺少值\"，就是此处应该有一个值，但是还没有定义。当尝试读\t取时会返回 undefined； \n    例如变量被声明了，但没有赋值时，就等于undefined\n\n\ttypeof null\n    \t//\"object\"\n    \tnull : 是一个对象(空对象, 没有任何属性和方法)；\n    \t例如作为函数的参数，表示该函数的参数不是对象；\n\n\t注意：\n    \t在验证null时，一定要使用　=== ，因为 == 无法分别 null 和　undefined\n    \tnull == undefined // true\n    \tnull === undefined // false\n\n\t再来一个例子：\n\n    \tnull\n    \tQ：有张三这个人么？\n    \tA：有！\n    \tQ：张三有房子么？\n    \tA：没有！\n\n    \tundefined\n    \tQ：有张三这个人么？\n    \tA：没有！\n参考阅读：[<font style=\"color:blue\">undefined与null的区别</font>](http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html)\n\n写一个通用的事件侦听器函数。\n\n    // event(事件)工具集，来源：github.com/markyun\n    markyun.Event = {\n        // 页面加载完成后\n        readyEvent : function(fn) {\n            if (fn==null) {\n                fn=document;\n            }\n            var oldonload = window.onload;\n            if (typeof window.onload != 'function') {\n                window.onload = fn;\n            } else {\n                window.onload = function() {\n                    oldonload();\n                    fn();\n                };\n            }\n        },\n        // 视能力分别使用dom0||dom2||IE方式 来绑定事件\n        // 参数： 操作的元素,事件名称 ,事件处理程序\n        addEvent : function(element, type, handler) {\n            if (element.addEventListener) {\n                //事件类型、需要执行的函数、是否捕捉\n                element.addEventListener(type, handler, false);\n            } else if (element.attachEvent) {\n                element.attachEvent('on' + type, function() {\n                    handler.call(element);\n                });\n            } else {\n                element['on' + type] = handler;\n            }\n        },\n        // 移除事件\n        removeEvent : function(element, type, handler) {\n            if (element.removeEventListener) {\n                element.removeEventListener(type, handler, false);\n            } else if (element.datachEvent) {\n                element.detachEvent('on' + type, handler);\n            } else {\n                element['on' + type] = null;\n            }\n        },\n        // 阻止事件 (主要是事件冒泡，因为IE不支持事件捕获)\n        stopPropagation : function(ev) {\n            if (ev.stopPropagation) {\n                ev.stopPropagation();\n            } else {\n                ev.cancelBubble = true;\n            }\n        },\n        // 取消事件的默认行为\n        preventDefault : function(event) {\n            if (event.preventDefault) {\n                event.preventDefault();\n            } else {\n                event.returnValue = false;\n            }\n        },\n        // 获取事件目标\n        getTarget : function(event) {\n            return event.target || event.srcElement;\n        },\n        // 获取event对象的引用，取到事件的所有信息，确保随时能使用event；\n        getEvent : function(e) {\n            var ev = e || window.event;\n            if (!ev) {\n                var c = this.getEvent.caller;\n                while (c) {\n                    ev = c.arguments[0];\n                    if (ev && Event == ev.constructor) {\n                        break;\n                    }\n                    c = c.caller;\n                }\n            }\n            return ev;\n        }\n    };\n[\"1\", \"2\", \"3\"].map(parseInt) 答案是多少？\n\n\tparseInt() 函数能解析一个字符串，并返回一个整数，需要两个参数 (val, radix)，\n\t其中 radix 表示要解析的数字的基数。【该值介于 2 ~ 36 之间，并且字符串中的数字不能大于radix才能正确返回\t数字结果值】;\n\t但此处 map 传了 3 个 (element, index, array),我们重写parseInt函数测试一下是否符合上面的规则。\n\n\tfunction parseInt(str, radix) {   \n    \treturn str+'-'+radix;   \n\t};  \n\tvar a=[\"1\", \"2\", \"3\"];  \n\ta.map(parseInt);  // [\"1-0\", \"2-1\", \"3-2\"] 不能大于radix\n\n\t因为二进制里面，没有数字3,导致出现超范围的radix赋值和不合法的进制解析，才会返回NaN\n\t所以[\"1\", \"2\", \"3\"].map(parseInt) 答案也就是：[1, NaN, NaN]\n\n\t详细解析：http://blog.csdn.net/justjavac/article/details/19473199\n事件是？IE与火狐的事件机制有什么区别？ 如何阻止冒泡？\n\n \t1. 我们在网页中的某个操作（有的操作对应多个事件）。例如：当我们点击一个按钮就会产生一个事件。是可以被 \tJavaScript 侦测到的行为。\n \t2. 事件处理机制：IE是事件冒泡、Firefox同时支持两种事件模型，也就是：捕获型事件和冒泡型事件；\n \t3. ev.stopPropagation();（旧ie的方法 ev.cancelBubble = true;）\n \n什么是闭包（closure），为什么要用它？\n\n\t闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一\t个函数访问这个函数的局部变量,利用闭包可以突破作用链域，将函数内部的变量和方法传递到外部。\n\n\t闭包的特性：\n\n\t\t1.函数内再嵌套函数\n\t\t2.内部函数可以引用外层的参数和变量\n\t\t3.参数和变量不会被垃圾回收机制回收\n\n\t//li节点的onclick事件都能正确的弹出当前被点击的li索引\n \t\t<ul id=\"testUL\">\n    \t\t<li> index = 0</li>\n    \t\t<li> index = 1</li>\n    \t\t<li> index = 2</li>\n    \t\t<li> index = 3</li>\n\t\t</ul>\n\t<script type=\"text/javascript\">\n    \tvar nodes = document.getElementsByTagName(\"li\");\n    \tfor(i = 0;i<nodes.length;i+= 1){\n        \tnodes[i].onclick = (function(i){\n                  return function() {\n                     console.log(i);\n                  } //不用闭包的话，值每次都是4\n                })(i);\n    \t}\n\t</script>\n\n\n\n\t执行say667()后,say667()闭包内部变量会存在,而闭包内部函数的内部变量不会存在\n\t使得Javascript的垃圾回收机制GC不会收回say667()所占用的资源\n\t因为say667()的内部函数的执行需要依赖say667()中的变量\n\t这是对闭包作用的非常直白的描述\n\n  \tfunction say667() {\n    \t// Local variable that ends up within closure\n    \tvar num = 666;\n    \tvar sayAlert = function() {\n        \talert(num);\n    \t}\n    \tnum++;\n    \treturn sayAlert;\n\t}\n\n \tvar sayAlert = say667();\n \tsayAlert()//执行结果应该弹出的667\n\njavascript 代码中的\"use strict\";是什么意思 ? 使用它区别是什么？\n\n\tuse strict是一种ECMAscript 5 添加的（严格）运行模式,这种模式使得 Javascript 在更严格的条件下运行,\n\n\t使JS编码更加规范化的模式,消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为。\n\t默认支持的糟糕特性都会被禁用，比如不能用with，也不能在意外的情况下给全局变量赋值;\n\t全局变量的显示声明,函数必须声明在顶层，不允许在非函数代码块内声明函数,arguments.callee也不允许使用；\n\t消除代码运行的一些不安全之处，保证代码运行的安全,限制函数中的arguments修改，严格模式下的eval函数的行为和\t非严格模式的也不相同;\n\n\t提高编译器效率，增加运行速度；\n\t为未来新版本的Javascript标准化做铺垫。\n\t\n如何判断一个对象是否属于某个类？\n\n  \t使用instanceof （待完善）\n   \t\tif(a instanceof Person){\n       \t\talert('yes');\n   \t\t}\nnew操作符具体干了什么呢?\n\n     1、创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。\n     2、属性和方法被加入到 this 引用的对象中。\n     3、新创建的对象由 this 所引用，并且最后隐式的返回 this 。\n\n\tvar obj  = {};\n\tobj.__proto__ = Base.prototype;\n\tBase.call(obj);\n\t\n用原生JavaScript的实现过什么功能吗？\n\nJavascript中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？\n\n\thasOwnProperty\n\n\tjavaScript中hasOwnProperty函数方法是返回一个布尔值，指出一个对象是否具有指定名称的属性。此方法无法检查\t该对象的原型链中是否具有该属性；该属性必须是对象本身的一个成员。\n\t使用方法：\n\tobject.hasOwnProperty(proName)\n\t其中参数object是必选项。一个对象的实例。\n\tproName是必选项。一个属性名称的字符串值。\n\n如果 object 具有指定名称的属性，那么JavaScript中hasOwnProperty函数方法返回 true，反之则返回 false。\nJSON 的了解？\n\n\tJSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。\n\t它是基于JavaScript的一个子集。数据格式简单, 易于读写, 占用带宽小\n\t如：{\"age\":\"12\", \"name\":\"back\"}\n\n\tJSON字符串转换为JSON对象:\n\tvar obj =eval('('+ str +')');\n\tvar obj = str.parseJSON();\n\tvar obj = JSON.parse(str);\n\n\tJSON对象转换为JSON字符串：\n\tvar last=obj.toJSONString();\n\tvar last=JSON.stringify(obj);\n#  \n\t\t[].forEach.call($$(\"*\"),function(a){a.style.outline=\"1px solid #\"+\t(~~(Math.random()*(1<<24))).toString(16)}) \n\t能解释一下这段代码的意思吗？\n\njs延迟加载的方式有哪些？\n\n\tdefer和async、动态创建DOM方式（用得最多）、按需异步载入js\n\t\nAjax 是什么? 如何创建一个Ajax？\n\n\tajax的全称：Asynchronous Javascript And XML。\n\t异步传输+js+xml。\n\t所谓异步，在这里简单地解释就是：向服务器发送请求的时候，我们不必等待结果，而是可以同时做其他的事情，等到有了\t结果它自己会根据设定进行后续操作，与此同时，页面是不会发生整页刷新的，提高了用户体验。\n\n\t(1)创建XMLHttpRequest对象,也就是创建一个异步调用对象\n\t(2)创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息\n\t(3)设置响应HTTP请求状态变化的函数\n\t(4)发送HTTP请求\n\t(5)获取异步调用返回的数据\n\t(6)使用JavaScript和DOM实现局部刷新\n\t\n同步和异步的区别?\n\n\t同步的概念应该是来自于OS中关于同步的概念:不同进程为协同完成某项工作而在先后次序上调整(通过阻塞,唤醒等方\t式).同步强调的是顺序性.谁先谁后.异步则不存在这种顺序性.\n\n\t同步：浏览器访问服务器请求，用户看得到页面刷新，重新发请求,等请求完，页面刷新，新内容出现，用户看到新内容,进行下一步操作。\n\n\t异步：浏览器访问服务器请求，用户正常操作，浏览器后端进行请求。等请求完，页面不刷新，新内容也会出现，用户看到新内容。\n\n（待完善）\n\n如何解决跨域问题?\n\n\tjsonp、 iframe、window.name、window.postMessage、服务器上设置代理页面\n\t\n页面编码和被请求的资源编码如果不一致如何处理？\n\n模块化开发怎么做？\n\n[立即执行函数](http://benalman.com/news/2010/11/immediately-invoked-function-expression/),不暴露私有成员\n\n    var module1 = (function(){\n    　　　　var _count = 0;\n    　　　　var m1 = function(){\n    　　　　　　//...\n    　　　　};\n    　　　　var m2 = function(){\n    　　　　　　//...\n    　　　　};\n    　　　　return {\n    　　　　　　m1 : m1,\n    　　　　　　m2 : m2\n    　　　　};\n    　　})();\n（待完善）\n\nAMD（Modules/Asynchronous-Definition）、CMD（Common Module Definition）规范区别？\n\nAMD 规范在这里：[https://github.com/amdjs/amdjs-api/wiki/AMD](https://github.com/amdjs/amdjs-api/wiki/AMD)\n\nCMD 规范在这里：[https://github.com/seajs/seajs/issues/242](https://github.com/seajs/seajs/issues/242)\n\n\tAsynchronous Module Definition，异步模块定义，所有的模块将被异步加载，模块加载不影响后面语句运行。所\t有依赖某些模块的语句均放置在回调函数中。\n\n \t区别：\n\n    1. 对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible.\n    2. CMD 推崇依赖就近，AMD 推崇依赖前置。看代码：\n\n\t// CMD\n\tdefine(function(require, exports, module) {\n    \tvar a = require('./a')\n    \ta.doSomething()\n    \t// 此处略去 100 行\n    \tvar b = require('./b') // 依赖可以就近书写\n    \tb.doSomething()\n    \t// ...\n\t})\n\n\t// AMD 默认推荐\n\tdefine(['./a', './b'], function(a, b) { // 依赖必须一开始就写好\n\t    a.doSomething()\n    \t// 此处略去 100 行\n    \tb.doSomething()\n    \t// ...\n\t})\nrequireJS的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何 缓存的？）\n\n\t参考：http://annn.me/how-to-realize-cmd-loader/\n\t\nJS模块加载器的轮子怎么造，也就是如何实现一个模块加载器？\n\n谈一谈你对ECMAScript6的了解？\n\nECMAScript6 怎么写class么，为什么会出现class这种东西?\n\n异步加载JS的方式有哪些？\n\n  \t(1) defer，只支持IE\n\n  \t(2) async：\n\n  \t(3) 创建script，插入到DOM中，加载完毕后callBack\n  \t\ndocumen.write和 innerHTML的区别\n\n\tdocument.write只能重绘整个页面\n\n\tinnerHTML可以重绘页面的一部分\n\t\nDOM操作——怎样添加、移除、移动、复制、创建和查找节点?\n\n\t（1）创建新节点\n\t  createDocumentFragment()    //创建一个DOM片段\n \t  createElement()   //创建一个具体的元素\n \t  createTextNode()   //创建一个文本节点\n\t（2）添加、移除、替换、插入\n\t  appendChild()\n\t  removeChild()\n\t  replaceChild()\n\t  insertBefore() //在已有的子节点前插入一个新的子节点\n\t（3）查找\n\t  getElementsByTagName()    //通过标签名称\n\t  getElementsByName()    //通过元素的Name属性的值(IE容错能力较强，会得到一个数组，其中包括id等于\tname值的)\n  \tgetElementById()    //通过元素Id，唯一性\n  \t\n.call() 和 .apply() 的区别？\n\n  \t例子中用 add 来替换 sub，add.call(sub,3,1) == add(3,1) ，所以运行结果为：alert(4);\n\n  \t注意：js 中的函数其实是对象，函数名是对 Function 对象的引用。\n\n    function add(a,b)\n    {\n        alert(a+b);\n    }\n\n    function sub(a,b)\n    {\n        alert(a-b);\n    }\n\n    add.call(sub,3,1);\n    \n数组和对象有哪些原生方法，列举一下？\n\nJS 怎么实现一个类。怎么实例化这个类\n\nJavaScript中的作用域与变量声明提升？\n\n如何编写高性能的Javascript？\n\n那些操作会造成内存泄漏？\n\nJQuery的源码看过吗？能不能简单概况一下它的实现原理？\n\njQuery.fn的init方法返回的this指的是什么对象？为什么要返回this？\n\njquery中如何将数组转化为json字符串，然后再转化回来？\n\njQuery 的属性拷贝(extend)的实现原理是什么，如何实现深拷贝？\n\njquery.extend 与 jquery.fn.extend的区别？\n\njQuery 的队列是如何实现的？队列可以用在哪些地方？\n\n谈一下Jquery中的bind(),live(),delegate(),on()的区别？\n\nJQuery一个对象可以同时绑定多个事件，这是如何实现的？\n\n是否知道自定义事件。jQuery里的fire函数是什么意思，什么时候用？\n\njQuery 是通过哪个方法和 Sizzle 选择器结合的？（jQuery.fn.find()进入Sizzle）\n\n针对 jQuery性能的优化方法？\n\nJquery与jQuery UI 有啥区别？\n\n\t*jQuery是一个js库，主要提供的功能是选择器，属性修改和事件绑定等等。\n\n\t*jQuery UI则是在jQuery的基础上，利用jQuery的扩展性，设计的插件。\n \t提供了一些常用的界面元素，诸如对话框、拖动行为、改变大小行为等等\n \t\nJQuery的源码看过吗？能不能简单说一下它的实现原理？\n\njquery 中如何将数组转化为json字符串，然后再转化回来？\n\njQuery中没有提供这个功能，所以你需要先编写两个jQuery的扩展：\n\n    $.fn.stringifyArray = function(array) {\n        return JSON.stringify(array)\n    }\n\n    $.fn.parseArray = function(array) {\n        return JSON.parse(array)\n    }\n\n    然后调用：\n    $(\"\").stringifyArray(array)\n     \t\n\njQuery和Zepto的区别？各自的使用场景？\n\n针对 jQuery 的优化方法？\n\n\t*基于Class的选择性的性能相对于Id选择器开销很大，因为需遍历所有DOM元素。\n\n\t*频繁操作的DOM，先缓存起来再操作。用Jquery的链式调用更好。\n \t比如：var str=$(\"a\").attr(\"href\");\n\n\t*for (var i = size; i < arr.length; i++) {}\n \tfor 循环每一次循环都查找了数组 (arr) 的.length 属性，在开始循环的时候设置一个变量来存储这个数字，可以让\t循环跑得更快：\n \tfor (var i = size, length = arr.length; i < length; i++) {}\n \t\u0010\u0010\u0010\u0010\u0010\nZepto的点透问题如何解决？\n\njQueryUI如何自定义组件?\n\n需求：实现一个页面操作不会整页刷新的网站，并且能在浏览器前进、后退时正确响应。给出你的技术实现方案？\n\n如何判断当前脚本运行在浏览器还是node环境中？（阿里）\n\n通过判断Global对象是否为window，如果不为window，当前脚本没有运行在浏览器中\n移动端最小触控区域是多大？\n\njQuery 的 slideUp动画 ，如果目标元素是被外部事件驱动, 当鼠标快速地连续触发外部元素事件, 动画会滞后的反复执行，该如何处理呢?\n\n把 Script 标签 放在页面的最底部的body封闭之前 和封闭之后有什么区别？浏览器会如何解析它们？\n\n移动端的点击事件的有延迟，时间是多久，为什么会有？ 怎么解决这个延时？（click 有 300ms 延迟,为了实现safari的双击事件的设计，浏览器要知道你是不是要双击操作。）\n\n知道各种JS框架(Angular, Backbone, Ember, React, Meteor, Knockout...)么? 能讲出他们各自的优点和缺点么?\n\nUnderscore 对哪些 JS 原生对象进行了扩展以及提供了哪些好用的函数方法？\n\n解释JavaScript中的作用域与变量声明提升？\n\n那些操作会造成内存泄漏？\n\n\t内存泄漏指任何对象在您不再拥有或需要它之后仍然存在。\n\t垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为 0（没有其他对象引用\t过该对象），或对该对象的惟一引用是循环的，那么该对象的内存即可回收。\n\n\tsetTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏。\n\t闭包、控制台日志、循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）\n\t\nJQuery一个对象可以同时绑定多个事件，这是如何实现的？\n\nNode.js的适用场景？\n\n(如果会用node)知道route, middleware, cluster, nodemon, pm2, server-side rendering么?\n\n解释一下 Backbone 的 MVC 实现方式？\n\n什么是“前端路由”?什么时候适合使用“前端路由”? “前端路由”有哪些优点和缺点?\n\n知道什么是webkit么? 知道怎么用浏览器的各种工具来调试和debug代码么?\n\n如何测试前端代码么? 知道BDD, TDD, Unit Test么? 知道怎么测试你的前端工程么(mocha, sinon, jasmin, qUnit..)?\n\n前端templating(Mustache, underscore, handlebars)是干嘛的, 怎么用?\n\n简述一下 Handlebars 的基本用法？\n\n简述一下 Handlerbars 的对模板的基本处理流程， 如何编译的？如何缓存的？\n\n用js实现千位分隔符?(来源：[前端农民工](http://div.io/topic/744)，提示：正则+replace)\n\n\t参考：http://www.tuicool.com/articles/ArQZfui\n\t\tfunction commafy(num) {\n    \t\treturn num && num\n        \t\t.toString()\n        \t\t.replace(/(\\d)(?=(\\d{3})+\\.)/g, function($0, $1) {\n            \treturn $1 + \",\";\n        });\n\t}\nconsole.log(commafy(1234567.90)); //1,234,567.90\n\n检测浏览器版本版本有哪些方式？\n\n\t功能检测、userAgent特征检测\n\n\t比如：navigator.userAgent\n\t//\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36\n\t  (KHTML, like Gecko) Chrome/41.0.2272.101 Safari/537.36\"\n\t  \nWhat is a Polyfill?\n\n\tpolyfill 是“在旧版浏览器上复制标准 API 的 JavaScript 补充”,可以动态地加载 JavaScript 代码或库，在不\t支持这些标准 API 的浏览器中模拟它们。\n\t例如，geolocation（地理位置）polyfill 可以在 navigator 对象上添加全局的 geolocation 对象，还能添加 \tgetCurrentPosition 函数以及“坐标”回调对象，\n\t所有这些都是 W3C 地理位置 API 定义的对象和函数。因为 polyfill 模拟标准 API，所以能够以一种面向所有浏览\t器未来的方式针对这些 API 进行开发，\n\t一旦对这些 API 的支持变成绝对大多数，则可以方便地去掉 polyfill，无需做任何额外工作。\n\t\n做的项目中，有没有用过或自己实现一些 polyfill 方案（兼容性处理方案）？\n\n\t比如： html5shiv、Geolocation、Placeholder \n\t\n我们给一个dom同时绑定两个点击事件，一个用捕获，一个用冒泡。会执行几次事件，会先执行冒泡还是捕获？\n\n使用JS实现获取文件扩展名？\n\n\tfunction getFileExtension(filename) {\n  \t\treturn filename.slice((filename.lastIndexOf(\".\") - 1 >>> 0) + 2);\n\t}   \n\n\tString.lastIndexOf() 方法返回指定值（本例中的'.'）在调用该方法的字符串中最后出现的位置，如果没找到则返\t回 -1。\n\t对于'filename'和'.hiddenfile'，lastIndexOf的返回值分别为0和-1无符号右移操作符(»>) 将-1转换为\t4294967295，将-2转换为4294967294，这个方法可以保证边缘情况时文件名不变。\n\tString.prototype.slice() 从上面计算的索引处提取文件的扩展名。如果索引比文件名的长度大，结果为\"\"。\nECMAScript6 相关\n\nObject.is() 与原来的比较操作符“ ===”、“ ==”的区别？\n\n\t两等号判等，会在比较时进行类型转换；\n\t三等号判等(判断严格)，比较时不进行隐式类型转换,（类型不同则会返回false）； \n\n\tObject.is 在三等号判等的基础上特别处理了 NaN 、-0 和 +0 ，保证 -0 和 +0 不再相同，\n\t但 Object.is(NaN, NaN) 会返回 true.\n\n\tObject.is 应被认为有其特殊的用途，而不能用它认为它比其它的相等对比更宽松或严格。\n前端框架相关\n\nreact-router 路由系统的实现原理？\n\nReact中如何解决第三方类库的问题?\n\n其他问题\n\n原来公司工作流程是怎么样的，如何与其他人协作的？如何夸部门合作的？\n\n你遇到过比较难的技术问题是？你是如何解决的？\n\n设计模式 知道什么是singleton, factory, strategy, decrator么?\n\n常使用的库有哪些？常用的前端开发工具？开发过什么应用或组件？\n\n页面重构怎么操作？\n\n\t网站重构：在不改变外部行为的前提下，简化结构、添加可读性，而在网站前端保持一致的行为。\n\t也就是说是在不改变UI的情况下，对网站进行优化，在扩展的同时保持一致的UI。\n\n\t对于传统的网站来说重构通常是：\n\n\t表格(table)布局改为DIV+CSS\n\t使网站前端兼容于现代浏览器(针对于不合规范的CSS、如对IE6有效的)\n\t对于移动平台的优化\n\t针对于SEO进行优化\n\t深层次的网站重构应该考虑的方面\n\t\n\t减少代码间的耦合\n\t让代码保持弹性\n\t严格按规范编写代码\n\t设计可扩展的API\n\t代替旧有的框架、语言(如VB)\n\t增强用户体验\n\t通常来说对于速度的优化也包含在重构中\n\n\t压缩JS、CSS、image等前端资源(通常是由服务器来解决)\n\t程序的性能优化(如数据读写)\n\t采用CDN来加速资源加载\n\t对于JS DOM的优化\n\tHTTP服务器的文件缓存\n\t\n列举IE与其他浏览器不一样的特性？\n\n\t1、事件不同之处：\n\n    触发事件的元素被认为是目标（target）。而在 IE 中，目标包含在 event 对象的 srcElement 属性；\n\n    获取字符代码、如果按键代表一个字符（shift、ctrl、alt除外），IE 的 keyCode 会返回字符代码（Unicode），DOM 中按键的代码和字符是分离的，要获取字符代码，需要使用 charCode 属性；\n\n    阻止某个事件的默认行为，IE 中阻止某个事件的默认行为，必须将 returnValue 属性设置为 false，Mozilla 中，需要调用 preventDefault() 方法；\n\n    停止事件冒泡，IE 中阻止事件进一步冒泡，需要设置 cancelBubble 为 true，Mozzilla 中，需要调用 stopPropagation()；\n    \n99%的网站都需要被重构是那本书上写的？\n\n\t网站重构：应用web标准进行设计（第2版）\n\n什么叫优雅降级和渐进增强？\n\n\t优雅降级：Web站点在所有新式浏览器中都能正常工作，如果用户使用的是老式浏览器，则代码会针对旧版本的IE进行降\t级处理了,使之在旧式浏览器上以某种形式降级体验却不至于完全不能用。\n\t如：border-shadow\n\t\n\t渐进增强：从被所有浏览器支持的基本功能开始，逐步地添加那些只有新版本浏览器才支持的功能,向页面增加不影响基础\t浏览器的额外样式和功能的。当浏览器支持时，它们会自动地呈现出来并发挥作用。\n\t如：默认使用flash上传，但如果浏览器支持 HTML5 的文件上传功能，则使用HTML5实现更好的体验；\n\t\n是否了解公钥加密和私钥加密?\n\t\n\t一般情况下是指私钥用于对数据进行签名，公钥用于对签名进行验证;\n\tHTTP网站在浏览器端用公钥加密敏感数据，然后在服务器端再用私钥解密。\n\t\nWEB应用从服务器主动推送Data到客户端有那些方式？\n\n\thtml5提供的Websocket\n\t不可见的iframe\n\tWebSocket通过Flash\n\tXHR长时间连接\n\tXHR Multipart Streaming\n\t<script>标签的长时间连接(可跨域)\n\t\n对Node的优点和缺点提出了自己的看法？\n\n\t*（优点）因为Node是基于事件驱动和无阻塞的，所以非常适合处理并发请求，\n\t  因此构建在Node上的代理服务器相比其他技术实现（如Ruby）的服务器表现要好得多。\n\t  此外，与Node代理服务器交互的客户端代码是由javascript语言编写的，\n\t  因此客户端和服务器端都用同一种语言编写，这是非常美妙的事情。\n\n\t*（缺点）Node是一个相对新的开源项目，所以不太稳定，它总是一直在变，\n\t  而且缺少足够多的第三方库支持。看起来，就像是Ruby/Rails当年的样子。\n\t  \n你有用过哪些前端性能优化的方法？\n\n  \t（1） 减少http请求次数：CSS Sprites, JS、CSS源码压缩、图片大小控制合适；网页Gzip，CDN托管，data缓\t存 ，图片服务器。\n\n    （2） 前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数\n\n  \t（3） 用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能。\n\n  \t（4） 当需要设置的样式很多时设置className而不是直接操作style。\n\n  \t（5） 少用全局变量、缓存DOM节点查找的结果。减少IO读取操作。\n\n  \t（6） 避免使用CSS Expression（css表达式)又称Dynamic properties(动态属性)。\n\n  \t（7） 图片预加载，将样式表放在顶部，将脚本放在底部  加上时间戳。\n\n  \t（8） 避免在页面的主体布局中使用table，table要等其中的内容完全下载之后才会显示出来，显示比div+css布局\t慢。\n\t  对普通的网站有一个统一的思路，就是尽量向前端优化、减少数据库操作、减少磁盘IO。向前端优化指的是，在不影响\t功能和体验的情况下，能在浏览器执行的不要在服务端执行，能在缓存服务器上直接返回的不要到应用服务器，程序能直接\t取得的结果不要到外部取得，本机内能取得的数据不要到远程取，内存能取到的不要到磁盘取，缓存中有的不要去数据库查\t询。减少数据库操作指减少更新次数、缓存结果减少查询次数、将数据库执行的操作尽可能的让你的程序完成（例如join\t查询），减少磁盘IO指尽量不使用文件系统作为缓存、减少读写文件次数等。程序优化永远要优化慢的部分，换语言是无\t法“优化”的。\n\t  \u0010\nhttp状态码有那些？分别代表是什么意思？\n\n    简单版\n    [\n        100  Continue   继续，一般在发送post请求时，已发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息\n        200  OK         正常返回信息\n        201  Created    请求成功并且服务器创建了新的资源\n        202  Accepted   服务器已接受请求，但尚未处理\n        301  Moved Permanently  请求的网页已永久移动到新位置。\n        302 Found       临时性重定向。\n        303 See Other   临时性重定向，且总是使用 GET 请求新的 URI。\n        304  Not Modified 自从上次请求后，请求的网页未修改过。\n\n        400 Bad Request  服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。\n        401 Unauthorized 请求未授权。\n        403 Forbidden   禁止访问。\n        404 Not Found   找不到如何与 URI 相匹配的资源。\n\n        500 Internal Server Error  最常见的服务器端错误。\n        503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）。\n    ]\n\n  \t完整版\n  \t1**(信息类)：表示接收到请求并且继续处理\n    \t100——客户必须继续发出请求\n    \t101——客户要求服务器根据请求转换HTTP协议版本\n\n  \t2**(响应成功)：表示动作被成功接收、理解和接受\n    \t200——表明该请求被成功地完成，所请求的资源发送回客户端\n    \t201——提示知道新文件的URL\n    \t202——接受和处理、但处理未完成\n    \t203——返回信息不确定或不完整\n    \t204——请求收到，但返回信息为空\n    \t205——服务器完成了请求，用户代理必须复位当前已经浏览过的文件\n    \t206——服务器已经完成了部分用户的GET请求\n\n  \t3**(重定向类)：为了完成指定的动作，必须接受进一步处理\n  \t  300——请求的资源可在多处得到\n  \t  301——本网页被永久性转移到另一个URL\n   \t  302——请求的网页被转移到一个新的地址，但客户访问仍继续通过原始URL地址，重定向，新的URL会在response中的\tLocation中返回，浏览器将会使用新的URL发出新的Request。\n    \t303——建议客户访问其他URL或访问方式\n    \t304——自从上次请求后，请求的网页未修改过，服务器返回此响应时，不会返回网页内容，代表上次的文档已经被缓\t存了，还可以继续使用\n    \t305——请求的资源必须从服务器指定的地址得到\n    \t306——前一版本HTTP中使用的代码，现行版本中不再使用\n    \t307——申明请求的资源临时性删除\n\n  \t4**(客户端错误类)：请求包含错误语法或不能正确执行\n    \t400——客户端请求有语法错误，不能被服务器所理解\n    \t401——请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用\n    \tHTTP 401.1 - 未授权：登录失败\n    　　HTTP 401.2 - 未授权：服务器配置问题导致登录失败\n    　　HTTP 401.3 - ACL 禁止访问资源\n    　　HTTP 401.4 - 未授权：授权被筛选器拒绝\n    HTTP 401.5 - 未授权：ISAPI 或 CGI 授权失败\n    402——保留有效ChargeTo头响应\n    403——禁止访问，服务器收到请求，但是拒绝提供服务\n    HTTP 403.1 禁止访问：禁止可执行访问\n    　　HTTP 403.2 - 禁止访问：禁止读访问\n    　　HTTP 403.3 - 禁止访问：禁止写访问\n    　　HTTP 403.4 - 禁止访问：要求 SSL\n    　　HTTP 403.5 - 禁止访问：要求 SSL 128\n    　　HTTP 403.6 - 禁止访问：IP 地址被拒绝\n    　　HTTP 403.7 - 禁止访问：要求客户证书\n    　　HTTP 403.8 - 禁止访问：禁止站点访问\n    　　HTTP 403.9 - 禁止访问：连接的用户过多\n    　　HTTP 403.10 - 禁止访问：配置无效\n    　　HTTP 403.11 - 禁止访问：密码更改\n    　　HTTP 403.12 - 禁止访问：映射器拒绝访问\n    　　HTTP 403.13 - 禁止访问：客户证书已被吊销\n    　　HTTP 403.15 - 禁止访问：客户访问许可过多\n    　　HTTP 403.16 - 禁止访问：客户证书不可信或者无效\n    HTTP 403.17 - 禁止访问：客户证书已经到期或者尚未生效\n    404——一个404错误表明可连接服务器，但服务器无法取得所请求的网页，请求资源不存在。eg：输入了错误的URL\n    405——用户在Request-Line字段定义的方法不允许\n    406——根据用户发送的Accept拖，请求资源不可访问\n    407——类似401，用户必须首先在代理服务器上得到授权\n    408——客户端没有在用户指定的饿时间内完成请求\n    409——对当前资源状态，请求不能完成\n    410——服务器上不再有此资源且无进一步的参考地址\n    411——服务器拒绝用户定义的Content-Length属性请求\n    412——一个或多个请求头字段在当前请求中错误\n    413——请求的资源大于服务器允许的大小\n    414——请求的资源URL长于服务器允许的长度\n    415——请求资源不支持请求项目格式\n    416——请求中包含Range请求头字段，在当前请求资源范围内没有range指示值，请求也不包含If-Range请求头字段\n    417——服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求长。\n\n  \t5**(服务端错误类)：服务器不能正确执行一个正确的请求\n    \tHTTP 500 - 服务器遇到错误，无法完成请求\n    　　HTTP 500.100 - 内部服务器错误 - ASP 错误\n    　　HTTP 500-11 服务器关闭\n    　　HTTP 500-12 应用程序重新启动\n    　　HTTP 500-13 - 服务器太忙\n    　　HTTP 500-14 - 应用程序无效\n    　　HTTP 500-15 - 不允许请求 global.asa\n    　　Error 501 - 未实现\n \t    HTTP 502 - 网关错误\n  \t\tHTTP 503：由于超载或停机维护，服务器目前无法使用，一段时间后可能恢复正常\n  \t\t\n一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？（流程说的越详细越好）\n\n  \t注：这题胜在区分度高，知识点覆盖广，再不懂的人，也能答出几句，\n  \t而高手可以根据自己擅长的领域自由发挥，从URL规范、HTTP协议、DNS、CDN、数据库查询、\n  \t到浏览器流式解析、CSS规则构建、layout、paint、onload/domready、JS执行、JS API绑定等等；\n\n  \t详细版：\n    \t1、浏览器会开启一个线程来处理这个请求，对 URL 分析判断如果是 http 协议就按照 Web 方式来处理;\n    \t2、调用浏览器内核中的对应方法，比如 WebView 中的 loadUrl 方法;\n    \t3、通过DNS解析获取网址的IP地址，设置 UA 等信息发出第二个GET请求;\n    \t4、进行HTTP协议会话，客户端发送报头(请求报头);\n    \t5、进入到web服务器上的 Web Server，如 Apache、Tomcat、Node.JS 等服务器;\n    \t6、进入部署好的后端应用，如 PHP、Java、JavaScript、Python 等，找到对应的请求处理;\n    \t7、处理结束回馈报头，此处如果浏览器访问过，缓存上有对应资源，会与服务器最后修改时间对比，一致则返回304;\n    \t8、浏览器开始下载html文档(响应报头，状态码200)，同时使用缓存;\n    \t9、文档树建立，根据标记请求所需指定MIME类型的文件（比如css、js）,同时设置了cookie;\n    \t10、页面开始渲染DOM，JS根据DOM API操作DOM,执行事件绑定等，页面显示完成。\n\n  \t简洁版：\n    \t浏览器根据请求的URL交给DNS域名解析，找到真实IP，向服务器发起请求；\n    \t服务器交给后台处理完成后返回数据，浏览器接收文件（HTML、JS、CSS、图象等）；\n    \t浏览器对加载到的资源（HTML、JS、CSS等）进行语法解析，建立相应的内部数据结构（如HTML的DOM）；\n    \t载入解析到的资源文件，渲染页面，完成。\n    \t\n部分地区用户反应网站很卡，请问有哪些可能性的原因，以及解决方法？\n\n从打开app到刷新出内容，整个过程中都发生了什么，如果感觉慢，怎么定位问题，怎么解决?\n\n除了前端以外还了解什么其它技术么？你最最厉害的技能是什么？\n\n你用的得心应手用的熟练地编辑器&开发环境是什么样子？\n\n\tSublime Text 3 + 相关插件编写前端代码\n\tGoogle chrome 、Mozilla Firefox浏览器 +firebug 兼容测试和预览页面UI、动画效果和交互功能\n\tNode.js+Gulp\n\tgit 用于版本控制和Code Review\n\t\n对前端工程师这个职位是怎么样理解的？它的前景会怎么样？\n\n\t前端是最贴近用户的程序员，比后端、数据库、产品经理、运营、安全都近。\n\t1、实现界面交互\n\t2、提升用户体验\n\t3、有了Node.js，前端可以实现服务端的一些事情\n\n\n\t前端是最贴近用户的程序员，前端的能力就是能让产品从 90分进化到 100 分，甚至更好，\n\n\t参与项目，快速高质量完成实现效果图，精确到1px；\n\n\t与团队成员，UI设计，产品经理的沟通；\n\n\t做好的页面结构，页面重构和用户体验；\n\n\t处理hack，兼容、写出优美的代码格式；\n\n\t针对服务器的优化、拥抱最新前端技术。\n\t\n你怎么看待Web App 、hybrid App、Native App？\n\n你移动端前端开发的理解？（和 Web 前端开发的主要区别是什么？）\n\n你对加班的看法？\n\n\t加班就像借钱，原则应当是------救急不救穷\n\t\n平时如何管理你的项目？\n\n\t先期团队必须确定好全局样式（globe.css），编码模式(utf-8) 等；\n\n\t编写习惯必须一致（例如都是采用继承式的写法，单样式都写成一行）；\n\n\t标注样式编写人，各模块都及时标注（标注关键样式调用的地方）；\n\n\t页面进行标注（例如 页面 模块 开始和结束）；\n\n\tCSS跟HTML 分文件夹并行存放，命名都得统一（例如style.css）；\n\n\tJS 分文件夹存放 命名以该JS功能为准的英文翻译。\n\n\t图片采用整合的 images.png png8 格式文件使用 尽量整合在一起使用方便将来的管理\n\t\n如何设计突发大规模并发架构？\n\n当团队人手不足，把功能代码写完已经需要加班的情况下，你会做前端代码的测试吗？\n\n说说最近最流行的一些东西吧？常去哪些网站？\n\n    ES6\\WebAssembly\\Node\\MVVM\\Web Components\\React\\React Native\\Webpack 组件化\n    \n知道什么是SEO并且怎么优化么? 知道各种meta data的含义么?\n\n移动端（Android IOS）怎么做好用户体验?\n\n\t清晰的视觉纵线、\n\t信息的分组、极致的减法、\n\t利用选择代替输入、\n\t标签及文字的排布方式、\n\t依靠明文确认密码、\n\t合理的键盘利用、\n\t\u0010\u0010\u0010\n简单描述一下你做过的移动APP项目研发流程？\n\n你在现在的团队处于什么样的角色，起到了什么明显的作用？\n\n你认为怎样才是全端工程师（Full Stack developer）？\n\n介绍一个你最得意的作品吧？\n\n你有自己的技术博客吗，用了哪些技术？\n\n对前端安全有什么看法？\n\n是否了解Web注入攻击，说下原理，最常见的两种攻击（XSS 和 CSRF）了解到什么程度？\n\n项目中遇到国哪些印象深刻的技术难题，具体是什么问题，怎么解决？。\n\n最近在学什么东西？\n\n你的优点是什么？缺点是什么？\n\n如何管理前端团队?\n\n最近在学什么？能谈谈你未来3，5年给自己的规划吗？\n\n\n## 前端学习网站推荐\n\n1. 极客标签：     http://www.gbtags.com/\n\n2. 码农周刊：     http://weekly.manong.io/issues/\n\n3. 前端周刊：     http://www.feweekly.com/issues\n\n4. 慕课网：       http://www.imooc.com/\n\n5. div.io：      http://div.io\n\n6. Hacker News： https://news.ycombinator.com/news\n\n7. InfoQ：       http://www.infoq.com/\n\n8. w3cplus：     http://www.w3cplus.com/\n\n9. Stack Overflow： http://stackoverflow.com/\n\n10. w3school：    http://www.w3school.com.cn/\n\n11. mozilla：     https://developer.mozilla.org/zh-CN/docs/Web/JavaScript  \n\n\n文档推荐\n\n[<font style=\"color:blue\">jQuery 基本原理</font>](http://docs.huihoo.com/jquery/jquery-fundamentals/zh-cn/index.html)\n\n[<font style=\"color:blue\">JavaScript 秘密花园</font>](http://bonsaiden.github.io/JavaScript-Garden/zh/)\n\n[<font style=\"color:blue\">CSS参考手册</font>](http://css.doyoe.com/)\n\n[<font style=\"color:blue\">JavaScript 标准参考教程</font>](http://javascript.ruanyifeng.com/)\n\n[<font style=\"color:blue\">ECMAScript 6入门</font>](http://javascript.ruanyifeng.com/)\n\n备注：\n\n\t根据自己需要选择性阅读，面试题是对理论知识的总结，让自己学会应该如何表达。\n\n\t资料答案不够正确和全面，欢迎欢迎Star和提交issues。\n\n\t格式不断修改更新中。\n\n\t在 github 项目的右上角，有三个按钮,分别是 watch、star、fork，新来的同学注意不要用错了，无休止的邮件提醒\t会给你造成不必要的信息干扰。\n\n\t当你选择Watching，表示你以后会关注这个项目的全部动态，以后只要这个项目发生变动，被别人提交了pull \trequest、被发起了issue等情况你都会收到邮件通知。\n\n\tstar相当于是点赞或收藏，方便以后查找。\n\n\tfork表示你想要补充完善这个项目的内容。\n\n\t更新记录：\n\n    2016年10月20日:更新一些已被发现的问题。\n\n    2016年8月25日：新增ECMAScript6 相关问题   \n\t","source":"_posts/前端开发面试题.md","raw":"---\ntitle: 前端开发面试题\ndate: 2016-7-29 14:10:57\ntags: [前端开发面试题]\n---\n# 前言\n\n## [<font style=\"color:blue\">只看问题点这里</font>](http://markyun.github.io/2015/Front-end-Developer-Questions/)\n\n## [<font style=\"color:blue\">看全部问题和答案点这里</font>](https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions/Questions-and-Answers)\n\n\n本文由我收集总结了一些前端面试题，初学者阅后也要用心钻研其中的原理，重要知识需要系统学习、透彻学习，形成自己的知识链。万不可投机取巧，临时抱佛脚只求面试侥幸混过关是错误的！也是不可能的！不可能的！不可能的！\n\n前端还是一个年轻的行业，新的行业标准， 框架， 库都不断在更新和新增，正如赫门在2015深JS大会上的《前端服务化之路》主题演讲中说的一句话：“每18至24个月，前端都会难一倍”，这些变化使前端的能力更加丰富、创造的应用也会更加完美。所以关注各种前端技术，跟上快速变化的节奏，也是身为一个前端程序员必备的技能之一。\n\n最近也收到许多微博私信的鼓励和更正题目信息，后面会经常更新题目和答案到[<font style=\"color:blue\">github</font>](https://cuidapao.github.io/)博客。希望前端er达到既能使用也会表达，对理论知识有自己的理解。可根据下面的知识点一个一个去进阶学习，形成自己的职业技能链。\n\n面试有几点需注意：(来源[<font style=\"color:blue\">寒冬winter</font>](http://weibo.com/wintercn) 老师，github:@wintercn)\n\n面试题目： 根据你的等级和职位的变化，入门级到专家级，广度和深度都会有所增加。\n\n题目类型： 理论知识、算法、项目细节、技术视野、开放性题、工作案例。\n\n细节追问： 可以确保问到你开始不懂或面试官开始不懂为止，这样可以大大延展题目的区分度和深度，知道你的实际能力。因为这种知识关联是长时期的学习，临时抱佛脚绝对是记不住的。\n\n回答问题再棒，面试官（可能是你面试职位的直接领导），会考虑我要不要这个人做我的同事？所以态度很重要、除了能做事，还要会做人。（感觉更像是相亲( •̣̣̣̣̣̥́௰•̣̣̣̣̣̥̀ )）\n\n资深的前端开发能把absolute和relative弄混，这样的人不要也罢，因为团队需要的是：你这个人具有可以依靠的才能（靠谱）。\n\n### 前端开发知识点：\n\n#### HTML&CSS：\n    对Web标准的理解、浏览器内核差异、兼容性、hack、CSS基本功：布局、盒子模型、选择器优先级、\n    HTML5、CSS3、Flexbox\n\n#### JavaScript：\n    数据类型、运算、对象、Function、继承、闭包、作用域、原型链、事件、RegExp、JSON、Ajax、\n    DOM、BOM、内存泄漏、跨域、异步装载、模板引擎、前端MVC、路由、模块化、Canvas、ECMAScript 6、Nodejs\n\n其他：\n    移动端、响应式、自动化构建、HTTP、离线存储、WEB安全、优化、重构、团队协作、可维护、易用性、SEO、UED、架构、职业生涯、快速学习能力\n作为一名前端工程师，无论工作年头长短都应该掌握的知识点：\n\n此条由 王子墨 发表在 攻城师的实验室\n\n    1、DOM结构 —— 两个节点之间可能存在哪些关系以及如何在节点之间任意移动。\n\n    2、DOM操作 —— 如何添加、移除、移动、复制、创建和查找节点等。\n\n    3、事件 —— 如何使用事件，以及IE和标准DOM事件模型之间存在的差别。\n\n    4、XMLHttpRequest —— 这是什么、怎样完整地执行一次GET请求、怎样检测错误。\n\n    5、严格模式与混杂模式 —— 如何触发这两种模式，区分它们有何意义。\n\n    6、盒模型 —— 外边距、内边距和边框之间的关系，及IE8以下版本的浏览器中的盒模型\n\n    7、块级元素与行内元素 —— 怎么用CSS控制它们、以及如何合理的使用它们\n\n    8、浮动元素 —— 怎么使用它们、它们有什么问题以及怎么解决这些问题。\n\n    9、HTML与XHTML —— 二者有什么区别，你觉得应该使用哪一个并说出理由。\n\n    10、JSON —— 作用、用途、设计结构。\n\n#### 备注：\n\n\t根据自己需要选择性阅读，面试题是对理论知识的总结，让自己学会应该如何表达。\n\n\t资料答案不够正确和全面，欢迎欢迎Star和提交issues。\n\n\t格式不断修改更新中。\n\n#### 新增ECMAScript6 相关问题\n\n\n#### HTML\n\nDoctype作用？标准模式与兼容模式各有什么区别?\n\n\t（1）、<!DOCTYPE>声明位于位于HTML文档中的第一行，处于 <html> 标签之前。告知浏览器的解析器用什么文档标准\t解析这个文档。DOCTYPE不存在或格式不正确会导致文档以兼容模式呈现。\n\n\t（2）、标准模式的排版 和JS运作模式都是以该浏览器支持的最高标准运行。在兼容模式中，页面以宽松的向后兼容的方\t式显示,模拟老式浏览器的行为以防止站点无法工作。\n\t\nHTML5 为什么只需要写 <!DOCTYPE HTML>？\n\n\t HTML5 不基于 SGML，因此不需要对DTD进行引用，但是需要doctype来规范浏览器的行为（让浏览器按照它们应该的\t方式来运行）；\n\n\t 而HTML4.01基于SGML,所以需要对DTD进行引用，才能告知浏览器文档所使用的文档类型。\n\t \n行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？\n\n\t首先：CSS规范规定，每个元素都有display属性，确定该元素的类型，每个元素都有默认的display值，如div的\tdisplay默认值为“block”，则为“块级”元素；span默认display属性值为“inline”，是“行内”元素。\n\n\t（1）行内元素有：a b span img input select strong（强调的语气）\n\t（2）块级元素有：div ul ol li dl dt dd h1 h2 h3 h4…p\n\t\n\t（3）常见的空元素：\n    <br> <hr> <img> <input> <link> <meta>\n    鲜为人知的是：\n    <area> <base> <col> <command> <embed> <keygen> <param> <source> <track> <wbr>\n\n不同浏览器（版本）、HTML4（5）、CSS2等实际略有差异\n参考: http://stackoverflow.com/questions/6867254/browsers-default-css-for-html-elements\n页面导入样式时，使用link和@import有什么区别？\n\n\t（1）link属于XHTML标签，除了加载CSS外，还能用于定义RSS, 定义rel连接属性等作用；而@import是CSS提供的，\t只能用于加载CSS;\n\n\t（2）页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载;\n\n\t（3）import是CSS2.1 提出的，只在IE5以上才能被识别，而link是XHTML标签，无兼容问题;\n\t介绍一下你对浏览器内核的理解？    \n\t\n介绍一下你对浏览器内核的理解？\n\n\t主要分成两部分：渲染引擎(layout engineer或Rendering Engine)和JS引擎。\n\t渲染引擎：负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入CSS等），以及计算网页的显示方式，\t然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏\t览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核。\n\n\tJS引擎则：解析和执行javascript来实现网页的动态效果。\n\n\t最开始渲染引擎和JS引擎并没有区分的很明确，后来JS引擎越来越独立，内核就倾向于只指渲染引擎。\n\t\n常见的浏览器内核有哪些？\n\n\tTrident内核：IE,MaxThon,TT,The World,360,搜狗浏览器等。[又称MSHTML]\n\tGecko内核：Netscape6及以上版本，FF,MozillaSuite/SeaMonkey等\n\tPresto内核：Opera7及以上。      [Opera内核原为：Presto，现为：Blink;]\n\tWebkit内核：Safari,Chrome等。   [ Chrome的：Blink（WebKit的分支）]\n\t\n详细文章：[<font style=\"color:blue\">浏览器内核的解析和对比</font>](http://www.cnblogs.com/fullhouse/archive/2011/12/19/2293455.html)\n\n\thtml5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？\n\n\t* HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加。\n      绘画 canvas;\n      用于媒介回放的 video 和 audio 元素;\n      本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失;\n      sessionStorage 的数据在浏览器关闭后自动删除;\n      语意化更好的内容元素，比如 article、footer、header、nav、section;\n      表单控件，calendar、date、time、email、url、search;\n      新的技术webworker, websocket, Geolocation;\n\n  \t移除的元素：\n      \t纯表现的元素：basefont，big，center，font, s，strike，tt，u;\n      \t对可用性产生负面影响的元素：frame，frameset，noframes；\n\n\t* 支持HTML5新标签：\n    \t IE8/IE7/IE6支持通过document.createElement方法产生的标签，\n    \t 可以利用这一特性让这些浏览器支持HTML5新标签，\n    \t 浏览器支持新标签后，还需要添加标签默认的样式。\n\n    \t 当然也可以直接使用成熟的框架、比如html5shim;\n    \t <!--[if lt IE 9]>\n        \t<script> src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"</script>\n    \t <![endif]-->\n\n\t* 如何区分HTML5： DOCTYPE声明\\新增的结构元素\\功能元素\n\n简述一下你对HTML语义化的理解？\n\n\t用正确的标签做正确的事情。\n\thtml语义化让页面的内容结构化，结构更清晰，便于对浏览器、搜索引擎解析;\n\t即使在没有样式CSS情况下也以一种文档格式显示，并且是容易阅读的;\n\t搜索引擎的爬虫也依赖于HTML标记来确定上下文和各个关键字的权重，利于SEO;\n\t使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。\n\t\nHTML5的离线储存怎么使用，工作原理能不能解释一下？\n\n\t在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件。\n\t原理：HTML5的离线存储是基于一个新建的.appcache文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线\t存储资源，这些资源就会像cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据\t进行页面展示。\n\n\n\t如何使用：\n\t1、页面头部像下面一样加入一个manifest的属性；\n\t2、在cache.manifest文件的编写离线存储的资源；\n    \tCACHE MANIFEST\n    \t#v0.11\n   \t \tCACHE:\n    \tjs/app.js\n    \tcss/style.css\n    \tNETWORK:\n    \tresourse/logo.png\n   \t\tFALLBACK:\n    \t/ /offline.html\n\t3、在离线状态时，操作window.applicationCache进行需求实现。\n\t\n\u0010\u0010\u0010\u0010\u0010\u0010详细的使用请参考：[<font style=\"color:blue\">HTML5 离线缓存-manifest简介</font>](http://yanhaijing.com/html/2014/12/28/html5-manifest/)\n\n[<font style=\"color:blue\">有趣的HTML5：离线存储</font>](https://segmentfault.com/a/1190000000732617)\n\n浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢？\n\n\t在线的情况下，浏览器发现html头部有manifest属性，它会请求manifest文件，如果是第一次访问app，那么浏览器就\t会根据manifest文件的内容下载相应的资源并且进行离线存储。如果已经访问过app并且资源已经离线存储了，那么浏览\t器就会使用离线的资源加载页面，然后浏览器会对比新的manifest文件与旧的manifest文件，如果文件没有发生改变，\t就不做任何操作，如果文件改变了，那么就会重新下载文件中的资源并进行离线存储。\n\t离线的情况下，浏览器就直接使用离线存储的资源。\n\t\n详细请参考：[<font style=\"color:blue\">有趣的HTML5：离线存储</font>](https://segmentfault.com/a/1190000000732617)\n\n请描述一下 cookies，sessionStorage 和 localStorage 的区别？\n\n\tcookie是网站为了标示用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）。\n\tcookie数据始终在同源的http请求中携带（即使不需要），记会在浏览器和服务器间来回传递。\n\tsessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。\n\n\t存储大小：\n    \tcookie数据大小不能超过4k。\n    \tsessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。\n\n\t有期时间：\n   \t\tlocalStorage    存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；\n    \tsessionStorage  数据在当前浏览器窗口关闭后自动删除。\n    \tcookie          设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭\niframe有那些缺点？\n\n\t*iframe会阻塞主页面的Onload事件；\n\t*搜索引擎的检索程序无法解读这种页面，不利于SEO;\n\n\t*iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。\n\n\t使用iframe之前需要考虑这两个缺点。如果需要使用iframe，最好是通过javascript\n\t动态给iframe添加src属性值，这样可以绕开以上两个问题。\n\t\t\nLabel的作用是什么？是怎么用的？\n\n\tlabel标签来定义表单控制间的关系,当用户选择该标签时，浏览器会自动将焦点转到和标签相关的表单控件上。\n\n\t<label for=\"Name\">Number:</label>\n\t<input type=“text“name=\"Name\" id=\"Name\"/>\n\n\t<label>Date:<input type=\"text\" name=\"B\"/></label>\nHTML5的form如何关闭自动完成功能？\n\n\t给不想要提示的 form 或某个 input 设置为 autocomplete=off。\n如何实现浏览器内多个标签页之间的通信? (阿里)\n\n\tWebSocket、SharedWorker；\n\t也可以调用localstorge、cookies等本地存储方式；\n\n\tlocalstorge另一个浏览上下文里被添加、修改或删除时，它都会触发一个事件，\n\t我们通过监听事件，控制它的值来进行页面信息通信；\n\t注意quirks：Safari 在无痕模式下设置localstorge值时会抛出 QuotaExceededError 的异常；\nwebSocket如何兼容低浏览器？(阿里)\n\n\tAdobe Flash Socket 、\n\tActiveX HTMLFile (IE) 、\n\t基于 multipart 编码发送 XHR 、\n\t基于长轮询的 XHR\n\t页面可见性（Page Visibility API） 可以有哪些用途？\n\n\t通过 visibilityState 的值检测页面当前是否可见，以及打开网页的时间等;\n\t在页面被切换到其他后台进程的时候，自动暂停音乐或视频的播放；\n如何在页面上实现一个圆形的可点击区域？\n\n\t1、map+area或者svg\n\t2、border-radius\n\t3、纯js实现 需要求一个点在不在圆上简单算法、获取鼠标坐标等等\n\n实现不使用 border 画出1px高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果。\n\n\t<div style=\"height:1px;overflow:hidden;background:red\"></div>\n网页验证码是干嘛的，是为了解决什么安全问题?\n\n\t区分用户是计算机还是人的公共全自动程序。可以防止恶意破解密码、刷票、论坛灌水；\n\t有效防止黑客对某一个特定注册用户用特定程序暴力破解方式进行不断的登陆尝试。\ntitle与h1的区别、b与strong的区别、i与em的区别？\n\n\ttitle属性没有明确意义只表示是个标题，H1则表示层次明确的标题，对页面信息的抓取也有很大的影响；\n\n\tstrong是标明重点内容，有语气加强的含义，使用阅读设备阅读网络时：<strong>会重读，而<B>是展示强调内容。\n\n\ti内容展示为斜体，em表示强调的文本；\n\n\tPhysical Style Elements -- 自然样式标签\n\tb, i, u, s, pre\n\tSemantic Style Elements -- 语义样式标签\n\tstrong, em, ins, del, code\n\t应该准确使用语义样式标签, 但不能滥用, 如果不能确定时首选使用自然样式标签。\n#### CSS\n\n介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？\n\n\t（1）有两种， IE 盒子模型、W3C 盒子模型；\n\t（2）盒模型： 内容(content)、填充(padding)、边界(margin)、 边框(border)；\n\t（3）区  别： IE的content部分把 border 和 padding计算了进去;\n\t\nCSS选择符有哪些？哪些属性可以继承？\n\n\t*   1.id选择器（ # myid）\n    \t2.类选择器（.myclassname）\n   \t \t3.标签选择器（div, h1, p）\n    \t4.相邻选择器（h1 + p）\n    \t5.子选择器（ul > li）\n    \t6.后代选择器（li a）\n    \t7.通配符选择器（ * ）\n    \t8.属性选择器（a[rel = \"external\"]）\n    \t9.伪类选择器（a:hover, li:nth-child）\n\n\t*   可继承的样式： font-size font-family color, UL LI DL DD DT;\n\n\t*   不可继承的样式：border padding margin width height ;\n\t\t\nCSS优先级算法如何计算？\n\n*   优先级就近原则，同权重情况下样式定义最近者为准;\n\n*   载入样式以最后载入的定位为准;\n\n优先级为:\n   !important >  id > class > tag\n    important 比 内联优先级高\nCSS3新增伪类有那些？\n\n    举例：\n    p:first-of-type 选择属于其父元素的首个 <p> 元素的每个 <p> 元素。\n    p:last-of-type  选择属于其父元素的最后 <p> 元素的每个 <p> 元素。\n    p:only-of-type  选择属于其父元素唯一的 <p> 元素的每个 <p> 元素。\n    p:only-child        选择属于其父元素的唯一子元素的每个 <p> 元素。\n    p:nth-child(2)  选择属于其父元素的第二个子元素的每个 <p> 元素。\n\n    :after          在元素之前添加内容,也可以用来做清除浮动。\n    :before         在元素之后添加内容\n    :enabled        \n    :disabled       控制表单控件的禁用状态。\n    :checked        单选框或复选框被选中。\n    \n如何居中div？\n\n\t* 水平居中：给div设置一个宽度，然后添加margin:0 auto属性\n\n\tdiv{\n    \twidth:200px;\n    \tmargin:0 auto;\n\t}\n\t* 让绝对定位的div居中\n\n\tdiv {\n    \tposition: absolute;\n    \twidth: 300px;\n    \theight: 300px;\n    \tmargin: auto;\n    \ttop: 0;\n    \tleft: 0;\n    \tbottom: 0;\n    \tright: 0;\n    \tbackground-color: pink; /* 方便看效果 */\n\t}\n\t* 水平垂直居中一\n\n\t确定容器的宽高 宽500 高 300 的层\n\t设置层的外边距\n\n\tdiv {\n    \tposition: relative;     /* 相对定位或绝对定位均可 */\n    \twidth:500px; \n    \theight:300px;\n    \ttop: 50%;\n    \tleft: 50%;\n    \tmargin: -150px 0 0 -250px;      /* 外边距为自身宽高的一半 */\n    \tbackground-color: pink;     /* 方便看效果 */\n\n \t}\n \n\t* 水平垂直居中二\n\n\t未知容器的宽高，利用 `transform` 属性\n\n\tdiv {\n    \tposition: absolute;     /* 相对定位或绝对定位均可 */\n    \twidth:500px; \n    \theight:300px;\n    \ttop: 50%;\n    \tleft: 50%;\n    \ttransform: translate(-50%, -50%);\n    \tbackground-color: pink;     /* 方便看效果 */\n\n\t}\n\n\t* 水平垂直居中三\n\n\t利用 flex 布局\n\t实际使用时应考虑兼容性\n\n\t.container {\n    \tdisplay: flex; \n    \talign-items: center;        /* 垂直居中 */\n    \tjustify-content: center;    /* 水平居中 */\n\n\t}\n\t.container div {\n    \twidth: 100px;\n    \theight: 100px;\n    \tbackground-color: pink;     /* 方便看效果 */\n\t}  \t\n\ndisplay有哪些值？说明他们的作用。\n\n  \tblock         块类型。默认宽度为父元素宽度，可设置宽高，换行显示。\n  \tnone          缺省值。象行内元素类型一样显示。\n  \tinline        行内元素类型。默认宽度为内容宽度，不可设置宽高，同行显示。\n  \tinline-block  默认宽度为内容宽度，可以设置宽高，同行显示。\n  \tlist-item     象块类型元素一样显示，并添加样式列表标记。\n  \ttable         此元素会作为块级表格来显示。\n  \tinherit       规定应该从父元素继承 display 属性的值。\n  \t\nposition的值relative和absolute定位原点是？\n\n  \tabsolute\n    生成绝对定位的元素，相对于值不为 static的第一个父元素进行定位。\n  \tfixed （老IE不支持）\n    生成绝对定位的元素，相对于浏览器窗口进行定位。\n  \trelative\n    生成相对定位的元素，相对于其正常位置进行定位。\n  \tstatic\n    默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right z-index 声明）。\n  \tinherit\n    规定从父元素继承 position 属性的值。\n    \nCSS3有哪些新特性？\n\n  \t新增各种CSS选择器  （: not(.input)：所有 class 不是“input”的节点）\n  \t圆角            （border-radius:8px）\n  \t多列布局      （multi-column layout）\n  \t阴影和反射   （Shadow\\Reflect）\n  \t文字特效      （text-shadow、）\n  \t文字渲染      （Text-decoration）\n  \t线性渐变      （gradient）\n  \t旋转            （transform）\n  \t缩放,定位,倾斜,动画,多背景\n  \t例如:transform:\\scale(0.85,0.90)\\ translate(0px,-30px)\\ skew(-9deg,0deg)\\Animation:\n  \t\n请解释一下CSS3的Flexbox（弹性盒布局模型）,以及适用场景？\n\n \t一个用于页面布局的全新CSS3功能，Flexbox可以把列表放在同一个方向（从上到下排列，从左到右），并让列表能延伸\t到占用可用的空间。\n \t较为复杂的布局还可以通过嵌套一个伸缩容器（flex container）来实现。\n \t采用Flex布局的元素，称为Flex容器（flex container），简称\"容器\"。\n \t它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称\"项目\"。\n \t常规布局是基于块和内联流方向，而Flex布局是基于flex-flow流可以很方便的用来做局中，能对不同屏幕大小自适应。\n \t在布局上有了比以前更加灵活的空间。\n\n \t具体：http://www.w3cplus.com/css3/flexbox-basics.html\n \t\n用纯CSS创建一个三角形的原理是什么？\n\n\t把上、左、右三条边隐藏掉（颜色设为 transparent）\n\t#demo {\n  \t\twidth: 0;\n \t\theight: 0;\n  \t\tborder-width: 20px;\n  \t\tborder-style: solid;\n  \t\tborder-color: transparent transparent red transparent;\n\t}\n一个满屏 品 字布局 如何设计?\n\n\t简单的方式：\n    \t上面的div宽100%，\n    \t下面的两个div分别宽50%，\n    \t然后用float或者inline使其不换行即可\n    \t\ncss多列等高如何实现？\n\n\t利用padding-bottom|margin-bottom正负值相抵；\n\t设置父容器设置超出隐藏（overflow:hidden），这样子父容器的高度就还是它里面的列没有设定padding-bottom时\t的高度，\n\t当它里面的任 一列高度增加了，则父容器的高度被撑到里面最高那列的高度，\n\t其他比这列矮的列会用它们的padding-bottom补偿这部分高度差。\n\t\n经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用hack的技巧 ？\n\t\n\t* png24位的图片在iE6浏览器上出现背景，解决方案是做成PNG8.\n\n\t* 浏览器默认的margin和padding不同。解决方案是加一个全局的*{margin:0;padding:0;}来统一。\n\n\t* IE6双边距bug:块属性标签float后，又有横行的margin情况下，在ie6显示margin比设置的大。\n\n  \t浮动ie产生的双倍距离 #box{ float:left; width:10px; margin:0 0 0 100px;}\n\n  \t这种情况之下IE会产生20px的距离，解决方案是在float的标签样式控制中加入 ——_display:inline;将其转化为行\t内属性。(_这个符号只有ie6会识别)\n\n  \t渐进识别的方式，从总体中逐渐排除局部。\n\n  \t首先，巧妙的使用“\\9”这一标记，将IE游览器从所有情况中分离出来。\n  \t接着，再次使用“+”将IE8和IE7、IE6分离开来，这样IE8已经独立识别。\n\n  \tcss\n      \t.bb{\n          \tbackground-color:red;/*所有识别*/\n          \tbackground-color:#00deff\\9; /*IE6、7、8识别*/\n          \t+background-color:#a200ff;/*IE6、7识别*/\n         \t _background-color:#1e0bd1;/*IE6识别*/\n      \t}\n\n\n\t*  IE下,可以使用获取常规属性的方法来获取自定义属性,\n   \t\t也可以使用getAttribute()获取自定义属性;\n   \t\tFirefox下,只能使用getAttribute()获取自定义属性。\n   \t\t解决方法:统一通过getAttribute()获取自定义属性。\n\n\t*  IE下,even对象有x,y属性,但是没有pageX,pageY属性;\n   \t\tFirefox下,event对象有pageX,pageY属性,但是没有x,y属性。\n\n\t*  解决方法：（条件注释）缺点是在IE浏览器下可能会增加额外的HTTP请求数。\n\n\t*  Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示,\n   \t\t可通过加入 CSS 属性 -webkit-text-size-adjust: none; 解决。\n\n\t超链接访问过后hover样式就不出现了 被点击访问过的超链接样式不在具有hover和active了解决方法是改变CSS属性\t的排列顺序:\n\tL-V-H-A :  a:link {} a:visited {} a:hover {} a:active {}\n\t\nli与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？\n\n\t行框的排列会受到中间空白（回车\\空格）等的影响，因为空格也属于字符,这些空白也会被应用样式，占据空间，所以会\t有间隔，把字符大小设为0，就没有空格了。\n为什么要初始化CSS样式?\n\n\t- 因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没对CSS初始化往往会出现浏览器之间的页面\t显示差异。\n\n\t- 当然，初始化样式会对SEO有一定的影响，但鱼和熊掌不可兼得，但力求影响最小的情况下初始化。\n\n\t最简单的初始化方法： * {padding: 0; margin: 0;} （强烈不建议）\n\n\t淘宝的样式初始化代码：\n\tbody, h1, h2, h3, h4, h5, h6, hr, p, blockquote, dl, dt, dd, ul, ol, li, pre, form, \tfieldset, legend, button, input, textarea, th, td { margin:0; padding:0; }\n\tbody, button, input, select, textarea { font:12px/1.5tahoma, arial, \\5b8b\\4f53; }\n\th1, h2, h3, h4, h5, h6{ font-size:100%; }\n\taddress, cite, dfn, em, var { font-style:normal; }\n\tcode, kbd, pre, samp { font-family:couriernew, courier, monospace; }\n\tsmall{ font-size:12px; }\n\tul, ol { list-style:none; }\n\ta { text-decoration:none; }\n\ta:hover { text-decoration:underline; }\n\tsup { vertical-align:text-top; }\n\tsub{ vertical-align:text-bottom; }\n\tlegend { color:#000; }\n\tfieldset, img { border:0; }\n\tbutton, input, select, textarea { font-size:100%; }\n\ttable { border-collapse:collapse; border-spacing:0; }\n\t\nabsolute的containing block(容器块)计算方式跟正常流有什么不同？\n\n\t无论属于哪种，都要先找到其祖先元素中最近的 position 值不为 static 的元素，然后再判断：\n\t1、若此元素为 inline 元素，则 containing block 为能够包含这个元素生成的第一个和最后一个 inline box \t的 padding box (除 margin, border 外的区域) 的最小矩形；\n\t2、否则,则由这个祖先元素的 padding box 构成。\n\t如果都找不到，则为 initial containing block。\n\n\t补充：\n\t1. static(默认的)/relative：简单说就是它的父元素的内容框（即去掉padding的部分）\n\t2. absolute: 向上找最近的定位为absolute/relative的元素\n\t3. fixed: 它的containing block一律为根元素(html/body)，根元素也是initial containing block\n\t\n##### CSS里的visibility属性有个collapse属性值是干嘛用的？在不同浏览器下以后什么区别？\n\n##### position跟display、margin collapse、overflow、float这些特性相互叠加后会怎么样？\n\n##### 对BFC规范(块级格式化上下文：block formatting context)的理解？\n\n\t（W3C CSS 2.1 规范中的一个概念,它是一个独立容器，决定了元素如何对其内容进行定位,以及与其他元素的关系和相\t互作用。）\n \t\t一个页面是由很多个 Box 组成的,元素的类型和 display 属性,决定了这个 Box 的类型。\n \t\t不同类型的 Box,会参与不同的 Formatting Context（决定如何渲染文档的容器）,因此Box内的元素会以不同的方式渲染,也就是说BFC内部的元素和外部的元素不会互相影响。\n \t\t\ncss定义的权重\n\n\t以下是权重的规则：标签的权重为1，class的权重为10，id的权重为100，以下例子是演示各种定义的权重值：\n\n\t/*权重为1*/\n\tdiv{\n\t}\n\t/*权重为10*/\n\t.class1{\n\t}\n\t/*权重为100*/\n\t#id1{\n\t}\n\t/*权重为100+1=101*/\n\t#id1 div{\n\t}\n\t/*权重为10+1=11*/\n\t.class1 div{\n\t}\n\t/*权重为10+10+1=21*/\n\t.class1 .class2 div{\n\t}\n\t\n\t如果权重相同，则最后定义的样式会起作用，但是应该避免这种情况出现\n\t\n请解释一下为什么需要清除浮动？清除浮动的方式\n\t\n清除浮动是为了清除使用浮动元素产生的影响。浮动的元素，高度会塌陷，而高度的塌陷使我们页面后面的布局不能正常显示。\n\n\t1、父级div定义height；\n\t2、父级div 也一起浮动；\n\t3、常规的使用一个class；\n    \t.clearfix:before, .clearfix:after {\n        \tcontent: \" \";\n        \tdisplay: table;\n    \t}\n    \t\t.clearfix:after {\n        \tclear: both;\n    \t}\n    \t.clearfix {\n        \t*zoom: 1;\n    \t}\n\n\t4、SASS编译的时候，浮动元素的父级div定义伪类:after\n    \t&:after,&:before{\n        \tcontent: \" \";\n        \tvisibility: hidden;\n        \tdisplay: block;\n        \theight: 0;\n        \tclear: both;\n    \t}\n\n解析原理：\n\t1) display:block 使生成的元素以块级元素显示,占满剩余空间;\n\t2) height:0 避免生成内容破坏原有布局的高度。\n\t3) visibility:hidden 使生成的内容不可见，并允许可能被生成内容盖住的内容可以进行点击和交互;\n\t4）通过 content:\".\"生成内容作为最后一个元素，至于content里面是点还是其他都是可以的，例如oocss里面就有\t经典的 content:\".\",有些版本可能content 里面内容为空,一丝冰凉是不推荐这样做的,firefox直到7.0 \tcontent:”\" 仍然会产生额外的空隙；\n\t5）zoom：1 触发IE hasLayout。\n\n\t通过分析发现，除了clear：both用来闭合浮动的，其他代码无非都是为了隐藏掉content生成的内容，这也就是其他版\t本的闭合浮动为什么会有font-size：0，line-height：0。\n\t\nzoom:1的清楚浮动原理?\n\n\t清楚浮动，触发hasLayout；\n\tZoom属性是IE浏览器的专有属性，它可以设置或检索对象的缩放比例。解决ie下比较奇葩的bug。\n\t譬如外边距（margin）的重叠，浮动清除，触发ie的haslayout属性等。\n\n\t来龙去脉大概如下：\n\t当设置了zoom的值之后，所设置的元素就会就会扩大或者缩小，高度宽度就会重新计算了，这里一旦改变zoom值时其实也\t会发生重新渲染，运用这个原理，也就解决了ie下子元素浮动时候父元素不随着自动扩大的问题。\n\n\tZoom属是IE浏览器的专有属性，火狐和老版本的webkit核心的浏览器都不支持这个属性。然而，zoom现在已经被逐步标\t准化，出现在 CSS 3.0 规范草案中。\n\n\t目前非ie由于不支持这个属性，它们又是通过什么属性来实现元素的缩放呢？\n\t可以通过css3里面的动画属性scale进行缩放。\n\t\n移动端的布局用过媒体查询吗？\n\n\t假设你现在正用一台显示设备来阅读这篇文章，同时你也想把它投影到屏幕上，或者打印出来， 而显示设备、屏幕投影和\t打印等这些媒介都有自己的特点，CSS就是为文档提供在不同媒介上展示的适配方法\n\t\n\t当媒体查询为真时，相关的样式表或样式规则会按照正常的级联规被应用。 当媒体查询返回假， 标签上带有媒体查询的\t样式表 仍将被下载 （只不过不会被应用）。\n\n\t包含了一个媒体类型和至少一个使用 宽度、高度和颜色等媒体属性来限制样式表范围的表达式。 CSS3加入的媒体查询使\t得无需修改内容便可以使样式应用于某些特定的设备范围。\n\n\t@media (min-width: 700px) and (orientation: landscape){ .sidebar { display: none; } }\n\t\n使用 CSS 预处理器吗？喜欢那个？\n\n\tSASS (SASS、LESS没有本质区别，只因为团队前端都是用的SASS)\n\tCSS优化、提高性能的方法有哪些？\n\n\t关键选择器（key selector）。选择器的最后面的部分为关键选择器（即用来匹配目标元素的部分）；\n\t如果规则拥有 ID 选择器作为其关键选择器，则不要为规则增加标签。过滤掉无关的规则（这样样式系统就不会浪费时间\t去匹配它们了）；\n\t提取项目的通用公有样式，增强可复用性，按模块编写组件；增强项目的协同开发性、可维护性和可扩展性;\n\t使用预处理工具或构建工具（gulp对css进行语法检查、自动补前缀、打包压缩、自动优雅降级）；\n\t\n浏览器是怎样解析CSS选择器的？\n\n\t样式系统从关键选择器开始匹配，然后左移查找规则选择器的祖先元素。\n\t只要选择器的子树一直在工作，样式系统就会持续左移，直到和规则匹配，或者是因为不匹配而放弃该规则。\n\t在网页中的应该使用奇数还是偶数的字体？为什么呢？\n\nmargin和padding分别适合什么场景使用？\n\n\tmargin是用来隔开元素与元素的间距；padding是用来隔开元素与内容的间隔。\n\tmargin用于布局分开元素使元素与元素互不相干；\n\tpadding用于元素与内容之间的间隔，让内容（文字）与（包裹）元素之间有一段\n\t抽离样式模块怎么写，说出思路，有无实践经验？[阿里航旅的面试题]\n\n元素竖向的百分比设定是相对于容器的高度吗？\n\n全屏滚动的原理是什么？用到了CSS的那些属性？\n\n什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE？\n\n视差滚动效果，如何给每页做不同的动画？（回到顶部，向下滑动要再次出现，和只出现一次分别怎么做？）\n\n\t::before 和 :after中双冒号和单冒号 有什么区别？解释一下这2个伪元素的作用。\n\n\t单冒号(:)用于CSS3伪类，双冒号(::)用于CSS3伪元素。（伪元素由双冒号和伪元素名称组成）\n\t双冒号是在当前规范中引入的，用于区分伪类和伪元素。不过浏览器需要同时支持旧的已经存在的伪元素写法，\n\t比如:first-line、:first-letter、:before、:after等，\n\t而新的在CSS3中引入的伪元素则不允许再支持旧的单冒号的写法。\n\n\t想让插入的内容出现在其它内容前，使用::before，否者，使用::after；\n\t在代码顺序上，::after生成的内容也比::before生成的内容靠后。\n\t如果按堆栈视角，::after生成的内容会在::before生成的内容之上\n\t\n如何修改chrome记住密码后自动填充表单的黄色背景 ？\n\n\tinput:-webkit-autofill, textarea:-webkit-autofill, select:-webkit-autofill {\n  \t\tbackground-color: rgb(250, 255, 189); /* #FAFFBD; */\n  \t\tbackground-image: none;\n  \t\tcolor: rgb(0, 0, 0);\n\t}\n\t\n你对line-height是如何理解的？\n\n设置元素浮动后，该元素的display值是多少？\n\n\t自动变成了 display:block\n\t\n怎么让Chrome支持小于12px 的文字？\n\n\t1、用图片：如果是内容固定不变情况下，使用将小于12px文字内容切出做图片，这样不影响兼容也不影响美观。\n\t2、使用12px及12px以上字体大小：为了兼容各大主流浏览器，建议设计美工图时候设置大于或等于12px的字体大小，如\t果是接单的这个时候就需要给客户讲解小于12px浏览器不兼容等事宜。\n\t3、继续使用小于12px字体大小样式设置：如果不考虑chrome可以不用考虑兼容，同时在设置小于12px对象设置-\twebkit-text-size-adjust:none，做到最大兼容考虑。\n\t4、使用12px以上字体：为了兼容、为了代码更简单 从新考虑权重下兼容性。        \n\t\n让页面里的字体变清晰，变细用CSS怎么做？\n\n\t-webkit-font-smoothing: antialiased;\n\t\nfont-style属性可以让它赋值为“oblique” oblique是什么意思？\n\n\t倾斜的字体样式\nposition:fixed;在android下无效怎么处理？\n\n\tfixed的元素是相对整个页面固定位置的，你在屏幕上滑动只是在移动这个所谓的viewport，\n\t原来的网页还好好的在那，fixed的内容也没有变过位置，\n\t所以说并不是iOS不支持fixed，只是fixed的元素不是相对手机屏幕固定的。\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, \tminimum-scale=1.0, user-scalable=no\"/>\n\t\n如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里）\n\n\t多数显示器默认频率是60Hz，即1秒刷新60次，所以理论上最小间隔为1/60＊1000ms ＝ 16.7ms\n\tdisplay:inline-block 什么时候会显示间隙？(携程)\n\n\t移除空格、使用margin负值、使用font-size:0、letter-spacing、word-spacing\n\t\noverflow: scroll时不能平滑滚动的问题怎么处理？\n\n\t有一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度。\n\npng、jpg、gif 这些图片格式解释一下，分别什么时候用。有没有了解过webp？\n\n什么是Cookie 隔离？（或者说：请求资源的时候不要让它带cookie怎么做）\n\n\t如果静态文件都放在主域名下，那静态文件请求的时候都带有的cookie的数据提交给server的，非常浪费流量，\n\t所以不如隔离开。\n\n\t因为cookie有域的限制，因此不能跨域提交请求，故使用非主要域名的时候，请求头中就不会带有cookie数据，\n\t这样可以降低请求头的大小，降低请求时间，从而达到降低整体请求延时的目的。\n\n\t同时这种方式不会将cookie传入Web Server，也减少了Web Server对cookie的处理分析环节，\n\t提高了webserver的http请求的解析速度。\n\t\nstyle标签写在body后与body前有什么区别？\n\n什么是CSS 预处理器 / 后处理器？\n\n\t- 预处理器例如：LESS、Sass、Stylus，用来预编译Sass或less，增强了css代码的复用性，\n  \t还有层级、mixin、变量、循环、函数等，具有很方便的UI组件模块化开发能力，极大的提高工作效率。\n\n\t- 后处理器例如：PostCSS，通常被视为在完成的样式表中根据CSS规范处理CSS，让其更有效；目前最常做的\n  \t是给CSS属性添加浏览器私有前缀，实现跨浏览器兼容性的问题。\n  \t\n#### JavaScript\n\n介绍js的基本数据类型。\n\n \tUndefined、Null、Boolean、Number、String、\n \tECMAScript 2015 新增:Symbol(创建后独一无二且不可变的数据类型 )\n \t\n介绍js有哪些内置对象？\n\n\tObject 是 JavaScript 中所有对象的父对象\n\n\t数据封装类对象：Object、Array、Boolean、Number 和 String\n\t其他对象：Function、Arguments、Math、Date、RegExp、Error\n\n\t参考：http://www.ibm.com/developerworks/cn/web/wa-objectsinjs-v1b/index.html\n\t\n说几条写JavaScript的基本规范？\n\n\t1.不要在同一行声明多个变量。\n\t2.请使用 ===/!==来比较true/false或者数值\n\t3.使用对象字面量替代new Array这种形式\n\t4.不要使用全局函数。\n\t5.Switch语句必须带有default分支\n\t6.函数不应该有时候有返回值，有时候没有返回值。\n\t7.For循环必须使用大括号\n\t8.If语句必须使用大括号\n\t9.for-in循环中的变量 应该使用var关键字明确限定作用域，从而避免作用域污染。\n\t\nJavaScript原型，原型链 ? 有什么特点？\n\n\t每个对象都会在其内部初始化一个属性，就是prototype(原型)，当我们访问一个对象的属性时，\n\t如果这个对象内部不存在这个属性，那么他就会去prototype里找这个属性，这个prototype又会有自己的\tprototype，\n\t于是就这样一直找下去，也就是我们平时所说的原型链的概念。\n\t关系：instance.constructor.prototype = instance.__proto__\n\n\t特点：\n\t\tJavaScript对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改\t\t原型时，与之相关的对象也会继承这一改变。\n\n\n \t当我们需要一个属性的时，Javascript引擎会先看当前对象中是否有这个属性， 如果没有的话，\n \t就会查找他的Prototype对象是否有这个属性，如此递推下去，一直检索到 Object 内建对象。\n    \tfunction Func(){}\n    \tFunc.prototype.name = \"Sean\";\n    \tFunc.prototype.getInfo = function() {\n      \t\treturn this.name;\n    \t}\n    \tvar person = new Func();//现在可以参考var person = Object.create(oldObject);\n    \tconsole.log(person.getInfo());//它拥有了Func的属性和方法\n    \t//\"Sean\"\n    \tconsole.log(Func.prototype);\n    \t// Func { name=\"Sean\", getInfo=function()}\n    \t\nJavaScript有几种类型的值？，你能画一下他们的内存图吗？\n\n\t栈：原始数据类型（Undefined，Null，Boolean，Number、String） \n\t堆：引用数据类型（对象、数组和函数）\n\n\t两种类型的区别是：存储位置不同；\n\t原始数据类型直接存储在栈(stack)中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存\t储；\n\t引用数据类型存储在堆(heap)中的对象,占据空间大、大小不固定。如果存储在栈中，将会影响程序运行的性能；引用数\t据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得\t地址后从堆中获得实体\n\n![Mou icon](https://camo.githubusercontent.com/d1947e624a0444d1032a85800013df487adc5550/687474703a2f2f7777772e77337363686f6f6c2e636f6d2e636e2f692f63745f6a735f76616c75652e676966)\n\nJavascript如何实现继承？\n\n\t1、构造继承\n\t2、原型继承\n\t3、实例继承\n\t4、拷贝继承\n\n\t原型prototype机制或apply和call方法去实现较简单，建议使用构造函数与原型混合方式。\n        function Parent(){\n            this.name = 'wang';\n        }\n\n        function Child(){\n            this.age = 28;\n        }\n        Child.prototype = new Parent();//继承了Parent，通过原型\n\n        var demo = new Child();\n        alert(demo.age);\n        alert(demo.name);//得到被继承的属性\nJavaScript继承的几种实现方式？\n\n参考：[<font style=\"color:blue\">构造函数的继承</font>](http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html)，[<font style=\"color:blue\">非构造函数的继承</font>](http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance_continued.html)；\n\t\njavascript创建对象的几种方式？\n\n\tjavascript创建对象简单的说,无非就是使用内置对象或各种自定义对象，当然还可以用JSON；但写法有很多种，也能\t混合使用。\n\n\n\t1、对象字面量的方式   \n\n    \tperson={firstname:\"Mark\",lastname:\"Yun\",age:25,eyecolor:\"black\"};\n\n\t2、用function来模拟无参的构造函数\n\n    \tfunction Person(){}\n    \tvar person=new Person();//定义一个function，如果使用new\"实例化\",该function可以看作是一个\t\tClass\n    \tperson.name=\"Mark\";\n    \tperson.age=\"25\";\n    \tperson.work=function(){\n    \talert(person.name+\" hello...\");\n    \t}\n    \tperson.work();\n\n\t3、用function来模拟参构造函数来实现（用this关键字定义构造的上下文属性）\n\n    function Pet(name,age,hobby){\n       this.name=name;//this作用域：当前对象\n       this.age=age;\n       this.hobby=hobby;\n       this.eat=function(){\n          alert(\"我叫\"+this.name+\",我喜欢\"+this.hobby+\",是个程序员\");\n       }\n    }\n    var maidou =new Pet(\"麦兜\",25,\"coding\");//实例化、创建对象\n    maidou.eat();//调用eat方法\n\n\n\t4、用工厂方式来创建（内置对象）\n\n     var wcDog =new Object();\n     wcDog.name=\"旺财\";\n     wcDog.age=3;\n     wcDog.work=function(){\n       alert(\"我是\"+wcDog.name+\",汪汪汪......\");\n     }\n     wcDog.work();\n\n\n\t5、用原型方式来创建\n\n    function Dog(){\n\n     }\n     Dog.prototype.name=\"旺财\";\n     Dog.prototype.eat=function(){\n     alert(this.name+\"是个吃货\");\n     }\n     var wangcai =new Dog();\n     wangcai.eat();\n\n\n\t6、用混合方式来创建\n\n    function Car(name,price){\n      this.name=name;\n      this.price=price; \n    }\n     Car.prototype.sell=function(){\n       alert(\"我是\"+this.name+\"，我现在卖\"+this.price+\"万元\");\n      }\n    var camry =new Car(\"凯美瑞\",27);\n    camry.sell();\n     \nJavascript作用链域?\n\n\t全局函数无法查看局部函数的内部细节，但局部函数可以查看其上层的函数细节，直至全局细节。\n\t当需要从局部函数查找某一属性或方法时，如果当前作用域没有找到，就会上溯到上层作用域查找，\n\t直至全局函数，这种组织形式就是作用域链。\n\t\n谈谈This对象的理解。\n\n\tthis总是指向函数的直接调用者（而非间接调用者）；\n\t如果有new关键字，this指向new出来的那个对象；\n\t在事件中，this指向触发这个事件的对象，特殊的是，IE中的attachEvent中的this总是指向全局对象Window；\n\t\neval是做什么的？\n\n\t它的功能是把对应的字符串解析成JS代码并运行；\n\t应该避免使用eval，不安全，非常耗性能（2次，一次解析成js语句，一次执行）。\n\t由JSON字符串转换为JSON对象的时候可以用eval，var obj =eval('('+ str +')');\n\t\n什么是window对象? 什么是document对象?\n\nnull，undefined 的区别？\n\n\tnull        表示一个对象是“没有值”的值，也就是值为“空”；\n\tundefined   表示一个变量没有被声明，不存在这个值，或者被声明了但没有被赋值；\n\n\tundefined不是一个有效的JSON，而null是；\n\tundefined的类型(typeof)是undefined；\n\tnull的类型(typeof)是object；\n\n\n\tJavascript将未赋值的变量默认值设为undefined；\n\tJavascript从来不会将变量设为null。它是用来让程序员表明某个用var声明的变量时没有值的。\n\n\ttypeof undefined\n    \t//\"undefined\"\n    \tundefined :是一个表示\"无\"的原始值或者说表示\"缺少值\"，就是此处应该有一个值，但是还没有定义。当尝试读\t取时会返回 undefined； \n    例如变量被声明了，但没有赋值时，就等于undefined\n\n\ttypeof null\n    \t//\"object\"\n    \tnull : 是一个对象(空对象, 没有任何属性和方法)；\n    \t例如作为函数的参数，表示该函数的参数不是对象；\n\n\t注意：\n    \t在验证null时，一定要使用　=== ，因为 == 无法分别 null 和　undefined\n    \tnull == undefined // true\n    \tnull === undefined // false\n\n\t再来一个例子：\n\n    \tnull\n    \tQ：有张三这个人么？\n    \tA：有！\n    \tQ：张三有房子么？\n    \tA：没有！\n\n    \tundefined\n    \tQ：有张三这个人么？\n    \tA：没有！\n参考阅读：[<font style=\"color:blue\">undefined与null的区别</font>](http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html)\n\n写一个通用的事件侦听器函数。\n\n    // event(事件)工具集，来源：github.com/markyun\n    markyun.Event = {\n        // 页面加载完成后\n        readyEvent : function(fn) {\n            if (fn==null) {\n                fn=document;\n            }\n            var oldonload = window.onload;\n            if (typeof window.onload != 'function') {\n                window.onload = fn;\n            } else {\n                window.onload = function() {\n                    oldonload();\n                    fn();\n                };\n            }\n        },\n        // 视能力分别使用dom0||dom2||IE方式 来绑定事件\n        // 参数： 操作的元素,事件名称 ,事件处理程序\n        addEvent : function(element, type, handler) {\n            if (element.addEventListener) {\n                //事件类型、需要执行的函数、是否捕捉\n                element.addEventListener(type, handler, false);\n            } else if (element.attachEvent) {\n                element.attachEvent('on' + type, function() {\n                    handler.call(element);\n                });\n            } else {\n                element['on' + type] = handler;\n            }\n        },\n        // 移除事件\n        removeEvent : function(element, type, handler) {\n            if (element.removeEventListener) {\n                element.removeEventListener(type, handler, false);\n            } else if (element.datachEvent) {\n                element.detachEvent('on' + type, handler);\n            } else {\n                element['on' + type] = null;\n            }\n        },\n        // 阻止事件 (主要是事件冒泡，因为IE不支持事件捕获)\n        stopPropagation : function(ev) {\n            if (ev.stopPropagation) {\n                ev.stopPropagation();\n            } else {\n                ev.cancelBubble = true;\n            }\n        },\n        // 取消事件的默认行为\n        preventDefault : function(event) {\n            if (event.preventDefault) {\n                event.preventDefault();\n            } else {\n                event.returnValue = false;\n            }\n        },\n        // 获取事件目标\n        getTarget : function(event) {\n            return event.target || event.srcElement;\n        },\n        // 获取event对象的引用，取到事件的所有信息，确保随时能使用event；\n        getEvent : function(e) {\n            var ev = e || window.event;\n            if (!ev) {\n                var c = this.getEvent.caller;\n                while (c) {\n                    ev = c.arguments[0];\n                    if (ev && Event == ev.constructor) {\n                        break;\n                    }\n                    c = c.caller;\n                }\n            }\n            return ev;\n        }\n    };\n[\"1\", \"2\", \"3\"].map(parseInt) 答案是多少？\n\n\tparseInt() 函数能解析一个字符串，并返回一个整数，需要两个参数 (val, radix)，\n\t其中 radix 表示要解析的数字的基数。【该值介于 2 ~ 36 之间，并且字符串中的数字不能大于radix才能正确返回\t数字结果值】;\n\t但此处 map 传了 3 个 (element, index, array),我们重写parseInt函数测试一下是否符合上面的规则。\n\n\tfunction parseInt(str, radix) {   \n    \treturn str+'-'+radix;   \n\t};  \n\tvar a=[\"1\", \"2\", \"3\"];  \n\ta.map(parseInt);  // [\"1-0\", \"2-1\", \"3-2\"] 不能大于radix\n\n\t因为二进制里面，没有数字3,导致出现超范围的radix赋值和不合法的进制解析，才会返回NaN\n\t所以[\"1\", \"2\", \"3\"].map(parseInt) 答案也就是：[1, NaN, NaN]\n\n\t详细解析：http://blog.csdn.net/justjavac/article/details/19473199\n事件是？IE与火狐的事件机制有什么区别？ 如何阻止冒泡？\n\n \t1. 我们在网页中的某个操作（有的操作对应多个事件）。例如：当我们点击一个按钮就会产生一个事件。是可以被 \tJavaScript 侦测到的行为。\n \t2. 事件处理机制：IE是事件冒泡、Firefox同时支持两种事件模型，也就是：捕获型事件和冒泡型事件；\n \t3. ev.stopPropagation();（旧ie的方法 ev.cancelBubble = true;）\n \n什么是闭包（closure），为什么要用它？\n\n\t闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一\t个函数访问这个函数的局部变量,利用闭包可以突破作用链域，将函数内部的变量和方法传递到外部。\n\n\t闭包的特性：\n\n\t\t1.函数内再嵌套函数\n\t\t2.内部函数可以引用外层的参数和变量\n\t\t3.参数和变量不会被垃圾回收机制回收\n\n\t//li节点的onclick事件都能正确的弹出当前被点击的li索引\n \t\t<ul id=\"testUL\">\n    \t\t<li> index = 0</li>\n    \t\t<li> index = 1</li>\n    \t\t<li> index = 2</li>\n    \t\t<li> index = 3</li>\n\t\t</ul>\n\t<script type=\"text/javascript\">\n    \tvar nodes = document.getElementsByTagName(\"li\");\n    \tfor(i = 0;i<nodes.length;i+= 1){\n        \tnodes[i].onclick = (function(i){\n                  return function() {\n                     console.log(i);\n                  } //不用闭包的话，值每次都是4\n                })(i);\n    \t}\n\t</script>\n\n\n\n\t执行say667()后,say667()闭包内部变量会存在,而闭包内部函数的内部变量不会存在\n\t使得Javascript的垃圾回收机制GC不会收回say667()所占用的资源\n\t因为say667()的内部函数的执行需要依赖say667()中的变量\n\t这是对闭包作用的非常直白的描述\n\n  \tfunction say667() {\n    \t// Local variable that ends up within closure\n    \tvar num = 666;\n    \tvar sayAlert = function() {\n        \talert(num);\n    \t}\n    \tnum++;\n    \treturn sayAlert;\n\t}\n\n \tvar sayAlert = say667();\n \tsayAlert()//执行结果应该弹出的667\n\njavascript 代码中的\"use strict\";是什么意思 ? 使用它区别是什么？\n\n\tuse strict是一种ECMAscript 5 添加的（严格）运行模式,这种模式使得 Javascript 在更严格的条件下运行,\n\n\t使JS编码更加规范化的模式,消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为。\n\t默认支持的糟糕特性都会被禁用，比如不能用with，也不能在意外的情况下给全局变量赋值;\n\t全局变量的显示声明,函数必须声明在顶层，不允许在非函数代码块内声明函数,arguments.callee也不允许使用；\n\t消除代码运行的一些不安全之处，保证代码运行的安全,限制函数中的arguments修改，严格模式下的eval函数的行为和\t非严格模式的也不相同;\n\n\t提高编译器效率，增加运行速度；\n\t为未来新版本的Javascript标准化做铺垫。\n\t\n如何判断一个对象是否属于某个类？\n\n  \t使用instanceof （待完善）\n   \t\tif(a instanceof Person){\n       \t\talert('yes');\n   \t\t}\nnew操作符具体干了什么呢?\n\n     1、创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。\n     2、属性和方法被加入到 this 引用的对象中。\n     3、新创建的对象由 this 所引用，并且最后隐式的返回 this 。\n\n\tvar obj  = {};\n\tobj.__proto__ = Base.prototype;\n\tBase.call(obj);\n\t\n用原生JavaScript的实现过什么功能吗？\n\nJavascript中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？\n\n\thasOwnProperty\n\n\tjavaScript中hasOwnProperty函数方法是返回一个布尔值，指出一个对象是否具有指定名称的属性。此方法无法检查\t该对象的原型链中是否具有该属性；该属性必须是对象本身的一个成员。\n\t使用方法：\n\tobject.hasOwnProperty(proName)\n\t其中参数object是必选项。一个对象的实例。\n\tproName是必选项。一个属性名称的字符串值。\n\n如果 object 具有指定名称的属性，那么JavaScript中hasOwnProperty函数方法返回 true，反之则返回 false。\nJSON 的了解？\n\n\tJSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。\n\t它是基于JavaScript的一个子集。数据格式简单, 易于读写, 占用带宽小\n\t如：{\"age\":\"12\", \"name\":\"back\"}\n\n\tJSON字符串转换为JSON对象:\n\tvar obj =eval('('+ str +')');\n\tvar obj = str.parseJSON();\n\tvar obj = JSON.parse(str);\n\n\tJSON对象转换为JSON字符串：\n\tvar last=obj.toJSONString();\n\tvar last=JSON.stringify(obj);\n#  \n\t\t[].forEach.call($$(\"*\"),function(a){a.style.outline=\"1px solid #\"+\t(~~(Math.random()*(1<<24))).toString(16)}) \n\t能解释一下这段代码的意思吗？\n\njs延迟加载的方式有哪些？\n\n\tdefer和async、动态创建DOM方式（用得最多）、按需异步载入js\n\t\nAjax 是什么? 如何创建一个Ajax？\n\n\tajax的全称：Asynchronous Javascript And XML。\n\t异步传输+js+xml。\n\t所谓异步，在这里简单地解释就是：向服务器发送请求的时候，我们不必等待结果，而是可以同时做其他的事情，等到有了\t结果它自己会根据设定进行后续操作，与此同时，页面是不会发生整页刷新的，提高了用户体验。\n\n\t(1)创建XMLHttpRequest对象,也就是创建一个异步调用对象\n\t(2)创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息\n\t(3)设置响应HTTP请求状态变化的函数\n\t(4)发送HTTP请求\n\t(5)获取异步调用返回的数据\n\t(6)使用JavaScript和DOM实现局部刷新\n\t\n同步和异步的区别?\n\n\t同步的概念应该是来自于OS中关于同步的概念:不同进程为协同完成某项工作而在先后次序上调整(通过阻塞,唤醒等方\t式).同步强调的是顺序性.谁先谁后.异步则不存在这种顺序性.\n\n\t同步：浏览器访问服务器请求，用户看得到页面刷新，重新发请求,等请求完，页面刷新，新内容出现，用户看到新内容,进行下一步操作。\n\n\t异步：浏览器访问服务器请求，用户正常操作，浏览器后端进行请求。等请求完，页面不刷新，新内容也会出现，用户看到新内容。\n\n（待完善）\n\n如何解决跨域问题?\n\n\tjsonp、 iframe、window.name、window.postMessage、服务器上设置代理页面\n\t\n页面编码和被请求的资源编码如果不一致如何处理？\n\n模块化开发怎么做？\n\n[立即执行函数](http://benalman.com/news/2010/11/immediately-invoked-function-expression/),不暴露私有成员\n\n    var module1 = (function(){\n    　　　　var _count = 0;\n    　　　　var m1 = function(){\n    　　　　　　//...\n    　　　　};\n    　　　　var m2 = function(){\n    　　　　　　//...\n    　　　　};\n    　　　　return {\n    　　　　　　m1 : m1,\n    　　　　　　m2 : m2\n    　　　　};\n    　　})();\n（待完善）\n\nAMD（Modules/Asynchronous-Definition）、CMD（Common Module Definition）规范区别？\n\nAMD 规范在这里：[https://github.com/amdjs/amdjs-api/wiki/AMD](https://github.com/amdjs/amdjs-api/wiki/AMD)\n\nCMD 规范在这里：[https://github.com/seajs/seajs/issues/242](https://github.com/seajs/seajs/issues/242)\n\n\tAsynchronous Module Definition，异步模块定义，所有的模块将被异步加载，模块加载不影响后面语句运行。所\t有依赖某些模块的语句均放置在回调函数中。\n\n \t区别：\n\n    1. 对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible.\n    2. CMD 推崇依赖就近，AMD 推崇依赖前置。看代码：\n\n\t// CMD\n\tdefine(function(require, exports, module) {\n    \tvar a = require('./a')\n    \ta.doSomething()\n    \t// 此处略去 100 行\n    \tvar b = require('./b') // 依赖可以就近书写\n    \tb.doSomething()\n    \t// ...\n\t})\n\n\t// AMD 默认推荐\n\tdefine(['./a', './b'], function(a, b) { // 依赖必须一开始就写好\n\t    a.doSomething()\n    \t// 此处略去 100 行\n    \tb.doSomething()\n    \t// ...\n\t})\nrequireJS的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何 缓存的？）\n\n\t参考：http://annn.me/how-to-realize-cmd-loader/\n\t\nJS模块加载器的轮子怎么造，也就是如何实现一个模块加载器？\n\n谈一谈你对ECMAScript6的了解？\n\nECMAScript6 怎么写class么，为什么会出现class这种东西?\n\n异步加载JS的方式有哪些？\n\n  \t(1) defer，只支持IE\n\n  \t(2) async：\n\n  \t(3) 创建script，插入到DOM中，加载完毕后callBack\n  \t\ndocumen.write和 innerHTML的区别\n\n\tdocument.write只能重绘整个页面\n\n\tinnerHTML可以重绘页面的一部分\n\t\nDOM操作——怎样添加、移除、移动、复制、创建和查找节点?\n\n\t（1）创建新节点\n\t  createDocumentFragment()    //创建一个DOM片段\n \t  createElement()   //创建一个具体的元素\n \t  createTextNode()   //创建一个文本节点\n\t（2）添加、移除、替换、插入\n\t  appendChild()\n\t  removeChild()\n\t  replaceChild()\n\t  insertBefore() //在已有的子节点前插入一个新的子节点\n\t（3）查找\n\t  getElementsByTagName()    //通过标签名称\n\t  getElementsByName()    //通过元素的Name属性的值(IE容错能力较强，会得到一个数组，其中包括id等于\tname值的)\n  \tgetElementById()    //通过元素Id，唯一性\n  \t\n.call() 和 .apply() 的区别？\n\n  \t例子中用 add 来替换 sub，add.call(sub,3,1) == add(3,1) ，所以运行结果为：alert(4);\n\n  \t注意：js 中的函数其实是对象，函数名是对 Function 对象的引用。\n\n    function add(a,b)\n    {\n        alert(a+b);\n    }\n\n    function sub(a,b)\n    {\n        alert(a-b);\n    }\n\n    add.call(sub,3,1);\n    \n数组和对象有哪些原生方法，列举一下？\n\nJS 怎么实现一个类。怎么实例化这个类\n\nJavaScript中的作用域与变量声明提升？\n\n如何编写高性能的Javascript？\n\n那些操作会造成内存泄漏？\n\nJQuery的源码看过吗？能不能简单概况一下它的实现原理？\n\njQuery.fn的init方法返回的this指的是什么对象？为什么要返回this？\n\njquery中如何将数组转化为json字符串，然后再转化回来？\n\njQuery 的属性拷贝(extend)的实现原理是什么，如何实现深拷贝？\n\njquery.extend 与 jquery.fn.extend的区别？\n\njQuery 的队列是如何实现的？队列可以用在哪些地方？\n\n谈一下Jquery中的bind(),live(),delegate(),on()的区别？\n\nJQuery一个对象可以同时绑定多个事件，这是如何实现的？\n\n是否知道自定义事件。jQuery里的fire函数是什么意思，什么时候用？\n\njQuery 是通过哪个方法和 Sizzle 选择器结合的？（jQuery.fn.find()进入Sizzle）\n\n针对 jQuery性能的优化方法？\n\nJquery与jQuery UI 有啥区别？\n\n\t*jQuery是一个js库，主要提供的功能是选择器，属性修改和事件绑定等等。\n\n\t*jQuery UI则是在jQuery的基础上，利用jQuery的扩展性，设计的插件。\n \t提供了一些常用的界面元素，诸如对话框、拖动行为、改变大小行为等等\n \t\nJQuery的源码看过吗？能不能简单说一下它的实现原理？\n\njquery 中如何将数组转化为json字符串，然后再转化回来？\n\njQuery中没有提供这个功能，所以你需要先编写两个jQuery的扩展：\n\n    $.fn.stringifyArray = function(array) {\n        return JSON.stringify(array)\n    }\n\n    $.fn.parseArray = function(array) {\n        return JSON.parse(array)\n    }\n\n    然后调用：\n    $(\"\").stringifyArray(array)\n     \t\n\njQuery和Zepto的区别？各自的使用场景？\n\n针对 jQuery 的优化方法？\n\n\t*基于Class的选择性的性能相对于Id选择器开销很大，因为需遍历所有DOM元素。\n\n\t*频繁操作的DOM，先缓存起来再操作。用Jquery的链式调用更好。\n \t比如：var str=$(\"a\").attr(\"href\");\n\n\t*for (var i = size; i < arr.length; i++) {}\n \tfor 循环每一次循环都查找了数组 (arr) 的.length 属性，在开始循环的时候设置一个变量来存储这个数字，可以让\t循环跑得更快：\n \tfor (var i = size, length = arr.length; i < length; i++) {}\n \t\u0010\u0010\u0010\u0010\u0010\nZepto的点透问题如何解决？\n\njQueryUI如何自定义组件?\n\n需求：实现一个页面操作不会整页刷新的网站，并且能在浏览器前进、后退时正确响应。给出你的技术实现方案？\n\n如何判断当前脚本运行在浏览器还是node环境中？（阿里）\n\n通过判断Global对象是否为window，如果不为window，当前脚本没有运行在浏览器中\n移动端最小触控区域是多大？\n\njQuery 的 slideUp动画 ，如果目标元素是被外部事件驱动, 当鼠标快速地连续触发外部元素事件, 动画会滞后的反复执行，该如何处理呢?\n\n把 Script 标签 放在页面的最底部的body封闭之前 和封闭之后有什么区别？浏览器会如何解析它们？\n\n移动端的点击事件的有延迟，时间是多久，为什么会有？ 怎么解决这个延时？（click 有 300ms 延迟,为了实现safari的双击事件的设计，浏览器要知道你是不是要双击操作。）\n\n知道各种JS框架(Angular, Backbone, Ember, React, Meteor, Knockout...)么? 能讲出他们各自的优点和缺点么?\n\nUnderscore 对哪些 JS 原生对象进行了扩展以及提供了哪些好用的函数方法？\n\n解释JavaScript中的作用域与变量声明提升？\n\n那些操作会造成内存泄漏？\n\n\t内存泄漏指任何对象在您不再拥有或需要它之后仍然存在。\n\t垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为 0（没有其他对象引用\t过该对象），或对该对象的惟一引用是循环的，那么该对象的内存即可回收。\n\n\tsetTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏。\n\t闭包、控制台日志、循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）\n\t\nJQuery一个对象可以同时绑定多个事件，这是如何实现的？\n\nNode.js的适用场景？\n\n(如果会用node)知道route, middleware, cluster, nodemon, pm2, server-side rendering么?\n\n解释一下 Backbone 的 MVC 实现方式？\n\n什么是“前端路由”?什么时候适合使用“前端路由”? “前端路由”有哪些优点和缺点?\n\n知道什么是webkit么? 知道怎么用浏览器的各种工具来调试和debug代码么?\n\n如何测试前端代码么? 知道BDD, TDD, Unit Test么? 知道怎么测试你的前端工程么(mocha, sinon, jasmin, qUnit..)?\n\n前端templating(Mustache, underscore, handlebars)是干嘛的, 怎么用?\n\n简述一下 Handlebars 的基本用法？\n\n简述一下 Handlerbars 的对模板的基本处理流程， 如何编译的？如何缓存的？\n\n用js实现千位分隔符?(来源：[前端农民工](http://div.io/topic/744)，提示：正则+replace)\n\n\t参考：http://www.tuicool.com/articles/ArQZfui\n\t\tfunction commafy(num) {\n    \t\treturn num && num\n        \t\t.toString()\n        \t\t.replace(/(\\d)(?=(\\d{3})+\\.)/g, function($0, $1) {\n            \treturn $1 + \",\";\n        });\n\t}\nconsole.log(commafy(1234567.90)); //1,234,567.90\n\n检测浏览器版本版本有哪些方式？\n\n\t功能检测、userAgent特征检测\n\n\t比如：navigator.userAgent\n\t//\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36\n\t  (KHTML, like Gecko) Chrome/41.0.2272.101 Safari/537.36\"\n\t  \nWhat is a Polyfill?\n\n\tpolyfill 是“在旧版浏览器上复制标准 API 的 JavaScript 补充”,可以动态地加载 JavaScript 代码或库，在不\t支持这些标准 API 的浏览器中模拟它们。\n\t例如，geolocation（地理位置）polyfill 可以在 navigator 对象上添加全局的 geolocation 对象，还能添加 \tgetCurrentPosition 函数以及“坐标”回调对象，\n\t所有这些都是 W3C 地理位置 API 定义的对象和函数。因为 polyfill 模拟标准 API，所以能够以一种面向所有浏览\t器未来的方式针对这些 API 进行开发，\n\t一旦对这些 API 的支持变成绝对大多数，则可以方便地去掉 polyfill，无需做任何额外工作。\n\t\n做的项目中，有没有用过或自己实现一些 polyfill 方案（兼容性处理方案）？\n\n\t比如： html5shiv、Geolocation、Placeholder \n\t\n我们给一个dom同时绑定两个点击事件，一个用捕获，一个用冒泡。会执行几次事件，会先执行冒泡还是捕获？\n\n使用JS实现获取文件扩展名？\n\n\tfunction getFileExtension(filename) {\n  \t\treturn filename.slice((filename.lastIndexOf(\".\") - 1 >>> 0) + 2);\n\t}   \n\n\tString.lastIndexOf() 方法返回指定值（本例中的'.'）在调用该方法的字符串中最后出现的位置，如果没找到则返\t回 -1。\n\t对于'filename'和'.hiddenfile'，lastIndexOf的返回值分别为0和-1无符号右移操作符(»>) 将-1转换为\t4294967295，将-2转换为4294967294，这个方法可以保证边缘情况时文件名不变。\n\tString.prototype.slice() 从上面计算的索引处提取文件的扩展名。如果索引比文件名的长度大，结果为\"\"。\nECMAScript6 相关\n\nObject.is() 与原来的比较操作符“ ===”、“ ==”的区别？\n\n\t两等号判等，会在比较时进行类型转换；\n\t三等号判等(判断严格)，比较时不进行隐式类型转换,（类型不同则会返回false）； \n\n\tObject.is 在三等号判等的基础上特别处理了 NaN 、-0 和 +0 ，保证 -0 和 +0 不再相同，\n\t但 Object.is(NaN, NaN) 会返回 true.\n\n\tObject.is 应被认为有其特殊的用途，而不能用它认为它比其它的相等对比更宽松或严格。\n前端框架相关\n\nreact-router 路由系统的实现原理？\n\nReact中如何解决第三方类库的问题?\n\n其他问题\n\n原来公司工作流程是怎么样的，如何与其他人协作的？如何夸部门合作的？\n\n你遇到过比较难的技术问题是？你是如何解决的？\n\n设计模式 知道什么是singleton, factory, strategy, decrator么?\n\n常使用的库有哪些？常用的前端开发工具？开发过什么应用或组件？\n\n页面重构怎么操作？\n\n\t网站重构：在不改变外部行为的前提下，简化结构、添加可读性，而在网站前端保持一致的行为。\n\t也就是说是在不改变UI的情况下，对网站进行优化，在扩展的同时保持一致的UI。\n\n\t对于传统的网站来说重构通常是：\n\n\t表格(table)布局改为DIV+CSS\n\t使网站前端兼容于现代浏览器(针对于不合规范的CSS、如对IE6有效的)\n\t对于移动平台的优化\n\t针对于SEO进行优化\n\t深层次的网站重构应该考虑的方面\n\t\n\t减少代码间的耦合\n\t让代码保持弹性\n\t严格按规范编写代码\n\t设计可扩展的API\n\t代替旧有的框架、语言(如VB)\n\t增强用户体验\n\t通常来说对于速度的优化也包含在重构中\n\n\t压缩JS、CSS、image等前端资源(通常是由服务器来解决)\n\t程序的性能优化(如数据读写)\n\t采用CDN来加速资源加载\n\t对于JS DOM的优化\n\tHTTP服务器的文件缓存\n\t\n列举IE与其他浏览器不一样的特性？\n\n\t1、事件不同之处：\n\n    触发事件的元素被认为是目标（target）。而在 IE 中，目标包含在 event 对象的 srcElement 属性；\n\n    获取字符代码、如果按键代表一个字符（shift、ctrl、alt除外），IE 的 keyCode 会返回字符代码（Unicode），DOM 中按键的代码和字符是分离的，要获取字符代码，需要使用 charCode 属性；\n\n    阻止某个事件的默认行为，IE 中阻止某个事件的默认行为，必须将 returnValue 属性设置为 false，Mozilla 中，需要调用 preventDefault() 方法；\n\n    停止事件冒泡，IE 中阻止事件进一步冒泡，需要设置 cancelBubble 为 true，Mozzilla 中，需要调用 stopPropagation()；\n    \n99%的网站都需要被重构是那本书上写的？\n\n\t网站重构：应用web标准进行设计（第2版）\n\n什么叫优雅降级和渐进增强？\n\n\t优雅降级：Web站点在所有新式浏览器中都能正常工作，如果用户使用的是老式浏览器，则代码会针对旧版本的IE进行降\t级处理了,使之在旧式浏览器上以某种形式降级体验却不至于完全不能用。\n\t如：border-shadow\n\t\n\t渐进增强：从被所有浏览器支持的基本功能开始，逐步地添加那些只有新版本浏览器才支持的功能,向页面增加不影响基础\t浏览器的额外样式和功能的。当浏览器支持时，它们会自动地呈现出来并发挥作用。\n\t如：默认使用flash上传，但如果浏览器支持 HTML5 的文件上传功能，则使用HTML5实现更好的体验；\n\t\n是否了解公钥加密和私钥加密?\n\t\n\t一般情况下是指私钥用于对数据进行签名，公钥用于对签名进行验证;\n\tHTTP网站在浏览器端用公钥加密敏感数据，然后在服务器端再用私钥解密。\n\t\nWEB应用从服务器主动推送Data到客户端有那些方式？\n\n\thtml5提供的Websocket\n\t不可见的iframe\n\tWebSocket通过Flash\n\tXHR长时间连接\n\tXHR Multipart Streaming\n\t<script>标签的长时间连接(可跨域)\n\t\n对Node的优点和缺点提出了自己的看法？\n\n\t*（优点）因为Node是基于事件驱动和无阻塞的，所以非常适合处理并发请求，\n\t  因此构建在Node上的代理服务器相比其他技术实现（如Ruby）的服务器表现要好得多。\n\t  此外，与Node代理服务器交互的客户端代码是由javascript语言编写的，\n\t  因此客户端和服务器端都用同一种语言编写，这是非常美妙的事情。\n\n\t*（缺点）Node是一个相对新的开源项目，所以不太稳定，它总是一直在变，\n\t  而且缺少足够多的第三方库支持。看起来，就像是Ruby/Rails当年的样子。\n\t  \n你有用过哪些前端性能优化的方法？\n\n  \t（1） 减少http请求次数：CSS Sprites, JS、CSS源码压缩、图片大小控制合适；网页Gzip，CDN托管，data缓\t存 ，图片服务器。\n\n    （2） 前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数\n\n  \t（3） 用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能。\n\n  \t（4） 当需要设置的样式很多时设置className而不是直接操作style。\n\n  \t（5） 少用全局变量、缓存DOM节点查找的结果。减少IO读取操作。\n\n  \t（6） 避免使用CSS Expression（css表达式)又称Dynamic properties(动态属性)。\n\n  \t（7） 图片预加载，将样式表放在顶部，将脚本放在底部  加上时间戳。\n\n  \t（8） 避免在页面的主体布局中使用table，table要等其中的内容完全下载之后才会显示出来，显示比div+css布局\t慢。\n\t  对普通的网站有一个统一的思路，就是尽量向前端优化、减少数据库操作、减少磁盘IO。向前端优化指的是，在不影响\t功能和体验的情况下，能在浏览器执行的不要在服务端执行，能在缓存服务器上直接返回的不要到应用服务器，程序能直接\t取得的结果不要到外部取得，本机内能取得的数据不要到远程取，内存能取到的不要到磁盘取，缓存中有的不要去数据库查\t询。减少数据库操作指减少更新次数、缓存结果减少查询次数、将数据库执行的操作尽可能的让你的程序完成（例如join\t查询），减少磁盘IO指尽量不使用文件系统作为缓存、减少读写文件次数等。程序优化永远要优化慢的部分，换语言是无\t法“优化”的。\n\t  \u0010\nhttp状态码有那些？分别代表是什么意思？\n\n    简单版\n    [\n        100  Continue   继续，一般在发送post请求时，已发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息\n        200  OK         正常返回信息\n        201  Created    请求成功并且服务器创建了新的资源\n        202  Accepted   服务器已接受请求，但尚未处理\n        301  Moved Permanently  请求的网页已永久移动到新位置。\n        302 Found       临时性重定向。\n        303 See Other   临时性重定向，且总是使用 GET 请求新的 URI。\n        304  Not Modified 自从上次请求后，请求的网页未修改过。\n\n        400 Bad Request  服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。\n        401 Unauthorized 请求未授权。\n        403 Forbidden   禁止访问。\n        404 Not Found   找不到如何与 URI 相匹配的资源。\n\n        500 Internal Server Error  最常见的服务器端错误。\n        503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）。\n    ]\n\n  \t完整版\n  \t1**(信息类)：表示接收到请求并且继续处理\n    \t100——客户必须继续发出请求\n    \t101——客户要求服务器根据请求转换HTTP协议版本\n\n  \t2**(响应成功)：表示动作被成功接收、理解和接受\n    \t200——表明该请求被成功地完成，所请求的资源发送回客户端\n    \t201——提示知道新文件的URL\n    \t202——接受和处理、但处理未完成\n    \t203——返回信息不确定或不完整\n    \t204——请求收到，但返回信息为空\n    \t205——服务器完成了请求，用户代理必须复位当前已经浏览过的文件\n    \t206——服务器已经完成了部分用户的GET请求\n\n  \t3**(重定向类)：为了完成指定的动作，必须接受进一步处理\n  \t  300——请求的资源可在多处得到\n  \t  301——本网页被永久性转移到另一个URL\n   \t  302——请求的网页被转移到一个新的地址，但客户访问仍继续通过原始URL地址，重定向，新的URL会在response中的\tLocation中返回，浏览器将会使用新的URL发出新的Request。\n    \t303——建议客户访问其他URL或访问方式\n    \t304——自从上次请求后，请求的网页未修改过，服务器返回此响应时，不会返回网页内容，代表上次的文档已经被缓\t存了，还可以继续使用\n    \t305——请求的资源必须从服务器指定的地址得到\n    \t306——前一版本HTTP中使用的代码，现行版本中不再使用\n    \t307——申明请求的资源临时性删除\n\n  \t4**(客户端错误类)：请求包含错误语法或不能正确执行\n    \t400——客户端请求有语法错误，不能被服务器所理解\n    \t401——请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用\n    \tHTTP 401.1 - 未授权：登录失败\n    　　HTTP 401.2 - 未授权：服务器配置问题导致登录失败\n    　　HTTP 401.3 - ACL 禁止访问资源\n    　　HTTP 401.4 - 未授权：授权被筛选器拒绝\n    HTTP 401.5 - 未授权：ISAPI 或 CGI 授权失败\n    402——保留有效ChargeTo头响应\n    403——禁止访问，服务器收到请求，但是拒绝提供服务\n    HTTP 403.1 禁止访问：禁止可执行访问\n    　　HTTP 403.2 - 禁止访问：禁止读访问\n    　　HTTP 403.3 - 禁止访问：禁止写访问\n    　　HTTP 403.4 - 禁止访问：要求 SSL\n    　　HTTP 403.5 - 禁止访问：要求 SSL 128\n    　　HTTP 403.6 - 禁止访问：IP 地址被拒绝\n    　　HTTP 403.7 - 禁止访问：要求客户证书\n    　　HTTP 403.8 - 禁止访问：禁止站点访问\n    　　HTTP 403.9 - 禁止访问：连接的用户过多\n    　　HTTP 403.10 - 禁止访问：配置无效\n    　　HTTP 403.11 - 禁止访问：密码更改\n    　　HTTP 403.12 - 禁止访问：映射器拒绝访问\n    　　HTTP 403.13 - 禁止访问：客户证书已被吊销\n    　　HTTP 403.15 - 禁止访问：客户访问许可过多\n    　　HTTP 403.16 - 禁止访问：客户证书不可信或者无效\n    HTTP 403.17 - 禁止访问：客户证书已经到期或者尚未生效\n    404——一个404错误表明可连接服务器，但服务器无法取得所请求的网页，请求资源不存在。eg：输入了错误的URL\n    405——用户在Request-Line字段定义的方法不允许\n    406——根据用户发送的Accept拖，请求资源不可访问\n    407——类似401，用户必须首先在代理服务器上得到授权\n    408——客户端没有在用户指定的饿时间内完成请求\n    409——对当前资源状态，请求不能完成\n    410——服务器上不再有此资源且无进一步的参考地址\n    411——服务器拒绝用户定义的Content-Length属性请求\n    412——一个或多个请求头字段在当前请求中错误\n    413——请求的资源大于服务器允许的大小\n    414——请求的资源URL长于服务器允许的长度\n    415——请求资源不支持请求项目格式\n    416——请求中包含Range请求头字段，在当前请求资源范围内没有range指示值，请求也不包含If-Range请求头字段\n    417——服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求长。\n\n  \t5**(服务端错误类)：服务器不能正确执行一个正确的请求\n    \tHTTP 500 - 服务器遇到错误，无法完成请求\n    　　HTTP 500.100 - 内部服务器错误 - ASP 错误\n    　　HTTP 500-11 服务器关闭\n    　　HTTP 500-12 应用程序重新启动\n    　　HTTP 500-13 - 服务器太忙\n    　　HTTP 500-14 - 应用程序无效\n    　　HTTP 500-15 - 不允许请求 global.asa\n    　　Error 501 - 未实现\n \t    HTTP 502 - 网关错误\n  \t\tHTTP 503：由于超载或停机维护，服务器目前无法使用，一段时间后可能恢复正常\n  \t\t\n一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？（流程说的越详细越好）\n\n  \t注：这题胜在区分度高，知识点覆盖广，再不懂的人，也能答出几句，\n  \t而高手可以根据自己擅长的领域自由发挥，从URL规范、HTTP协议、DNS、CDN、数据库查询、\n  \t到浏览器流式解析、CSS规则构建、layout、paint、onload/domready、JS执行、JS API绑定等等；\n\n  \t详细版：\n    \t1、浏览器会开启一个线程来处理这个请求，对 URL 分析判断如果是 http 协议就按照 Web 方式来处理;\n    \t2、调用浏览器内核中的对应方法，比如 WebView 中的 loadUrl 方法;\n    \t3、通过DNS解析获取网址的IP地址，设置 UA 等信息发出第二个GET请求;\n    \t4、进行HTTP协议会话，客户端发送报头(请求报头);\n    \t5、进入到web服务器上的 Web Server，如 Apache、Tomcat、Node.JS 等服务器;\n    \t6、进入部署好的后端应用，如 PHP、Java、JavaScript、Python 等，找到对应的请求处理;\n    \t7、处理结束回馈报头，此处如果浏览器访问过，缓存上有对应资源，会与服务器最后修改时间对比，一致则返回304;\n    \t8、浏览器开始下载html文档(响应报头，状态码200)，同时使用缓存;\n    \t9、文档树建立，根据标记请求所需指定MIME类型的文件（比如css、js）,同时设置了cookie;\n    \t10、页面开始渲染DOM，JS根据DOM API操作DOM,执行事件绑定等，页面显示完成。\n\n  \t简洁版：\n    \t浏览器根据请求的URL交给DNS域名解析，找到真实IP，向服务器发起请求；\n    \t服务器交给后台处理完成后返回数据，浏览器接收文件（HTML、JS、CSS、图象等）；\n    \t浏览器对加载到的资源（HTML、JS、CSS等）进行语法解析，建立相应的内部数据结构（如HTML的DOM）；\n    \t载入解析到的资源文件，渲染页面，完成。\n    \t\n部分地区用户反应网站很卡，请问有哪些可能性的原因，以及解决方法？\n\n从打开app到刷新出内容，整个过程中都发生了什么，如果感觉慢，怎么定位问题，怎么解决?\n\n除了前端以外还了解什么其它技术么？你最最厉害的技能是什么？\n\n你用的得心应手用的熟练地编辑器&开发环境是什么样子？\n\n\tSublime Text 3 + 相关插件编写前端代码\n\tGoogle chrome 、Mozilla Firefox浏览器 +firebug 兼容测试和预览页面UI、动画效果和交互功能\n\tNode.js+Gulp\n\tgit 用于版本控制和Code Review\n\t\n对前端工程师这个职位是怎么样理解的？它的前景会怎么样？\n\n\t前端是最贴近用户的程序员，比后端、数据库、产品经理、运营、安全都近。\n\t1、实现界面交互\n\t2、提升用户体验\n\t3、有了Node.js，前端可以实现服务端的一些事情\n\n\n\t前端是最贴近用户的程序员，前端的能力就是能让产品从 90分进化到 100 分，甚至更好，\n\n\t参与项目，快速高质量完成实现效果图，精确到1px；\n\n\t与团队成员，UI设计，产品经理的沟通；\n\n\t做好的页面结构，页面重构和用户体验；\n\n\t处理hack，兼容、写出优美的代码格式；\n\n\t针对服务器的优化、拥抱最新前端技术。\n\t\n你怎么看待Web App 、hybrid App、Native App？\n\n你移动端前端开发的理解？（和 Web 前端开发的主要区别是什么？）\n\n你对加班的看法？\n\n\t加班就像借钱，原则应当是------救急不救穷\n\t\n平时如何管理你的项目？\n\n\t先期团队必须确定好全局样式（globe.css），编码模式(utf-8) 等；\n\n\t编写习惯必须一致（例如都是采用继承式的写法，单样式都写成一行）；\n\n\t标注样式编写人，各模块都及时标注（标注关键样式调用的地方）；\n\n\t页面进行标注（例如 页面 模块 开始和结束）；\n\n\tCSS跟HTML 分文件夹并行存放，命名都得统一（例如style.css）；\n\n\tJS 分文件夹存放 命名以该JS功能为准的英文翻译。\n\n\t图片采用整合的 images.png png8 格式文件使用 尽量整合在一起使用方便将来的管理\n\t\n如何设计突发大规模并发架构？\n\n当团队人手不足，把功能代码写完已经需要加班的情况下，你会做前端代码的测试吗？\n\n说说最近最流行的一些东西吧？常去哪些网站？\n\n    ES6\\WebAssembly\\Node\\MVVM\\Web Components\\React\\React Native\\Webpack 组件化\n    \n知道什么是SEO并且怎么优化么? 知道各种meta data的含义么?\n\n移动端（Android IOS）怎么做好用户体验?\n\n\t清晰的视觉纵线、\n\t信息的分组、极致的减法、\n\t利用选择代替输入、\n\t标签及文字的排布方式、\n\t依靠明文确认密码、\n\t合理的键盘利用、\n\t\u0010\u0010\u0010\n简单描述一下你做过的移动APP项目研发流程？\n\n你在现在的团队处于什么样的角色，起到了什么明显的作用？\n\n你认为怎样才是全端工程师（Full Stack developer）？\n\n介绍一个你最得意的作品吧？\n\n你有自己的技术博客吗，用了哪些技术？\n\n对前端安全有什么看法？\n\n是否了解Web注入攻击，说下原理，最常见的两种攻击（XSS 和 CSRF）了解到什么程度？\n\n项目中遇到国哪些印象深刻的技术难题，具体是什么问题，怎么解决？。\n\n最近在学什么东西？\n\n你的优点是什么？缺点是什么？\n\n如何管理前端团队?\n\n最近在学什么？能谈谈你未来3，5年给自己的规划吗？\n\n\n## 前端学习网站推荐\n\n1. 极客标签：     http://www.gbtags.com/\n\n2. 码农周刊：     http://weekly.manong.io/issues/\n\n3. 前端周刊：     http://www.feweekly.com/issues\n\n4. 慕课网：       http://www.imooc.com/\n\n5. div.io：      http://div.io\n\n6. Hacker News： https://news.ycombinator.com/news\n\n7. InfoQ：       http://www.infoq.com/\n\n8. w3cplus：     http://www.w3cplus.com/\n\n9. Stack Overflow： http://stackoverflow.com/\n\n10. w3school：    http://www.w3school.com.cn/\n\n11. mozilla：     https://developer.mozilla.org/zh-CN/docs/Web/JavaScript  \n\n\n文档推荐\n\n[<font style=\"color:blue\">jQuery 基本原理</font>](http://docs.huihoo.com/jquery/jquery-fundamentals/zh-cn/index.html)\n\n[<font style=\"color:blue\">JavaScript 秘密花园</font>](http://bonsaiden.github.io/JavaScript-Garden/zh/)\n\n[<font style=\"color:blue\">CSS参考手册</font>](http://css.doyoe.com/)\n\n[<font style=\"color:blue\">JavaScript 标准参考教程</font>](http://javascript.ruanyifeng.com/)\n\n[<font style=\"color:blue\">ECMAScript 6入门</font>](http://javascript.ruanyifeng.com/)\n\n备注：\n\n\t根据自己需要选择性阅读，面试题是对理论知识的总结，让自己学会应该如何表达。\n\n\t资料答案不够正确和全面，欢迎欢迎Star和提交issues。\n\n\t格式不断修改更新中。\n\n\t在 github 项目的右上角，有三个按钮,分别是 watch、star、fork，新来的同学注意不要用错了，无休止的邮件提醒\t会给你造成不必要的信息干扰。\n\n\t当你选择Watching，表示你以后会关注这个项目的全部动态，以后只要这个项目发生变动，被别人提交了pull \trequest、被发起了issue等情况你都会收到邮件通知。\n\n\tstar相当于是点赞或收藏，方便以后查找。\n\n\tfork表示你想要补充完善这个项目的内容。\n\n\t更新记录：\n\n    2016年10月20日:更新一些已被发现的问题。\n\n    2016年8月25日：新增ECMAScript6 相关问题   \n\t","slug":"前端开发面试题","published":1,"updated":"2016-11-19T08:26:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civoyb9ov000t9xsmgpazdxsn","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><h2 id=\"只看问题点这里\"><a href=\"#只看问题点这里\" class=\"headerlink\" title=\"只看问题点这里\"></a><a href=\"http://markyun.github.io/2015/Front-end-Developer-Questions/\" target=\"_blank\" rel=\"external\"><font style=\"color:blue\">只看问题点这里</font></a></h2><h2 id=\"看全部问题和答案点这里\"><a href=\"#看全部问题和答案点这里\" class=\"headerlink\" title=\"看全部问题和答案点这里\"></a><a href=\"https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions/Questions-and-Answers\" target=\"_blank\" rel=\"external\"><font style=\"color:blue\">看全部问题和答案点这里</font></a></h2><p>本文由我收集总结了一些前端面试题，初学者阅后也要用心钻研其中的原理，重要知识需要系统学习、透彻学习，形成自己的知识链。万不可投机取巧，临时抱佛脚只求面试侥幸混过关是错误的！也是不可能的！不可能的！不可能的！</p>\n<p>前端还是一个年轻的行业，新的行业标准， 框架， 库都不断在更新和新增，正如赫门在2015深JS大会上的《前端服务化之路》主题演讲中说的一句话：“每18至24个月，前端都会难一倍”，这些变化使前端的能力更加丰富、创造的应用也会更加完美。所以关注各种前端技术，跟上快速变化的节奏，也是身为一个前端程序员必备的技能之一。</p>\n<p>最近也收到许多微博私信的鼓励和更正题目信息，后面会经常更新题目和答案到<a href=\"https://cuidapao.github.io/\" target=\"_blank\" rel=\"external\"><font style=\"color:blue\">github</font></a>博客。希望前端er达到既能使用也会表达，对理论知识有自己的理解。可根据下面的知识点一个一个去进阶学习，形成自己的职业技能链。</p>\n<p>面试有几点需注意：(来源<a href=\"http://weibo.com/wintercn\" target=\"_blank\" rel=\"external\"><font style=\"color:blue\">寒冬winter</font></a> 老师，github:@wintercn)</p>\n<p>面试题目： 根据你的等级和职位的变化，入门级到专家级，广度和深度都会有所增加。</p>\n<p>题目类型： 理论知识、算法、项目细节、技术视野、开放性题、工作案例。</p>\n<p>细节追问： 可以确保问到你开始不懂或面试官开始不懂为止，这样可以大大延展题目的区分度和深度，知道你的实际能力。因为这种知识关联是长时期的学习，临时抱佛脚绝对是记不住的。</p>\n<p>回答问题再棒，面试官（可能是你面试职位的直接领导），会考虑我要不要这个人做我的同事？所以态度很重要、除了能做事，还要会做人。（感觉更像是相亲( •̣̣̣̣̣̥́௰•̣̣̣̣̣̥̀ )）</p>\n<p>资深的前端开发能把absolute和relative弄混，这样的人不要也罢，因为团队需要的是：你这个人具有可以依靠的才能（靠谱）。</p>\n<h3 id=\"前端开发知识点：\"><a href=\"#前端开发知识点：\" class=\"headerlink\" title=\"前端开发知识点：\"></a>前端开发知识点：</h3><h4 id=\"HTML-amp-CSS：\"><a href=\"#HTML-amp-CSS：\" class=\"headerlink\" title=\"HTML&amp;CSS：\"></a>HTML&amp;CSS：</h4><pre><code>对Web标准的理解、浏览器内核差异、兼容性、hack、CSS基本功：布局、盒子模型、选择器优先级、\nHTML5、CSS3、Flexbox\n</code></pre><h4 id=\"JavaScript：\"><a href=\"#JavaScript：\" class=\"headerlink\" title=\"JavaScript：\"></a>JavaScript：</h4><pre><code>数据类型、运算、对象、Function、继承、闭包、作用域、原型链、事件、RegExp、JSON、Ajax、\nDOM、BOM、内存泄漏、跨域、异步装载、模板引擎、前端MVC、路由、模块化、Canvas、ECMAScript 6、Nodejs\n</code></pre><p>其他：<br>    移动端、响应式、自动化构建、HTTP、离线存储、WEB安全、优化、重构、团队协作、可维护、易用性、SEO、UED、架构、职业生涯、快速学习能力<br>作为一名前端工程师，无论工作年头长短都应该掌握的知识点：</p>\n<p>此条由 王子墨 发表在 攻城师的实验室</p>\n<pre><code>1、DOM结构 —— 两个节点之间可能存在哪些关系以及如何在节点之间任意移动。\n\n2、DOM操作 —— 如何添加、移除、移动、复制、创建和查找节点等。\n\n3、事件 —— 如何使用事件，以及IE和标准DOM事件模型之间存在的差别。\n\n4、XMLHttpRequest —— 这是什么、怎样完整地执行一次GET请求、怎样检测错误。\n\n5、严格模式与混杂模式 —— 如何触发这两种模式，区分它们有何意义。\n\n6、盒模型 —— 外边距、内边距和边框之间的关系，及IE8以下版本的浏览器中的盒模型\n\n7、块级元素与行内元素 —— 怎么用CSS控制它们、以及如何合理的使用它们\n\n8、浮动元素 —— 怎么使用它们、它们有什么问题以及怎么解决这些问题。\n\n9、HTML与XHTML —— 二者有什么区别，你觉得应该使用哪一个并说出理由。\n\n10、JSON —— 作用、用途、设计结构。\n</code></pre><h4 id=\"备注：\"><a href=\"#备注：\" class=\"headerlink\" title=\"备注：\"></a>备注：</h4><pre><code>根据自己需要选择性阅读，面试题是对理论知识的总结，让自己学会应该如何表达。\n\n资料答案不够正确和全面，欢迎欢迎Star和提交issues。\n\n格式不断修改更新中。\n</code></pre><h4 id=\"新增ECMAScript6-相关问题\"><a href=\"#新增ECMAScript6-相关问题\" class=\"headerlink\" title=\"新增ECMAScript6 相关问题\"></a>新增ECMAScript6 相关问题</h4><h4 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h4><p>Doctype作用？标准模式与兼容模式各有什么区别?</p>\n<pre><code>（1）、&lt;!DOCTYPE&gt;声明位于位于HTML文档中的第一行，处于 &lt;html&gt; 标签之前。告知浏览器的解析器用什么文档标准    解析这个文档。DOCTYPE不存在或格式不正确会导致文档以兼容模式呈现。\n\n（2）、标准模式的排版 和JS运作模式都是以该浏览器支持的最高标准运行。在兼容模式中，页面以宽松的向后兼容的方    式显示,模拟老式浏览器的行为以防止站点无法工作。\n</code></pre><p>HTML5 为什么只需要写 &lt;!DOCTYPE HTML&gt;？</p>\n<pre><code>HTML5 不基于 SGML，因此不需要对DTD进行引用，但是需要doctype来规范浏览器的行为（让浏览器按照它们应该的    方式来运行）；\n\n而HTML4.01基于SGML,所以需要对DTD进行引用，才能告知浏览器文档所使用的文档类型。\n</code></pre><p>行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？</p>\n<pre><code>首先：CSS规范规定，每个元素都有display属性，确定该元素的类型，每个元素都有默认的display值，如div的    display默认值为“block”，则为“块级”元素；span默认display属性值为“inline”，是“行内”元素。\n\n（1）行内元素有：a b span img input select strong（强调的语气）\n（2）块级元素有：div ul ol li dl dt dd h1 h2 h3 h4…p\n\n（3）常见的空元素：\n&lt;br&gt; &lt;hr&gt; &lt;img&gt; &lt;input&gt; &lt;link&gt; &lt;meta&gt;\n鲜为人知的是：\n&lt;area&gt; &lt;base&gt; &lt;col&gt; &lt;command&gt; &lt;embed&gt; &lt;keygen&gt; &lt;param&gt; &lt;source&gt; &lt;track&gt; &lt;wbr&gt;\n</code></pre><p>不同浏览器（版本）、HTML4（5）、CSS2等实际略有差异<br>参考: <a href=\"http://stackoverflow.com/questions/6867254/browsers-default-css-for-html-elements\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/6867254/browsers-default-css-for-html-elements</a><br>页面导入样式时，使用link和@import有什么区别？</p>\n<pre><code>（1）link属于XHTML标签，除了加载CSS外，还能用于定义RSS, 定义rel连接属性等作用；而@import是CSS提供的，    只能用于加载CSS;\n\n（2）页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载;\n\n（3）import是CSS2.1 提出的，只在IE5以上才能被识别，而link是XHTML标签，无兼容问题;\n介绍一下你对浏览器内核的理解？    \n</code></pre><p>介绍一下你对浏览器内核的理解？</p>\n<pre><code>主要分成两部分：渲染引擎(layout engineer或Rendering Engine)和JS引擎。\n渲染引擎：负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入CSS等），以及计算网页的显示方式，    然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏    览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核。\n\nJS引擎则：解析和执行javascript来实现网页的动态效果。\n\n最开始渲染引擎和JS引擎并没有区分的很明确，后来JS引擎越来越独立，内核就倾向于只指渲染引擎。\n</code></pre><p>常见的浏览器内核有哪些？</p>\n<pre><code>Trident内核：IE,MaxThon,TT,The World,360,搜狗浏览器等。[又称MSHTML]\nGecko内核：Netscape6及以上版本，FF,MozillaSuite/SeaMonkey等\nPresto内核：Opera7及以上。      [Opera内核原为：Presto，现为：Blink;]\nWebkit内核：Safari,Chrome等。   [ Chrome的：Blink（WebKit的分支）]\n</code></pre><p>详细文章：<a href=\"http://www.cnblogs.com/fullhouse/archive/2011/12/19/2293455.html\" target=\"_blank\" rel=\"external\"><font style=\"color:blue\">浏览器内核的解析和对比</font></a></p>\n<pre><code>html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？\n\n* HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加。\n  绘画 canvas;\n  用于媒介回放的 video 和 audio 元素;\n  本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失;\n  sessionStorage 的数据在浏览器关闭后自动删除;\n  语意化更好的内容元素，比如 article、footer、header、nav、section;\n  表单控件，calendar、date、time、email、url、search;\n  新的技术webworker, websocket, Geolocation;\n\n  移除的元素：\n      纯表现的元素：basefont，big，center，font, s，strike，tt，u;\n      对可用性产生负面影响的元素：frame，frameset，noframes；\n\n* 支持HTML5新标签：\n     IE8/IE7/IE6支持通过document.createElement方法产生的标签，\n     可以利用这一特性让这些浏览器支持HTML5新标签，\n     浏览器支持新标签后，还需要添加标签默认的样式。\n\n     当然也可以直接使用成熟的框架、比如html5shim;\n     &lt;!--[if lt IE 9]&gt;\n        &lt;script&gt; src=&quot;http://html5shim.googlecode.com/svn/trunk/html5.js&quot;&lt;/script&gt;\n     &lt;![endif]--&gt;\n\n* 如何区分HTML5： DOCTYPE声明\\新增的结构元素\\功能元素\n</code></pre><p>简述一下你对HTML语义化的理解？</p>\n<pre><code>用正确的标签做正确的事情。\nhtml语义化让页面的内容结构化，结构更清晰，便于对浏览器、搜索引擎解析;\n即使在没有样式CSS情况下也以一种文档格式显示，并且是容易阅读的;\n搜索引擎的爬虫也依赖于HTML标记来确定上下文和各个关键字的权重，利于SEO;\n使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。\n</code></pre><p>HTML5的离线储存怎么使用，工作原理能不能解释一下？</p>\n<pre><code>在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件。\n原理：HTML5的离线存储是基于一个新建的.appcache文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线    存储资源，这些资源就会像cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据    进行页面展示。\n\n\n如何使用：\n1、页面头部像下面一样加入一个manifest的属性；\n2、在cache.manifest文件的编写离线存储的资源；\n    CACHE MANIFEST\n    #v0.11\n        CACHE:\n    js/app.js\n    css/style.css\n    NETWORK:\n    resourse/logo.png\n       FALLBACK:\n    / /offline.html\n3、在离线状态时，操作window.applicationCache进行需求实现。\n</code></pre><p>\u0010\u0010\u0010\u0010\u0010\u0010详细的使用请参考：<a href=\"http://yanhaijing.com/html/2014/12/28/html5-manifest/\" target=\"_blank\" rel=\"external\"><font style=\"color:blue\">HTML5 离线缓存-manifest简介</font></a></p>\n<p><a href=\"https://segmentfault.com/a/1190000000732617\" target=\"_blank\" rel=\"external\"><font style=\"color:blue\">有趣的HTML5：离线存储</font></a></p>\n<p>浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢？</p>\n<pre><code>在线的情况下，浏览器发现html头部有manifest属性，它会请求manifest文件，如果是第一次访问app，那么浏览器就    会根据manifest文件的内容下载相应的资源并且进行离线存储。如果已经访问过app并且资源已经离线存储了，那么浏览    器就会使用离线的资源加载页面，然后浏览器会对比新的manifest文件与旧的manifest文件，如果文件没有发生改变，    就不做任何操作，如果文件改变了，那么就会重新下载文件中的资源并进行离线存储。\n离线的情况下，浏览器就直接使用离线存储的资源。\n</code></pre><p>详细请参考：<a href=\"https://segmentfault.com/a/1190000000732617\" target=\"_blank\" rel=\"external\"><font style=\"color:blue\">有趣的HTML5：离线存储</font></a></p>\n<p>请描述一下 cookies，sessionStorage 和 localStorage 的区别？</p>\n<pre><code>cookie是网站为了标示用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）。\ncookie数据始终在同源的http请求中携带（即使不需要），记会在浏览器和服务器间来回传递。\nsessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。\n\n存储大小：\n    cookie数据大小不能超过4k。\n    sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。\n\n有期时间：\n       localStorage    存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；\n    sessionStorage  数据在当前浏览器窗口关闭后自动删除。\n    cookie          设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭\n</code></pre><p>iframe有那些缺点？</p>\n<pre><code>*iframe会阻塞主页面的Onload事件；\n*搜索引擎的检索程序无法解读这种页面，不利于SEO;\n\n*iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。\n\n使用iframe之前需要考虑这两个缺点。如果需要使用iframe，最好是通过javascript\n动态给iframe添加src属性值，这样可以绕开以上两个问题。\n</code></pre><p>Label的作用是什么？是怎么用的？</p>\n<pre><code>label标签来定义表单控制间的关系,当用户选择该标签时，浏览器会自动将焦点转到和标签相关的表单控件上。\n\n&lt;label for=&quot;Name&quot;&gt;Number:&lt;/label&gt;\n&lt;input type=“text“name=&quot;Name&quot; id=&quot;Name&quot;/&gt;\n\n&lt;label&gt;Date:&lt;input type=&quot;text&quot; name=&quot;B&quot;/&gt;&lt;/label&gt;\n</code></pre><p>HTML5的form如何关闭自动完成功能？</p>\n<pre><code>给不想要提示的 form 或某个 input 设置为 autocomplete=off。\n</code></pre><p>如何实现浏览器内多个标签页之间的通信? (阿里)</p>\n<pre><code>WebSocket、SharedWorker；\n也可以调用localstorge、cookies等本地存储方式；\n\nlocalstorge另一个浏览上下文里被添加、修改或删除时，它都会触发一个事件，\n我们通过监听事件，控制它的值来进行页面信息通信；\n注意quirks：Safari 在无痕模式下设置localstorge值时会抛出 QuotaExceededError 的异常；\n</code></pre><p>webSocket如何兼容低浏览器？(阿里)</p>\n<pre><code>Adobe Flash Socket 、\nActiveX HTMLFile (IE) 、\n基于 multipart 编码发送 XHR 、\n基于长轮询的 XHR\n页面可见性（Page Visibility API） 可以有哪些用途？\n\n通过 visibilityState 的值检测页面当前是否可见，以及打开网页的时间等;\n在页面被切换到其他后台进程的时候，自动暂停音乐或视频的播放；\n</code></pre><p>如何在页面上实现一个圆形的可点击区域？</p>\n<pre><code>1、map+area或者svg\n2、border-radius\n3、纯js实现 需要求一个点在不在圆上简单算法、获取鼠标坐标等等\n</code></pre><p>实现不使用 border 画出1px高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果。</p>\n<pre><code>&lt;div style=&quot;height:1px;overflow:hidden;background:red&quot;&gt;&lt;/div&gt;\n</code></pre><p>网页验证码是干嘛的，是为了解决什么安全问题?</p>\n<pre><code>区分用户是计算机还是人的公共全自动程序。可以防止恶意破解密码、刷票、论坛灌水；\n有效防止黑客对某一个特定注册用户用特定程序暴力破解方式进行不断的登陆尝试。\n</code></pre><p>title与h1的区别、b与strong的区别、i与em的区别？</p>\n<pre><code>title属性没有明确意义只表示是个标题，H1则表示层次明确的标题，对页面信息的抓取也有很大的影响；\n\nstrong是标明重点内容，有语气加强的含义，使用阅读设备阅读网络时：&lt;strong&gt;会重读，而&lt;B&gt;是展示强调内容。\n\ni内容展示为斜体，em表示强调的文本；\n\nPhysical Style Elements -- 自然样式标签\nb, i, u, s, pre\nSemantic Style Elements -- 语义样式标签\nstrong, em, ins, del, code\n应该准确使用语义样式标签, 但不能滥用, 如果不能确定时首选使用自然样式标签。\n</code></pre><h4 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h4><p>介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？</p>\n<pre><code>（1）有两种， IE 盒子模型、W3C 盒子模型；\n（2）盒模型： 内容(content)、填充(padding)、边界(margin)、 边框(border)；\n（3）区  别： IE的content部分把 border 和 padding计算了进去;\n</code></pre><p>CSS选择符有哪些？哪些属性可以继承？</p>\n<pre><code>*   1.id选择器（ # myid）\n    2.类选择器（.myclassname）\n        3.标签选择器（div, h1, p）\n    4.相邻选择器（h1 + p）\n    5.子选择器（ul &gt; li）\n    6.后代选择器（li a）\n    7.通配符选择器（ * ）\n    8.属性选择器（a[rel = &quot;external&quot;]）\n    9.伪类选择器（a:hover, li:nth-child）\n\n*   可继承的样式： font-size font-family color, UL LI DL DD DT;\n\n*   不可继承的样式：border padding margin width height ;\n</code></pre><p>CSS优先级算法如何计算？</p>\n<ul>\n<li><p>优先级就近原则，同权重情况下样式定义最近者为准;</p>\n</li>\n<li><p>载入样式以最后载入的定位为准;</p>\n</li>\n</ul>\n<p>优先级为:<br>   !important &gt;  id &gt; class &gt; tag<br>    important 比 内联优先级高<br>CSS3新增伪类有那些？</p>\n<pre><code>举例：\np:first-of-type 选择属于其父元素的首个 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。\np:last-of-type  选择属于其父元素的最后 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。\np:only-of-type  选择属于其父元素唯一的 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。\np:only-child        选择属于其父元素的唯一子元素的每个 &lt;p&gt; 元素。\np:nth-child(2)  选择属于其父元素的第二个子元素的每个 &lt;p&gt; 元素。\n\n:after          在元素之前添加内容,也可以用来做清除浮动。\n:before         在元素之后添加内容\n:enabled        \n:disabled       控制表单控件的禁用状态。\n:checked        单选框或复选框被选中。\n</code></pre><p>如何居中div？</p>\n<pre><code>* 水平居中：给div设置一个宽度，然后添加margin:0 auto属性\n\ndiv{\n    width:200px;\n    margin:0 auto;\n}\n* 让绝对定位的div居中\n\ndiv {\n    position: absolute;\n    width: 300px;\n    height: 300px;\n    margin: auto;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    background-color: pink; /* 方便看效果 */\n}\n* 水平垂直居中一\n\n确定容器的宽高 宽500 高 300 的层\n设置层的外边距\n\ndiv {\n    position: relative;     /* 相对定位或绝对定位均可 */\n    width:500px; \n    height:300px;\n    top: 50%;\n    left: 50%;\n    margin: -150px 0 0 -250px;      /* 外边距为自身宽高的一半 */\n    background-color: pink;     /* 方便看效果 */\n\n }\n\n* 水平垂直居中二\n\n未知容器的宽高，利用 `transform` 属性\n\ndiv {\n    position: absolute;     /* 相对定位或绝对定位均可 */\n    width:500px; \n    height:300px;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    background-color: pink;     /* 方便看效果 */\n\n}\n\n* 水平垂直居中三\n\n利用 flex 布局\n实际使用时应考虑兼容性\n\n.container {\n    display: flex; \n    align-items: center;        /* 垂直居中 */\n    justify-content: center;    /* 水平居中 */\n\n}\n.container div {\n    width: 100px;\n    height: 100px;\n    background-color: pink;     /* 方便看效果 */\n}      \n</code></pre><p>display有哪些值？说明他们的作用。</p>\n<pre><code>block         块类型。默认宽度为父元素宽度，可设置宽高，换行显示。\nnone          缺省值。象行内元素类型一样显示。\ninline        行内元素类型。默认宽度为内容宽度，不可设置宽高，同行显示。\ninline-block  默认宽度为内容宽度，可以设置宽高，同行显示。\nlist-item     象块类型元素一样显示，并添加样式列表标记。\ntable         此元素会作为块级表格来显示。\ninherit       规定应该从父元素继承 display 属性的值。\n</code></pre><p>position的值relative和absolute定位原点是？</p>\n<pre><code>  absolute\n生成绝对定位的元素，相对于值不为 static的第一个父元素进行定位。\n  fixed （老IE不支持）\n生成绝对定位的元素，相对于浏览器窗口进行定位。\n  relative\n生成相对定位的元素，相对于其正常位置进行定位。\n  static\n默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right z-index 声明）。\n  inherit\n规定从父元素继承 position 属性的值。\n</code></pre><p>CSS3有哪些新特性？</p>\n<pre><code>新增各种CSS选择器  （: not(.input)：所有 class 不是“input”的节点）\n圆角            （border-radius:8px）\n多列布局      （multi-column layout）\n阴影和反射   （Shadow\\Reflect）\n文字特效      （text-shadow、）\n文字渲染      （Text-decoration）\n线性渐变      （gradient）\n旋转            （transform）\n缩放,定位,倾斜,动画,多背景\n例如:transform:\\scale(0.85,0.90)\\ translate(0px,-30px)\\ skew(-9deg,0deg)\\Animation:\n</code></pre><p>请解释一下CSS3的Flexbox（弹性盒布局模型）,以及适用场景？</p>\n<pre><code>一个用于页面布局的全新CSS3功能，Flexbox可以把列表放在同一个方向（从上到下排列，从左到右），并让列表能延伸    到占用可用的空间。\n较为复杂的布局还可以通过嵌套一个伸缩容器（flex container）来实现。\n采用Flex布局的元素，称为Flex容器（flex container），简称&quot;容器&quot;。\n它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称&quot;项目&quot;。\n常规布局是基于块和内联流方向，而Flex布局是基于flex-flow流可以很方便的用来做局中，能对不同屏幕大小自适应。\n在布局上有了比以前更加灵活的空间。\n\n具体：http://www.w3cplus.com/css3/flexbox-basics.html\n</code></pre><p>用纯CSS创建一个三角形的原理是什么？</p>\n<pre><code>把上、左、右三条边隐藏掉（颜色设为 transparent）\n#demo {\n      width: 0;\n     height: 0;\n      border-width: 20px;\n      border-style: solid;\n      border-color: transparent transparent red transparent;\n}\n</code></pre><p>一个满屏 品 字布局 如何设计?</p>\n<pre><code>简单的方式：\n    上面的div宽100%，\n    下面的两个div分别宽50%，\n    然后用float或者inline使其不换行即可\n</code></pre><p>css多列等高如何实现？</p>\n<pre><code>利用padding-bottom|margin-bottom正负值相抵；\n设置父容器设置超出隐藏（overflow:hidden），这样子父容器的高度就还是它里面的列没有设定padding-bottom时    的高度，\n当它里面的任 一列高度增加了，则父容器的高度被撑到里面最高那列的高度，\n其他比这列矮的列会用它们的padding-bottom补偿这部分高度差。\n</code></pre><p>经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用hack的技巧 ？</p>\n<pre><code>* png24位的图片在iE6浏览器上出现背景，解决方案是做成PNG8.\n\n* 浏览器默认的margin和padding不同。解决方案是加一个全局的*{margin:0;padding:0;}来统一。\n\n* IE6双边距bug:块属性标签float后，又有横行的margin情况下，在ie6显示margin比设置的大。\n\n  浮动ie产生的双倍距离 #box{ float:left; width:10px; margin:0 0 0 100px;}\n\n  这种情况之下IE会产生20px的距离，解决方案是在float的标签样式控制中加入 ——_display:inline;将其转化为行    内属性。(_这个符号只有ie6会识别)\n\n  渐进识别的方式，从总体中逐渐排除局部。\n\n  首先，巧妙的使用“\\9”这一标记，将IE游览器从所有情况中分离出来。\n  接着，再次使用“+”将IE8和IE7、IE6分离开来，这样IE8已经独立识别。\n\n  css\n      .bb{\n          background-color:red;/*所有识别*/\n          background-color:#00deff\\9; /*IE6、7、8识别*/\n          +background-color:#a200ff;/*IE6、7识别*/\n          _background-color:#1e0bd1;/*IE6识别*/\n      }\n\n\n*  IE下,可以使用获取常规属性的方法来获取自定义属性,\n       也可以使用getAttribute()获取自定义属性;\n       Firefox下,只能使用getAttribute()获取自定义属性。\n       解决方法:统一通过getAttribute()获取自定义属性。\n\n*  IE下,even对象有x,y属性,但是没有pageX,pageY属性;\n       Firefox下,event对象有pageX,pageY属性,但是没有x,y属性。\n\n*  解决方法：（条件注释）缺点是在IE浏览器下可能会增加额外的HTTP请求数。\n\n*  Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示,\n       可通过加入 CSS 属性 -webkit-text-size-adjust: none; 解决。\n\n超链接访问过后hover样式就不出现了 被点击访问过的超链接样式不在具有hover和active了解决方法是改变CSS属性    的排列顺序:\nL-V-H-A :  a:link {} a:visited {} a:hover {} a:active {}\n</code></pre><p>li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？</p>\n<pre><code>行框的排列会受到中间空白（回车\\空格）等的影响，因为空格也属于字符,这些空白也会被应用样式，占据空间，所以会    有间隔，把字符大小设为0，就没有空格了。\n</code></pre><p>为什么要初始化CSS样式?</p>\n<pre><code>- 因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没对CSS初始化往往会出现浏览器之间的页面    显示差异。\n\n- 当然，初始化样式会对SEO有一定的影响，但鱼和熊掌不可兼得，但力求影响最小的情况下初始化。\n\n最简单的初始化方法： * {padding: 0; margin: 0;} （强烈不建议）\n\n淘宝的样式初始化代码：\nbody, h1, h2, h3, h4, h5, h6, hr, p, blockquote, dl, dt, dd, ul, ol, li, pre, form,     fieldset, legend, button, input, textarea, th, td { margin:0; padding:0; }\nbody, button, input, select, textarea { font:12px/1.5tahoma, arial, \\5b8b\\4f53; }\nh1, h2, h3, h4, h5, h6{ font-size:100%; }\naddress, cite, dfn, em, var { font-style:normal; }\ncode, kbd, pre, samp { font-family:couriernew, courier, monospace; }\nsmall{ font-size:12px; }\nul, ol { list-style:none; }\na { text-decoration:none; }\na:hover { text-decoration:underline; }\nsup { vertical-align:text-top; }\nsub{ vertical-align:text-bottom; }\nlegend { color:#000; }\nfieldset, img { border:0; }\nbutton, input, select, textarea { font-size:100%; }\ntable { border-collapse:collapse; border-spacing:0; }\n</code></pre><p>absolute的containing block(容器块)计算方式跟正常流有什么不同？</p>\n<pre><code>无论属于哪种，都要先找到其祖先元素中最近的 position 值不为 static 的元素，然后再判断：\n1、若此元素为 inline 元素，则 containing block 为能够包含这个元素生成的第一个和最后一个 inline box     的 padding box (除 margin, border 外的区域) 的最小矩形；\n2、否则,则由这个祖先元素的 padding box 构成。\n如果都找不到，则为 initial containing block。\n\n补充：\n1. static(默认的)/relative：简单说就是它的父元素的内容框（即去掉padding的部分）\n2. absolute: 向上找最近的定位为absolute/relative的元素\n3. fixed: 它的containing block一律为根元素(html/body)，根元素也是initial containing block\n</code></pre><h5 id=\"CSS里的visibility属性有个collapse属性值是干嘛用的？在不同浏览器下以后什么区别？\"><a href=\"#CSS里的visibility属性有个collapse属性值是干嘛用的？在不同浏览器下以后什么区别？\" class=\"headerlink\" title=\"CSS里的visibility属性有个collapse属性值是干嘛用的？在不同浏览器下以后什么区别？\"></a>CSS里的visibility属性有个collapse属性值是干嘛用的？在不同浏览器下以后什么区别？</h5><h5 id=\"position跟display、margin-collapse、overflow、float这些特性相互叠加后会怎么样？\"><a href=\"#position跟display、margin-collapse、overflow、float这些特性相互叠加后会怎么样？\" class=\"headerlink\" title=\"position跟display、margin collapse、overflow、float这些特性相互叠加后会怎么样？\"></a>position跟display、margin collapse、overflow、float这些特性相互叠加后会怎么样？</h5><h5 id=\"对BFC规范-块级格式化上下文：block-formatting-context-的理解？\"><a href=\"#对BFC规范-块级格式化上下文：block-formatting-context-的理解？\" class=\"headerlink\" title=\"对BFC规范(块级格式化上下文：block formatting context)的理解？\"></a>对BFC规范(块级格式化上下文：block formatting context)的理解？</h5><pre><code>（W3C CSS 2.1 规范中的一个概念,它是一个独立容器，决定了元素如何对其内容进行定位,以及与其他元素的关系和相    互作用。）\n     一个页面是由很多个 Box 组成的,元素的类型和 display 属性,决定了这个 Box 的类型。\n     不同类型的 Box,会参与不同的 Formatting Context（决定如何渲染文档的容器）,因此Box内的元素会以不同的方式渲染,也就是说BFC内部的元素和外部的元素不会互相影响。\n</code></pre><p>css定义的权重</p>\n<pre><code>以下是权重的规则：标签的权重为1，class的权重为10，id的权重为100，以下例子是演示各种定义的权重值：\n\n/*权重为1*/\ndiv{\n}\n/*权重为10*/\n.class1{\n}\n/*权重为100*/\n#id1{\n}\n/*权重为100+1=101*/\n#id1 div{\n}\n/*权重为10+1=11*/\n.class1 div{\n}\n/*权重为10+10+1=21*/\n.class1 .class2 div{\n}\n\n如果权重相同，则最后定义的样式会起作用，但是应该避免这种情况出现\n</code></pre><p>请解释一下为什么需要清除浮动？清除浮动的方式</p>\n<p>清除浮动是为了清除使用浮动元素产生的影响。浮动的元素，高度会塌陷，而高度的塌陷使我们页面后面的布局不能正常显示。</p>\n<pre><code>1、父级div定义height；\n2、父级div 也一起浮动；\n3、常规的使用一个class；\n    .clearfix:before, .clearfix:after {\n        content: &quot; &quot;;\n        display: table;\n    }\n        .clearfix:after {\n        clear: both;\n    }\n    .clearfix {\n        *zoom: 1;\n    }\n\n4、SASS编译的时候，浮动元素的父级div定义伪类:after\n    &amp;:after,&amp;:before{\n        content: &quot; &quot;;\n        visibility: hidden;\n        display: block;\n        height: 0;\n        clear: both;\n    }\n</code></pre><p>解析原理：<br>    1) display:block 使生成的元素以块级元素显示,占满剩余空间;<br>    2) height:0 避免生成内容破坏原有布局的高度。<br>    3) visibility:hidden 使生成的内容不可见，并允许可能被生成内容盖住的内容可以进行点击和交互;<br>    4）通过 content:”.”生成内容作为最后一个元素，至于content里面是点还是其他都是可以的，例如oocss里面就有    经典的 content:”.”,有些版本可能content 里面内容为空,一丝冰凉是不推荐这样做的,firefox直到7.0     content:”” 仍然会产生额外的空隙；<br>    5）zoom：1 触发IE hasLayout。</p>\n<pre><code>通过分析发现，除了clear：both用来闭合浮动的，其他代码无非都是为了隐藏掉content生成的内容，这也就是其他版    本的闭合浮动为什么会有font-size：0，line-height：0。\n</code></pre><p>zoom:1的清楚浮动原理?</p>\n<pre><code>清楚浮动，触发hasLayout；\nZoom属性是IE浏览器的专有属性，它可以设置或检索对象的缩放比例。解决ie下比较奇葩的bug。\n譬如外边距（margin）的重叠，浮动清除，触发ie的haslayout属性等。\n\n来龙去脉大概如下：\n当设置了zoom的值之后，所设置的元素就会就会扩大或者缩小，高度宽度就会重新计算了，这里一旦改变zoom值时其实也    会发生重新渲染，运用这个原理，也就解决了ie下子元素浮动时候父元素不随着自动扩大的问题。\n\nZoom属是IE浏览器的专有属性，火狐和老版本的webkit核心的浏览器都不支持这个属性。然而，zoom现在已经被逐步标    准化，出现在 CSS 3.0 规范草案中。\n\n目前非ie由于不支持这个属性，它们又是通过什么属性来实现元素的缩放呢？\n可以通过css3里面的动画属性scale进行缩放。\n</code></pre><p>移动端的布局用过媒体查询吗？</p>\n<pre><code>假设你现在正用一台显示设备来阅读这篇文章，同时你也想把它投影到屏幕上，或者打印出来， 而显示设备、屏幕投影和    打印等这些媒介都有自己的特点，CSS就是为文档提供在不同媒介上展示的适配方法\n\n当媒体查询为真时，相关的样式表或样式规则会按照正常的级联规被应用。 当媒体查询返回假， 标签上带有媒体查询的    样式表 仍将被下载 （只不过不会被应用）。\n\n包含了一个媒体类型和至少一个使用 宽度、高度和颜色等媒体属性来限制样式表范围的表达式。 CSS3加入的媒体查询使    得无需修改内容便可以使样式应用于某些特定的设备范围。\n\n@media (min-width: 700px) and (orientation: landscape){ .sidebar { display: none; } }\n</code></pre><p>使用 CSS 预处理器吗？喜欢那个？</p>\n<pre><code>SASS (SASS、LESS没有本质区别，只因为团队前端都是用的SASS)\nCSS优化、提高性能的方法有哪些？\n\n关键选择器（key selector）。选择器的最后面的部分为关键选择器（即用来匹配目标元素的部分）；\n如果规则拥有 ID 选择器作为其关键选择器，则不要为规则增加标签。过滤掉无关的规则（这样样式系统就不会浪费时间    去匹配它们了）；\n提取项目的通用公有样式，增强可复用性，按模块编写组件；增强项目的协同开发性、可维护性和可扩展性;\n使用预处理工具或构建工具（gulp对css进行语法检查、自动补前缀、打包压缩、自动优雅降级）；\n</code></pre><p>浏览器是怎样解析CSS选择器的？</p>\n<pre><code>样式系统从关键选择器开始匹配，然后左移查找规则选择器的祖先元素。\n只要选择器的子树一直在工作，样式系统就会持续左移，直到和规则匹配，或者是因为不匹配而放弃该规则。\n在网页中的应该使用奇数还是偶数的字体？为什么呢？\n</code></pre><p>margin和padding分别适合什么场景使用？</p>\n<pre><code>margin是用来隔开元素与元素的间距；padding是用来隔开元素与内容的间隔。\nmargin用于布局分开元素使元素与元素互不相干；\npadding用于元素与内容之间的间隔，让内容（文字）与（包裹）元素之间有一段\n抽离样式模块怎么写，说出思路，有无实践经验？[阿里航旅的面试题]\n</code></pre><p>元素竖向的百分比设定是相对于容器的高度吗？</p>\n<p>全屏滚动的原理是什么？用到了CSS的那些属性？</p>\n<p>什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE？</p>\n<p>视差滚动效果，如何给每页做不同的动画？（回到顶部，向下滑动要再次出现，和只出现一次分别怎么做？）</p>\n<pre><code>::before 和 :after中双冒号和单冒号 有什么区别？解释一下这2个伪元素的作用。\n\n单冒号(:)用于CSS3伪类，双冒号(::)用于CSS3伪元素。（伪元素由双冒号和伪元素名称组成）\n双冒号是在当前规范中引入的，用于区分伪类和伪元素。不过浏览器需要同时支持旧的已经存在的伪元素写法，\n比如:first-line、:first-letter、:before、:after等，\n而新的在CSS3中引入的伪元素则不允许再支持旧的单冒号的写法。\n\n想让插入的内容出现在其它内容前，使用::before，否者，使用::after；\n在代码顺序上，::after生成的内容也比::before生成的内容靠后。\n如果按堆栈视角，::after生成的内容会在::before生成的内容之上\n</code></pre><p>如何修改chrome记住密码后自动填充表单的黄色背景 ？</p>\n<pre><code>input:-webkit-autofill, textarea:-webkit-autofill, select:-webkit-autofill {\n      background-color: rgb(250, 255, 189); /* #FAFFBD; */\n      background-image: none;\n      color: rgb(0, 0, 0);\n}\n</code></pre><p>你对line-height是如何理解的？</p>\n<p>设置元素浮动后，该元素的display值是多少？</p>\n<pre><code>自动变成了 display:block\n</code></pre><p>怎么让Chrome支持小于12px 的文字？</p>\n<pre><code>1、用图片：如果是内容固定不变情况下，使用将小于12px文字内容切出做图片，这样不影响兼容也不影响美观。\n2、使用12px及12px以上字体大小：为了兼容各大主流浏览器，建议设计美工图时候设置大于或等于12px的字体大小，如    果是接单的这个时候就需要给客户讲解小于12px浏览器不兼容等事宜。\n3、继续使用小于12px字体大小样式设置：如果不考虑chrome可以不用考虑兼容，同时在设置小于12px对象设置-    webkit-text-size-adjust:none，做到最大兼容考虑。\n4、使用12px以上字体：为了兼容、为了代码更简单 从新考虑权重下兼容性。        \n</code></pre><p>让页面里的字体变清晰，变细用CSS怎么做？</p>\n<pre><code>-webkit-font-smoothing: antialiased;\n</code></pre><p>font-style属性可以让它赋值为“oblique” oblique是什么意思？</p>\n<pre><code>倾斜的字体样式\n</code></pre><p>position:fixed;在android下无效怎么处理？</p>\n<pre><code>fixed的元素是相对整个页面固定位置的，你在屏幕上滑动只是在移动这个所谓的viewport，\n原来的网页还好好的在那，fixed的内容也没有变过位置，\n所以说并不是iOS不支持fixed，只是fixed的元素不是相对手机屏幕固定的。\n&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0,     minimum-scale=1.0, user-scalable=no&quot;/&gt;\n</code></pre><p>如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里）</p>\n<pre><code>多数显示器默认频率是60Hz，即1秒刷新60次，所以理论上最小间隔为1/60＊1000ms ＝ 16.7ms\ndisplay:inline-block 什么时候会显示间隙？(携程)\n\n移除空格、使用margin负值、使用font-size:0、letter-spacing、word-spacing\n</code></pre><p>overflow: scroll时不能平滑滚动的问题怎么处理？</p>\n<pre><code>有一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度。\n</code></pre><p>png、jpg、gif 这些图片格式解释一下，分别什么时候用。有没有了解过webp？</p>\n<p>什么是Cookie 隔离？（或者说：请求资源的时候不要让它带cookie怎么做）</p>\n<pre><code>如果静态文件都放在主域名下，那静态文件请求的时候都带有的cookie的数据提交给server的，非常浪费流量，\n所以不如隔离开。\n\n因为cookie有域的限制，因此不能跨域提交请求，故使用非主要域名的时候，请求头中就不会带有cookie数据，\n这样可以降低请求头的大小，降低请求时间，从而达到降低整体请求延时的目的。\n\n同时这种方式不会将cookie传入Web Server，也减少了Web Server对cookie的处理分析环节，\n提高了webserver的http请求的解析速度。\n</code></pre><p>style标签写在body后与body前有什么区别？</p>\n<p>什么是CSS 预处理器 / 后处理器？</p>\n<pre><code>- 预处理器例如：LESS、Sass、Stylus，用来预编译Sass或less，增强了css代码的复用性，\n  还有层级、mixin、变量、循环、函数等，具有很方便的UI组件模块化开发能力，极大的提高工作效率。\n\n- 后处理器例如：PostCSS，通常被视为在完成的样式表中根据CSS规范处理CSS，让其更有效；目前最常做的\n  是给CSS属性添加浏览器私有前缀，实现跨浏览器兼容性的问题。\n</code></pre><h4 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h4><p>介绍js的基本数据类型。</p>\n<pre><code>Undefined、Null、Boolean、Number、String、\nECMAScript 2015 新增:Symbol(创建后独一无二且不可变的数据类型 )\n</code></pre><p>介绍js有哪些内置对象？</p>\n<pre><code>Object 是 JavaScript 中所有对象的父对象\n\n数据封装类对象：Object、Array、Boolean、Number 和 String\n其他对象：Function、Arguments、Math、Date、RegExp、Error\n\n参考：http://www.ibm.com/developerworks/cn/web/wa-objectsinjs-v1b/index.html\n</code></pre><p>说几条写JavaScript的基本规范？</p>\n<pre><code>1.不要在同一行声明多个变量。\n2.请使用 ===/!==来比较true/false或者数值\n3.使用对象字面量替代new Array这种形式\n4.不要使用全局函数。\n5.Switch语句必须带有default分支\n6.函数不应该有时候有返回值，有时候没有返回值。\n7.For循环必须使用大括号\n8.If语句必须使用大括号\n9.for-in循环中的变量 应该使用var关键字明确限定作用域，从而避免作用域污染。\n</code></pre><p>JavaScript原型，原型链 ? 有什么特点？</p>\n<pre><code>每个对象都会在其内部初始化一个属性，就是prototype(原型)，当我们访问一个对象的属性时，\n如果这个对象内部不存在这个属性，那么他就会去prototype里找这个属性，这个prototype又会有自己的    prototype，\n于是就这样一直找下去，也就是我们平时所说的原型链的概念。\n关系：instance.constructor.prototype = instance.__proto__\n\n特点：\n    JavaScript对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改        原型时，与之相关的对象也会继承这一改变。\n\n\n 当我们需要一个属性的时，Javascript引擎会先看当前对象中是否有这个属性， 如果没有的话，\n 就会查找他的Prototype对象是否有这个属性，如此递推下去，一直检索到 Object 内建对象。\n    function Func(){}\n    Func.prototype.name = &quot;Sean&quot;;\n    Func.prototype.getInfo = function() {\n          return this.name;\n    }\n    var person = new Func();//现在可以参考var person = Object.create(oldObject);\n    console.log(person.getInfo());//它拥有了Func的属性和方法\n    //&quot;Sean&quot;\n    console.log(Func.prototype);\n    // Func { name=&quot;Sean&quot;, getInfo=function()}\n</code></pre><p>JavaScript有几种类型的值？，你能画一下他们的内存图吗？</p>\n<pre><code>栈：原始数据类型（Undefined，Null，Boolean，Number、String） \n堆：引用数据类型（对象、数组和函数）\n\n两种类型的区别是：存储位置不同；\n原始数据类型直接存储在栈(stack)中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存    储；\n引用数据类型存储在堆(heap)中的对象,占据空间大、大小不固定。如果存储在栈中，将会影响程序运行的性能；引用数    据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得    地址后从堆中获得实体\n</code></pre><p><img src=\"https://camo.githubusercontent.com/d1947e624a0444d1032a85800013df487adc5550/687474703a2f2f7777772e77337363686f6f6c2e636f6d2e636e2f692f63745f6a735f76616c75652e676966\" alt=\"Mou icon\"></p>\n<p>Javascript如何实现继承？</p>\n<pre><code>1、构造继承\n2、原型继承\n3、实例继承\n4、拷贝继承\n\n原型prototype机制或apply和call方法去实现较简单，建议使用构造函数与原型混合方式。\n    function Parent(){\n        this.name = &apos;wang&apos;;\n    }\n\n    function Child(){\n        this.age = 28;\n    }\n    Child.prototype = new Parent();//继承了Parent，通过原型\n\n    var demo = new Child();\n    alert(demo.age);\n    alert(demo.name);//得到被继承的属性\n</code></pre><p>JavaScript继承的几种实现方式？</p>\n<p>参考：<a href=\"http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html\" target=\"_blank\" rel=\"external\"><font style=\"color:blue\">构造函数的继承</font></a>，<a href=\"http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance_continued.html\" target=\"_blank\" rel=\"external\"><font style=\"color:blue\">非构造函数的继承</font></a>；</p>\n<p>javascript创建对象的几种方式？</p>\n<pre><code>javascript创建对象简单的说,无非就是使用内置对象或各种自定义对象，当然还可以用JSON；但写法有很多种，也能    混合使用。\n\n\n1、对象字面量的方式   \n\n    person={firstname:&quot;Mark&quot;,lastname:&quot;Yun&quot;,age:25,eyecolor:&quot;black&quot;};\n\n2、用function来模拟无参的构造函数\n\n    function Person(){}\n    var person=new Person();//定义一个function，如果使用new&quot;实例化&quot;,该function可以看作是一个        Class\n    person.name=&quot;Mark&quot;;\n    person.age=&quot;25&quot;;\n    person.work=function(){\n    alert(person.name+&quot; hello...&quot;);\n    }\n    person.work();\n\n3、用function来模拟参构造函数来实现（用this关键字定义构造的上下文属性）\n\nfunction Pet(name,age,hobby){\n   this.name=name;//this作用域：当前对象\n   this.age=age;\n   this.hobby=hobby;\n   this.eat=function(){\n      alert(&quot;我叫&quot;+this.name+&quot;,我喜欢&quot;+this.hobby+&quot;,是个程序员&quot;);\n   }\n}\nvar maidou =new Pet(&quot;麦兜&quot;,25,&quot;coding&quot;);//实例化、创建对象\nmaidou.eat();//调用eat方法\n\n\n4、用工厂方式来创建（内置对象）\n\n var wcDog =new Object();\n wcDog.name=&quot;旺财&quot;;\n wcDog.age=3;\n wcDog.work=function(){\n   alert(&quot;我是&quot;+wcDog.name+&quot;,汪汪汪......&quot;);\n }\n wcDog.work();\n\n\n5、用原型方式来创建\n\nfunction Dog(){\n\n }\n Dog.prototype.name=&quot;旺财&quot;;\n Dog.prototype.eat=function(){\n alert(this.name+&quot;是个吃货&quot;);\n }\n var wangcai =new Dog();\n wangcai.eat();\n\n\n6、用混合方式来创建\n\nfunction Car(name,price){\n  this.name=name;\n  this.price=price; \n}\n Car.prototype.sell=function(){\n   alert(&quot;我是&quot;+this.name+&quot;，我现在卖&quot;+this.price+&quot;万元&quot;);\n  }\nvar camry =new Car(&quot;凯美瑞&quot;,27);\ncamry.sell();\n</code></pre><p>Javascript作用链域?</p>\n<pre><code>全局函数无法查看局部函数的内部细节，但局部函数可以查看其上层的函数细节，直至全局细节。\n当需要从局部函数查找某一属性或方法时，如果当前作用域没有找到，就会上溯到上层作用域查找，\n直至全局函数，这种组织形式就是作用域链。\n</code></pre><p>谈谈This对象的理解。</p>\n<pre><code>this总是指向函数的直接调用者（而非间接调用者）；\n如果有new关键字，this指向new出来的那个对象；\n在事件中，this指向触发这个事件的对象，特殊的是，IE中的attachEvent中的this总是指向全局对象Window；\n</code></pre><p>eval是做什么的？</p>\n<pre><code>它的功能是把对应的字符串解析成JS代码并运行；\n应该避免使用eval，不安全，非常耗性能（2次，一次解析成js语句，一次执行）。\n由JSON字符串转换为JSON对象的时候可以用eval，var obj =eval(&apos;(&apos;+ str +&apos;)&apos;);\n</code></pre><p>什么是window对象? 什么是document对象?</p>\n<p>null，undefined 的区别？</p>\n<pre><code>null        表示一个对象是“没有值”的值，也就是值为“空”；\nundefined   表示一个变量没有被声明，不存在这个值，或者被声明了但没有被赋值；\n\nundefined不是一个有效的JSON，而null是；\nundefined的类型(typeof)是undefined；\nnull的类型(typeof)是object；\n\n\nJavascript将未赋值的变量默认值设为undefined；\nJavascript从来不会将变量设为null。它是用来让程序员表明某个用var声明的变量时没有值的。\n\ntypeof undefined\n    //&quot;undefined&quot;\n    undefined :是一个表示&quot;无&quot;的原始值或者说表示&quot;缺少值&quot;，就是此处应该有一个值，但是还没有定义。当尝试读    取时会返回 undefined； \n例如变量被声明了，但没有赋值时，就等于undefined\n\ntypeof null\n    //&quot;object&quot;\n    null : 是一个对象(空对象, 没有任何属性和方法)；\n    例如作为函数的参数，表示该函数的参数不是对象；\n\n注意：\n    在验证null时，一定要使用　=== ，因为 == 无法分别 null 和　undefined\n    null == undefined // true\n    null === undefined // false\n\n再来一个例子：\n\n    null\n    Q：有张三这个人么？\n    A：有！\n    Q：张三有房子么？\n    A：没有！\n\n    undefined\n    Q：有张三这个人么？\n    A：没有！\n</code></pre><p>参考阅读：<a href=\"http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html\" target=\"_blank\" rel=\"external\"><font style=\"color:blue\">undefined与null的区别</font></a></p>\n<p>写一个通用的事件侦听器函数。</p>\n<pre><code>// event(事件)工具集，来源：github.com/markyun\nmarkyun.Event = {\n    // 页面加载完成后\n    readyEvent : function(fn) {\n        if (fn==null) {\n            fn=document;\n        }\n        var oldonload = window.onload;\n        if (typeof window.onload != &apos;function&apos;) {\n            window.onload = fn;\n        } else {\n            window.onload = function() {\n                oldonload();\n                fn();\n            };\n        }\n    },\n    // 视能力分别使用dom0||dom2||IE方式 来绑定事件\n    // 参数： 操作的元素,事件名称 ,事件处理程序\n    addEvent : function(element, type, handler) {\n        if (element.addEventListener) {\n            //事件类型、需要执行的函数、是否捕捉\n            element.addEventListener(type, handler, false);\n        } else if (element.attachEvent) {\n            element.attachEvent(&apos;on&apos; + type, function() {\n                handler.call(element);\n            });\n        } else {\n            element[&apos;on&apos; + type] = handler;\n        }\n    },\n    // 移除事件\n    removeEvent : function(element, type, handler) {\n        if (element.removeEventListener) {\n            element.removeEventListener(type, handler, false);\n        } else if (element.datachEvent) {\n            element.detachEvent(&apos;on&apos; + type, handler);\n        } else {\n            element[&apos;on&apos; + type] = null;\n        }\n    },\n    // 阻止事件 (主要是事件冒泡，因为IE不支持事件捕获)\n    stopPropagation : function(ev) {\n        if (ev.stopPropagation) {\n            ev.stopPropagation();\n        } else {\n            ev.cancelBubble = true;\n        }\n    },\n    // 取消事件的默认行为\n    preventDefault : function(event) {\n        if (event.preventDefault) {\n            event.preventDefault();\n        } else {\n            event.returnValue = false;\n        }\n    },\n    // 获取事件目标\n    getTarget : function(event) {\n        return event.target || event.srcElement;\n    },\n    // 获取event对象的引用，取到事件的所有信息，确保随时能使用event；\n    getEvent : function(e) {\n        var ev = e || window.event;\n        if (!ev) {\n            var c = this.getEvent.caller;\n            while (c) {\n                ev = c.arguments[0];\n                if (ev &amp;&amp; Event == ev.constructor) {\n                    break;\n                }\n                c = c.caller;\n            }\n        }\n        return ev;\n    }\n};\n</code></pre><p>[“1”, “2”, “3”].map(parseInt) 答案是多少？</p>\n<pre><code>parseInt() 函数能解析一个字符串，并返回一个整数，需要两个参数 (val, radix)，\n其中 radix 表示要解析的数字的基数。【该值介于 2 ~ 36 之间，并且字符串中的数字不能大于radix才能正确返回    数字结果值】;\n但此处 map 传了 3 个 (element, index, array),我们重写parseInt函数测试一下是否符合上面的规则。\n\nfunction parseInt(str, radix) {   \n    return str+&apos;-&apos;+radix;   \n};  \nvar a=[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;];  \na.map(parseInt);  // [&quot;1-0&quot;, &quot;2-1&quot;, &quot;3-2&quot;] 不能大于radix\n\n因为二进制里面，没有数字3,导致出现超范围的radix赋值和不合法的进制解析，才会返回NaN\n所以[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;].map(parseInt) 答案也就是：[1, NaN, NaN]\n\n详细解析：http://blog.csdn.net/justjavac/article/details/19473199\n</code></pre><p>事件是？IE与火狐的事件机制有什么区别？ 如何阻止冒泡？</p>\n<pre><code>1. 我们在网页中的某个操作（有的操作对应多个事件）。例如：当我们点击一个按钮就会产生一个事件。是可以被     JavaScript 侦测到的行为。\n2. 事件处理机制：IE是事件冒泡、Firefox同时支持两种事件模型，也就是：捕获型事件和冒泡型事件；\n3. ev.stopPropagation();（旧ie的方法 ev.cancelBubble = true;）\n</code></pre><p>什么是闭包（closure），为什么要用它？</p>\n<pre><code>闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一    个函数访问这个函数的局部变量,利用闭包可以突破作用链域，将函数内部的变量和方法传递到外部。\n\n闭包的特性：\n\n    1.函数内再嵌套函数\n    2.内部函数可以引用外层的参数和变量\n    3.参数和变量不会被垃圾回收机制回收\n\n//li节点的onclick事件都能正确的弹出当前被点击的li索引\n     &lt;ul id=&quot;testUL&quot;&gt;\n        &lt;li&gt; index = 0&lt;/li&gt;\n        &lt;li&gt; index = 1&lt;/li&gt;\n        &lt;li&gt; index = 2&lt;/li&gt;\n        &lt;li&gt; index = 3&lt;/li&gt;\n    &lt;/ul&gt;\n&lt;script type=&quot;text/javascript&quot;&gt;\n    var nodes = document.getElementsByTagName(&quot;li&quot;);\n    for(i = 0;i&lt;nodes.length;i+= 1){\n        nodes[i].onclick = (function(i){\n              return function() {\n                 console.log(i);\n              } //不用闭包的话，值每次都是4\n            })(i);\n    }\n&lt;/script&gt;\n\n\n\n执行say667()后,say667()闭包内部变量会存在,而闭包内部函数的内部变量不会存在\n使得Javascript的垃圾回收机制GC不会收回say667()所占用的资源\n因为say667()的内部函数的执行需要依赖say667()中的变量\n这是对闭包作用的非常直白的描述\n\n  function say667() {\n    // Local variable that ends up within closure\n    var num = 666;\n    var sayAlert = function() {\n        alert(num);\n    }\n    num++;\n    return sayAlert;\n}\n\n var sayAlert = say667();\n sayAlert()//执行结果应该弹出的667\n</code></pre><p>javascript 代码中的”use strict”;是什么意思 ? 使用它区别是什么？</p>\n<pre><code>use strict是一种ECMAscript 5 添加的（严格）运行模式,这种模式使得 Javascript 在更严格的条件下运行,\n\n使JS编码更加规范化的模式,消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为。\n默认支持的糟糕特性都会被禁用，比如不能用with，也不能在意外的情况下给全局变量赋值;\n全局变量的显示声明,函数必须声明在顶层，不允许在非函数代码块内声明函数,arguments.callee也不允许使用；\n消除代码运行的一些不安全之处，保证代码运行的安全,限制函数中的arguments修改，严格模式下的eval函数的行为和    非严格模式的也不相同;\n\n提高编译器效率，增加运行速度；\n为未来新版本的Javascript标准化做铺垫。\n</code></pre><p>如何判断一个对象是否属于某个类？</p>\n<pre><code>使用instanceof （待完善）\n     if(a instanceof Person){\n         alert(&apos;yes&apos;);\n     }\n</code></pre><p>new操作符具体干了什么呢?</p>\n<pre><code> 1、创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。\n 2、属性和方法被加入到 this 引用的对象中。\n 3、新创建的对象由 this 所引用，并且最后隐式的返回 this 。\n\nvar obj  = {};\nobj.__proto__ = Base.prototype;\nBase.call(obj);\n</code></pre><p>用原生JavaScript的实现过什么功能吗？</p>\n<p>Javascript中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？</p>\n<pre><code>hasOwnProperty\n\njavaScript中hasOwnProperty函数方法是返回一个布尔值，指出一个对象是否具有指定名称的属性。此方法无法检查    该对象的原型链中是否具有该属性；该属性必须是对象本身的一个成员。\n使用方法：\nobject.hasOwnProperty(proName)\n其中参数object是必选项。一个对象的实例。\nproName是必选项。一个属性名称的字符串值。\n</code></pre><p>如果 object 具有指定名称的属性，那么JavaScript中hasOwnProperty函数方法返回 true，反之则返回 false。<br>JSON 的了解？</p>\n<pre><code>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。\n它是基于JavaScript的一个子集。数据格式简单, 易于读写, 占用带宽小\n如：{&quot;age&quot;:&quot;12&quot;, &quot;name&quot;:&quot;back&quot;}\n\nJSON字符串转换为JSON对象:\nvar obj =eval(&apos;(&apos;+ str +&apos;)&apos;);\nvar obj = str.parseJSON();\nvar obj = JSON.parse(str);\n\nJSON对象转换为JSON字符串：\nvar last=obj.toJSONString();\nvar last=JSON.stringify(obj);\n</code></pre><h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\" \"></a> </h1><pre><code>    [].forEach.call($$(&quot;*&quot;),function(a){a.style.outline=&quot;1px solid #&quot;+    (~~(Math.random()*(1&lt;&lt;24))).toString(16)}) \n能解释一下这段代码的意思吗？\n</code></pre><p>js延迟加载的方式有哪些？</p>\n<pre><code>defer和async、动态创建DOM方式（用得最多）、按需异步载入js\n</code></pre><p>Ajax 是什么? 如何创建一个Ajax？</p>\n<pre><code>ajax的全称：Asynchronous Javascript And XML。\n异步传输+js+xml。\n所谓异步，在这里简单地解释就是：向服务器发送请求的时候，我们不必等待结果，而是可以同时做其他的事情，等到有了    结果它自己会根据设定进行后续操作，与此同时，页面是不会发生整页刷新的，提高了用户体验。\n\n(1)创建XMLHttpRequest对象,也就是创建一个异步调用对象\n(2)创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息\n(3)设置响应HTTP请求状态变化的函数\n(4)发送HTTP请求\n(5)获取异步调用返回的数据\n(6)使用JavaScript和DOM实现局部刷新\n</code></pre><p>同步和异步的区别?</p>\n<pre><code>同步的概念应该是来自于OS中关于同步的概念:不同进程为协同完成某项工作而在先后次序上调整(通过阻塞,唤醒等方    式).同步强调的是顺序性.谁先谁后.异步则不存在这种顺序性.\n\n同步：浏览器访问服务器请求，用户看得到页面刷新，重新发请求,等请求完，页面刷新，新内容出现，用户看到新内容,进行下一步操作。\n\n异步：浏览器访问服务器请求，用户正常操作，浏览器后端进行请求。等请求完，页面不刷新，新内容也会出现，用户看到新内容。\n</code></pre><p>（待完善）</p>\n<p>如何解决跨域问题?</p>\n<pre><code>jsonp、 iframe、window.name、window.postMessage、服务器上设置代理页面\n</code></pre><p>页面编码和被请求的资源编码如果不一致如何处理？</p>\n<p>模块化开发怎么做？</p>\n<p><a href=\"http://benalman.com/news/2010/11/immediately-invoked-function-expression/\" target=\"_blank\" rel=\"external\">立即执行函数</a>,不暴露私有成员</p>\n<pre><code>var module1 = (function(){\n　　　　var _count = 0;\n　　　　var m1 = function(){\n　　　　　　//...\n　　　　};\n　　　　var m2 = function(){\n　　　　　　//...\n　　　　};\n　　　　return {\n　　　　　　m1 : m1,\n　　　　　　m2 : m2\n　　　　};\n　　})();\n</code></pre><p>（待完善）</p>\n<p>AMD（Modules/Asynchronous-Definition）、CMD（Common Module Definition）规范区别？</p>\n<p>AMD 规范在这里：<a href=\"https://github.com/amdjs/amdjs-api/wiki/AMD\" target=\"_blank\" rel=\"external\">https://github.com/amdjs/amdjs-api/wiki/AMD</a></p>\n<p>CMD 规范在这里：<a href=\"https://github.com/seajs/seajs/issues/242\" target=\"_blank\" rel=\"external\">https://github.com/seajs/seajs/issues/242</a></p>\n<pre><code>Asynchronous Module Definition，异步模块定义，所有的模块将被异步加载，模块加载不影响后面语句运行。所    有依赖某些模块的语句均放置在回调函数中。\n\n 区别：\n\n1. 对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible.\n2. CMD 推崇依赖就近，AMD 推崇依赖前置。看代码：\n\n// CMD\ndefine(function(require, exports, module) {\n    var a = require(&apos;./a&apos;)\n    a.doSomething()\n    // 此处略去 100 行\n    var b = require(&apos;./b&apos;) // 依赖可以就近书写\n    b.doSomething()\n    // ...\n})\n\n// AMD 默认推荐\ndefine([&apos;./a&apos;, &apos;./b&apos;], function(a, b) { // 依赖必须一开始就写好\n    a.doSomething()\n    // 此处略去 100 行\n    b.doSomething()\n    // ...\n})\n</code></pre><p>requireJS的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何 缓存的？）</p>\n<pre><code>参考：http://annn.me/how-to-realize-cmd-loader/\n</code></pre><p>JS模块加载器的轮子怎么造，也就是如何实现一个模块加载器？</p>\n<p>谈一谈你对ECMAScript6的了解？</p>\n<p>ECMAScript6 怎么写class么，为什么会出现class这种东西?</p>\n<p>异步加载JS的方式有哪些？</p>\n<pre><code>(1) defer，只支持IE\n\n(2) async：\n\n(3) 创建script，插入到DOM中，加载完毕后callBack\n</code></pre><p>documen.write和 innerHTML的区别</p>\n<pre><code>document.write只能重绘整个页面\n\ninnerHTML可以重绘页面的一部分\n</code></pre><p>DOM操作——怎样添加、移除、移动、复制、创建和查找节点?</p>\n<pre><code>（1）创建新节点\n  createDocumentFragment()    //创建一个DOM片段\n   createElement()   //创建一个具体的元素\n   createTextNode()   //创建一个文本节点\n（2）添加、移除、替换、插入\n  appendChild()\n  removeChild()\n  replaceChild()\n  insertBefore() //在已有的子节点前插入一个新的子节点\n（3）查找\n  getElementsByTagName()    //通过标签名称\n  getElementsByName()    //通过元素的Name属性的值(IE容错能力较强，会得到一个数组，其中包括id等于    name值的)\n  getElementById()    //通过元素Id，唯一性\n</code></pre><p>.call() 和 .apply() 的区别？</p>\n<pre><code>  例子中用 add 来替换 sub，add.call(sub,3,1) == add(3,1) ，所以运行结果为：alert(4);\n\n  注意：js 中的函数其实是对象，函数名是对 Function 对象的引用。\n\nfunction add(a,b)\n{\n    alert(a+b);\n}\n\nfunction sub(a,b)\n{\n    alert(a-b);\n}\n\nadd.call(sub,3,1);\n</code></pre><p>数组和对象有哪些原生方法，列举一下？</p>\n<p>JS 怎么实现一个类。怎么实例化这个类</p>\n<p>JavaScript中的作用域与变量声明提升？</p>\n<p>如何编写高性能的Javascript？</p>\n<p>那些操作会造成内存泄漏？</p>\n<p>JQuery的源码看过吗？能不能简单概况一下它的实现原理？</p>\n<p>jQuery.fn的init方法返回的this指的是什么对象？为什么要返回this？</p>\n<p>jquery中如何将数组转化为json字符串，然后再转化回来？</p>\n<p>jQuery 的属性拷贝(extend)的实现原理是什么，如何实现深拷贝？</p>\n<p>jquery.extend 与 jquery.fn.extend的区别？</p>\n<p>jQuery 的队列是如何实现的？队列可以用在哪些地方？</p>\n<p>谈一下Jquery中的bind(),live(),delegate(),on()的区别？</p>\n<p>JQuery一个对象可以同时绑定多个事件，这是如何实现的？</p>\n<p>是否知道自定义事件。jQuery里的fire函数是什么意思，什么时候用？</p>\n<p>jQuery 是通过哪个方法和 Sizzle 选择器结合的？（jQuery.fn.find()进入Sizzle）</p>\n<p>针对 jQuery性能的优化方法？</p>\n<p>Jquery与jQuery UI 有啥区别？</p>\n<pre><code>*jQuery是一个js库，主要提供的功能是选择器，属性修改和事件绑定等等。\n\n*jQuery UI则是在jQuery的基础上，利用jQuery的扩展性，设计的插件。\n 提供了一些常用的界面元素，诸如对话框、拖动行为、改变大小行为等等\n</code></pre><p>JQuery的源码看过吗？能不能简单说一下它的实现原理？</p>\n<p>jquery 中如何将数组转化为json字符串，然后再转化回来？</p>\n<p>jQuery中没有提供这个功能，所以你需要先编写两个jQuery的扩展：</p>\n<pre><code>$.fn.stringifyArray = function(array) {\n    return JSON.stringify(array)\n}\n\n$.fn.parseArray = function(array) {\n    return JSON.parse(array)\n}\n\n然后调用：\n$(&quot;&quot;).stringifyArray(array)\n</code></pre><p>jQuery和Zepto的区别？各自的使用场景？</p>\n<p>针对 jQuery 的优化方法？</p>\n<pre><code>*基于Class的选择性的性能相对于Id选择器开销很大，因为需遍历所有DOM元素。\n\n*频繁操作的DOM，先缓存起来再操作。用Jquery的链式调用更好。\n 比如：var str=$(&quot;a&quot;).attr(&quot;href&quot;);\n\n*for (var i = size; i &lt; arr.length; i++) {}\n for 循环每一次循环都查找了数组 (arr) 的.length 属性，在开始循环的时候设置一个变量来存储这个数字，可以让    循环跑得更快：\n for (var i = size, length = arr.length; i &lt; length; i++) {}\n \u0010\u0010\u0010\u0010\u0010\n</code></pre><p>Zepto的点透问题如何解决？</p>\n<p>jQueryUI如何自定义组件?</p>\n<p>需求：实现一个页面操作不会整页刷新的网站，并且能在浏览器前进、后退时正确响应。给出你的技术实现方案？</p>\n<p>如何判断当前脚本运行在浏览器还是node环境中？（阿里）</p>\n<p>通过判断Global对象是否为window，如果不为window，当前脚本没有运行在浏览器中<br>移动端最小触控区域是多大？</p>\n<p>jQuery 的 slideUp动画 ，如果目标元素是被外部事件驱动, 当鼠标快速地连续触发外部元素事件, 动画会滞后的反复执行，该如何处理呢?</p>\n<p>把 Script 标签 放在页面的最底部的body封闭之前 和封闭之后有什么区别？浏览器会如何解析它们？</p>\n<p>移动端的点击事件的有延迟，时间是多久，为什么会有？ 怎么解决这个延时？（click 有 300ms 延迟,为了实现safari的双击事件的设计，浏览器要知道你是不是要双击操作。）</p>\n<p>知道各种JS框架(Angular, Backbone, Ember, React, Meteor, Knockout…)么? 能讲出他们各自的优点和缺点么?</p>\n<p>Underscore 对哪些 JS 原生对象进行了扩展以及提供了哪些好用的函数方法？</p>\n<p>解释JavaScript中的作用域与变量声明提升？</p>\n<p>那些操作会造成内存泄漏？</p>\n<pre><code>内存泄漏指任何对象在您不再拥有或需要它之后仍然存在。\n垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为 0（没有其他对象引用    过该对象），或对该对象的惟一引用是循环的，那么该对象的内存即可回收。\n\nsetTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏。\n闭包、控制台日志、循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）\n</code></pre><p>JQuery一个对象可以同时绑定多个事件，这是如何实现的？</p>\n<p>Node.js的适用场景？</p>\n<p>(如果会用node)知道route, middleware, cluster, nodemon, pm2, server-side rendering么?</p>\n<p>解释一下 Backbone 的 MVC 实现方式？</p>\n<p>什么是“前端路由”?什么时候适合使用“前端路由”? “前端路由”有哪些优点和缺点?</p>\n<p>知道什么是webkit么? 知道怎么用浏览器的各种工具来调试和debug代码么?</p>\n<p>如何测试前端代码么? 知道BDD, TDD, Unit Test么? 知道怎么测试你的前端工程么(mocha, sinon, jasmin, qUnit..)?</p>\n<p>前端templating(Mustache, underscore, handlebars)是干嘛的, 怎么用?</p>\n<p>简述一下 Handlebars 的基本用法？</p>\n<p>简述一下 Handlerbars 的对模板的基本处理流程， 如何编译的？如何缓存的？</p>\n<p>用js实现千位分隔符?(来源：<a href=\"http://div.io/topic/744\" target=\"_blank\" rel=\"external\">前端农民工</a>，提示：正则+replace)</p>\n<pre><code>参考：http://www.tuicool.com/articles/ArQZfui\n    function commafy(num) {\n        return num &amp;&amp; num\n            .toString()\n            .replace(/(\\d)(?=(\\d{3})+\\.)/g, function($0, $1) {\n            return $1 + &quot;,&quot;;\n    });\n}\n</code></pre><p>console.log(commafy(1234567.90)); //1,234,567.90</p>\n<p>检测浏览器版本版本有哪些方式？</p>\n<pre><code>功能检测、userAgent特征检测\n\n比如：navigator.userAgent\n//&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36\n  (KHTML, like Gecko) Chrome/41.0.2272.101 Safari/537.36&quot;\n</code></pre><p>What is a Polyfill?</p>\n<pre><code>polyfill 是“在旧版浏览器上复制标准 API 的 JavaScript 补充”,可以动态地加载 JavaScript 代码或库，在不    支持这些标准 API 的浏览器中模拟它们。\n例如，geolocation（地理位置）polyfill 可以在 navigator 对象上添加全局的 geolocation 对象，还能添加     getCurrentPosition 函数以及“坐标”回调对象，\n所有这些都是 W3C 地理位置 API 定义的对象和函数。因为 polyfill 模拟标准 API，所以能够以一种面向所有浏览    器未来的方式针对这些 API 进行开发，\n一旦对这些 API 的支持变成绝对大多数，则可以方便地去掉 polyfill，无需做任何额外工作。\n</code></pre><p>做的项目中，有没有用过或自己实现一些 polyfill 方案（兼容性处理方案）？</p>\n<pre><code>比如： html5shiv、Geolocation、Placeholder \n</code></pre><p>我们给一个dom同时绑定两个点击事件，一个用捕获，一个用冒泡。会执行几次事件，会先执行冒泡还是捕获？</p>\n<p>使用JS实现获取文件扩展名？</p>\n<pre><code>function getFileExtension(filename) {\n      return filename.slice((filename.lastIndexOf(&quot;.&quot;) - 1 &gt;&gt;&gt; 0) + 2);\n}   \n\nString.lastIndexOf() 方法返回指定值（本例中的&apos;.&apos;）在调用该方法的字符串中最后出现的位置，如果没找到则返    回 -1。\n对于&apos;filename&apos;和&apos;.hiddenfile&apos;，lastIndexOf的返回值分别为0和-1无符号右移操作符(»&gt;) 将-1转换为    4294967295，将-2转换为4294967294，这个方法可以保证边缘情况时文件名不变。\nString.prototype.slice() 从上面计算的索引处提取文件的扩展名。如果索引比文件名的长度大，结果为&quot;&quot;。\n</code></pre><p>ECMAScript6 相关</p>\n<p>Object.is() 与原来的比较操作符“ ===”、“ ==”的区别？</p>\n<pre><code>两等号判等，会在比较时进行类型转换；\n三等号判等(判断严格)，比较时不进行隐式类型转换,（类型不同则会返回false）； \n\nObject.is 在三等号判等的基础上特别处理了 NaN 、-0 和 +0 ，保证 -0 和 +0 不再相同，\n但 Object.is(NaN, NaN) 会返回 true.\n\nObject.is 应被认为有其特殊的用途，而不能用它认为它比其它的相等对比更宽松或严格。\n</code></pre><p>前端框架相关</p>\n<p>react-router 路由系统的实现原理？</p>\n<p>React中如何解决第三方类库的问题?</p>\n<p>其他问题</p>\n<p>原来公司工作流程是怎么样的，如何与其他人协作的？如何夸部门合作的？</p>\n<p>你遇到过比较难的技术问题是？你是如何解决的？</p>\n<p>设计模式 知道什么是singleton, factory, strategy, decrator么?</p>\n<p>常使用的库有哪些？常用的前端开发工具？开发过什么应用或组件？</p>\n<p>页面重构怎么操作？</p>\n<pre><code>网站重构：在不改变外部行为的前提下，简化结构、添加可读性，而在网站前端保持一致的行为。\n也就是说是在不改变UI的情况下，对网站进行优化，在扩展的同时保持一致的UI。\n\n对于传统的网站来说重构通常是：\n\n表格(table)布局改为DIV+CSS\n使网站前端兼容于现代浏览器(针对于不合规范的CSS、如对IE6有效的)\n对于移动平台的优化\n针对于SEO进行优化\n深层次的网站重构应该考虑的方面\n\n减少代码间的耦合\n让代码保持弹性\n严格按规范编写代码\n设计可扩展的API\n代替旧有的框架、语言(如VB)\n增强用户体验\n通常来说对于速度的优化也包含在重构中\n\n压缩JS、CSS、image等前端资源(通常是由服务器来解决)\n程序的性能优化(如数据读写)\n采用CDN来加速资源加载\n对于JS DOM的优化\nHTTP服务器的文件缓存\n</code></pre><p>列举IE与其他浏览器不一样的特性？</p>\n<pre><code>1、事件不同之处：\n\n触发事件的元素被认为是目标（target）。而在 IE 中，目标包含在 event 对象的 srcElement 属性；\n\n获取字符代码、如果按键代表一个字符（shift、ctrl、alt除外），IE 的 keyCode 会返回字符代码（Unicode），DOM 中按键的代码和字符是分离的，要获取字符代码，需要使用 charCode 属性；\n\n阻止某个事件的默认行为，IE 中阻止某个事件的默认行为，必须将 returnValue 属性设置为 false，Mozilla 中，需要调用 preventDefault() 方法；\n\n停止事件冒泡，IE 中阻止事件进一步冒泡，需要设置 cancelBubble 为 true，Mozzilla 中，需要调用 stopPropagation()；\n</code></pre><p>99%的网站都需要被重构是那本书上写的？</p>\n<pre><code>网站重构：应用web标准进行设计（第2版）\n</code></pre><p>什么叫优雅降级和渐进增强？</p>\n<pre><code>优雅降级：Web站点在所有新式浏览器中都能正常工作，如果用户使用的是老式浏览器，则代码会针对旧版本的IE进行降    级处理了,使之在旧式浏览器上以某种形式降级体验却不至于完全不能用。\n如：border-shadow\n\n渐进增强：从被所有浏览器支持的基本功能开始，逐步地添加那些只有新版本浏览器才支持的功能,向页面增加不影响基础    浏览器的额外样式和功能的。当浏览器支持时，它们会自动地呈现出来并发挥作用。\n如：默认使用flash上传，但如果浏览器支持 HTML5 的文件上传功能，则使用HTML5实现更好的体验；\n</code></pre><p>是否了解公钥加密和私钥加密?</p>\n<pre><code>一般情况下是指私钥用于对数据进行签名，公钥用于对签名进行验证;\nHTTP网站在浏览器端用公钥加密敏感数据，然后在服务器端再用私钥解密。\n</code></pre><p>WEB应用从服务器主动推送Data到客户端有那些方式？</p>\n<pre><code>html5提供的Websocket\n不可见的iframe\nWebSocket通过Flash\nXHR长时间连接\nXHR Multipart Streaming\n&lt;script&gt;标签的长时间连接(可跨域)\n</code></pre><p>对Node的优点和缺点提出了自己的看法？</p>\n<pre><code>*（优点）因为Node是基于事件驱动和无阻塞的，所以非常适合处理并发请求，\n  因此构建在Node上的代理服务器相比其他技术实现（如Ruby）的服务器表现要好得多。\n  此外，与Node代理服务器交互的客户端代码是由javascript语言编写的，\n  因此客户端和服务器端都用同一种语言编写，这是非常美妙的事情。\n\n*（缺点）Node是一个相对新的开源项目，所以不太稳定，它总是一直在变，\n  而且缺少足够多的第三方库支持。看起来，就像是Ruby/Rails当年的样子。\n</code></pre><p>你有用过哪些前端性能优化的方法？</p>\n<pre><code>  （1） 减少http请求次数：CSS Sprites, JS、CSS源码压缩、图片大小控制合适；网页Gzip，CDN托管，data缓    存 ，图片服务器。\n\n（2） 前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数\n\n  （3） 用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能。\n\n  （4） 当需要设置的样式很多时设置className而不是直接操作style。\n\n  （5） 少用全局变量、缓存DOM节点查找的结果。减少IO读取操作。\n\n  （6） 避免使用CSS Expression（css表达式)又称Dynamic properties(动态属性)。\n\n  （7） 图片预加载，将样式表放在顶部，将脚本放在底部  加上时间戳。\n\n  （8） 避免在页面的主体布局中使用table，table要等其中的内容完全下载之后才会显示出来，显示比div+css布局    慢。\n  对普通的网站有一个统一的思路，就是尽量向前端优化、减少数据库操作、减少磁盘IO。向前端优化指的是，在不影响    功能和体验的情况下，能在浏览器执行的不要在服务端执行，能在缓存服务器上直接返回的不要到应用服务器，程序能直接    取得的结果不要到外部取得，本机内能取得的数据不要到远程取，内存能取到的不要到磁盘取，缓存中有的不要去数据库查    询。减少数据库操作指减少更新次数、缓存结果减少查询次数、将数据库执行的操作尽可能的让你的程序完成（例如join    查询），减少磁盘IO指尽量不使用文件系统作为缓存、减少读写文件次数等。程序优化永远要优化慢的部分，换语言是无    法“优化”的。\n  \u0010\n</code></pre><p>http状态码有那些？分别代表是什么意思？</p>\n<pre><code>简单版\n[\n    100  Continue   继续，一般在发送post请求时，已发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息\n    200  OK         正常返回信息\n    201  Created    请求成功并且服务器创建了新的资源\n    202  Accepted   服务器已接受请求，但尚未处理\n    301  Moved Permanently  请求的网页已永久移动到新位置。\n    302 Found       临时性重定向。\n    303 See Other   临时性重定向，且总是使用 GET 请求新的 URI。\n    304  Not Modified 自从上次请求后，请求的网页未修改过。\n\n    400 Bad Request  服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。\n    401 Unauthorized 请求未授权。\n    403 Forbidden   禁止访问。\n    404 Not Found   找不到如何与 URI 相匹配的资源。\n\n    500 Internal Server Error  最常见的服务器端错误。\n    503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）。\n]\n\n  完整版\n  1**(信息类)：表示接收到请求并且继续处理\n    100——客户必须继续发出请求\n    101——客户要求服务器根据请求转换HTTP协议版本\n\n  2**(响应成功)：表示动作被成功接收、理解和接受\n    200——表明该请求被成功地完成，所请求的资源发送回客户端\n    201——提示知道新文件的URL\n    202——接受和处理、但处理未完成\n    203——返回信息不确定或不完整\n    204——请求收到，但返回信息为空\n    205——服务器完成了请求，用户代理必须复位当前已经浏览过的文件\n    206——服务器已经完成了部分用户的GET请求\n\n  3**(重定向类)：为了完成指定的动作，必须接受进一步处理\n    300——请求的资源可在多处得到\n    301——本网页被永久性转移到另一个URL\n     302——请求的网页被转移到一个新的地址，但客户访问仍继续通过原始URL地址，重定向，新的URL会在response中的    Location中返回，浏览器将会使用新的URL发出新的Request。\n    303——建议客户访问其他URL或访问方式\n    304——自从上次请求后，请求的网页未修改过，服务器返回此响应时，不会返回网页内容，代表上次的文档已经被缓    存了，还可以继续使用\n    305——请求的资源必须从服务器指定的地址得到\n    306——前一版本HTTP中使用的代码，现行版本中不再使用\n    307——申明请求的资源临时性删除\n\n  4**(客户端错误类)：请求包含错误语法或不能正确执行\n    400——客户端请求有语法错误，不能被服务器所理解\n    401——请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用\n    HTTP 401.1 - 未授权：登录失败\n　　HTTP 401.2 - 未授权：服务器配置问题导致登录失败\n　　HTTP 401.3 - ACL 禁止访问资源\n　　HTTP 401.4 - 未授权：授权被筛选器拒绝\nHTTP 401.5 - 未授权：ISAPI 或 CGI 授权失败\n402——保留有效ChargeTo头响应\n403——禁止访问，服务器收到请求，但是拒绝提供服务\nHTTP 403.1 禁止访问：禁止可执行访问\n　　HTTP 403.2 - 禁止访问：禁止读访问\n　　HTTP 403.3 - 禁止访问：禁止写访问\n　　HTTP 403.4 - 禁止访问：要求 SSL\n　　HTTP 403.5 - 禁止访问：要求 SSL 128\n　　HTTP 403.6 - 禁止访问：IP 地址被拒绝\n　　HTTP 403.7 - 禁止访问：要求客户证书\n　　HTTP 403.8 - 禁止访问：禁止站点访问\n　　HTTP 403.9 - 禁止访问：连接的用户过多\n　　HTTP 403.10 - 禁止访问：配置无效\n　　HTTP 403.11 - 禁止访问：密码更改\n　　HTTP 403.12 - 禁止访问：映射器拒绝访问\n　　HTTP 403.13 - 禁止访问：客户证书已被吊销\n　　HTTP 403.15 - 禁止访问：客户访问许可过多\n　　HTTP 403.16 - 禁止访问：客户证书不可信或者无效\nHTTP 403.17 - 禁止访问：客户证书已经到期或者尚未生效\n404——一个404错误表明可连接服务器，但服务器无法取得所请求的网页，请求资源不存在。eg：输入了错误的URL\n405——用户在Request-Line字段定义的方法不允许\n406——根据用户发送的Accept拖，请求资源不可访问\n407——类似401，用户必须首先在代理服务器上得到授权\n408——客户端没有在用户指定的饿时间内完成请求\n409——对当前资源状态，请求不能完成\n410——服务器上不再有此资源且无进一步的参考地址\n411——服务器拒绝用户定义的Content-Length属性请求\n412——一个或多个请求头字段在当前请求中错误\n413——请求的资源大于服务器允许的大小\n414——请求的资源URL长于服务器允许的长度\n415——请求资源不支持请求项目格式\n416——请求中包含Range请求头字段，在当前请求资源范围内没有range指示值，请求也不包含If-Range请求头字段\n417——服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求长。\n\n  5**(服务端错误类)：服务器不能正确执行一个正确的请求\n    HTTP 500 - 服务器遇到错误，无法完成请求\n　　HTTP 500.100 - 内部服务器错误 - ASP 错误\n　　HTTP 500-11 服务器关闭\n　　HTTP 500-12 应用程序重新启动\n　　HTTP 500-13 - 服务器太忙\n　　HTTP 500-14 - 应用程序无效\n　　HTTP 500-15 - 不允许请求 global.asa\n　　Error 501 - 未实现\n     HTTP 502 - 网关错误\n      HTTP 503：由于超载或停机维护，服务器目前无法使用，一段时间后可能恢复正常\n</code></pre><p>一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？（流程说的越详细越好）</p>\n<pre><code>注：这题胜在区分度高，知识点覆盖广，再不懂的人，也能答出几句，\n而高手可以根据自己擅长的领域自由发挥，从URL规范、HTTP协议、DNS、CDN、数据库查询、\n到浏览器流式解析、CSS规则构建、layout、paint、onload/domready、JS执行、JS API绑定等等；\n\n详细版：\n  1、浏览器会开启一个线程来处理这个请求，对 URL 分析判断如果是 http 协议就按照 Web 方式来处理;\n  2、调用浏览器内核中的对应方法，比如 WebView 中的 loadUrl 方法;\n  3、通过DNS解析获取网址的IP地址，设置 UA 等信息发出第二个GET请求;\n  4、进行HTTP协议会话，客户端发送报头(请求报头);\n  5、进入到web服务器上的 Web Server，如 Apache、Tomcat、Node.JS 等服务器;\n  6、进入部署好的后端应用，如 PHP、Java、JavaScript、Python 等，找到对应的请求处理;\n  7、处理结束回馈报头，此处如果浏览器访问过，缓存上有对应资源，会与服务器最后修改时间对比，一致则返回304;\n  8、浏览器开始下载html文档(响应报头，状态码200)，同时使用缓存;\n  9、文档树建立，根据标记请求所需指定MIME类型的文件（比如css、js）,同时设置了cookie;\n  10、页面开始渲染DOM，JS根据DOM API操作DOM,执行事件绑定等，页面显示完成。\n\n简洁版：\n  浏览器根据请求的URL交给DNS域名解析，找到真实IP，向服务器发起请求；\n  服务器交给后台处理完成后返回数据，浏览器接收文件（HTML、JS、CSS、图象等）；\n  浏览器对加载到的资源（HTML、JS、CSS等）进行语法解析，建立相应的内部数据结构（如HTML的DOM）；\n  载入解析到的资源文件，渲染页面，完成。\n</code></pre><p>部分地区用户反应网站很卡，请问有哪些可能性的原因，以及解决方法？</p>\n<p>从打开app到刷新出内容，整个过程中都发生了什么，如果感觉慢，怎么定位问题，怎么解决?</p>\n<p>除了前端以外还了解什么其它技术么？你最最厉害的技能是什么？</p>\n<p>你用的得心应手用的熟练地编辑器&amp;开发环境是什么样子？</p>\n<pre><code>Sublime Text 3 + 相关插件编写前端代码\nGoogle chrome 、Mozilla Firefox浏览器 +firebug 兼容测试和预览页面UI、动画效果和交互功能\nNode.js+Gulp\ngit 用于版本控制和Code Review\n</code></pre><p>对前端工程师这个职位是怎么样理解的？它的前景会怎么样？</p>\n<pre><code>前端是最贴近用户的程序员，比后端、数据库、产品经理、运营、安全都近。\n1、实现界面交互\n2、提升用户体验\n3、有了Node.js，前端可以实现服务端的一些事情\n\n\n前端是最贴近用户的程序员，前端的能力就是能让产品从 90分进化到 100 分，甚至更好，\n\n参与项目，快速高质量完成实现效果图，精确到1px；\n\n与团队成员，UI设计，产品经理的沟通；\n\n做好的页面结构，页面重构和用户体验；\n\n处理hack，兼容、写出优美的代码格式；\n\n针对服务器的优化、拥抱最新前端技术。\n</code></pre><p>你怎么看待Web App 、hybrid App、Native App？</p>\n<p>你移动端前端开发的理解？（和 Web 前端开发的主要区别是什么？）</p>\n<p>你对加班的看法？</p>\n<pre><code>加班就像借钱，原则应当是------救急不救穷\n</code></pre><p>平时如何管理你的项目？</p>\n<pre><code>先期团队必须确定好全局样式（globe.css），编码模式(utf-8) 等；\n\n编写习惯必须一致（例如都是采用继承式的写法，单样式都写成一行）；\n\n标注样式编写人，各模块都及时标注（标注关键样式调用的地方）；\n\n页面进行标注（例如 页面 模块 开始和结束）；\n\nCSS跟HTML 分文件夹并行存放，命名都得统一（例如style.css）；\n\nJS 分文件夹存放 命名以该JS功能为准的英文翻译。\n\n图片采用整合的 images.png png8 格式文件使用 尽量整合在一起使用方便将来的管理\n</code></pre><p>如何设计突发大规模并发架构？</p>\n<p>当团队人手不足，把功能代码写完已经需要加班的情况下，你会做前端代码的测试吗？</p>\n<p>说说最近最流行的一些东西吧？常去哪些网站？</p>\n<pre><code>ES6\\WebAssembly\\Node\\MVVM\\Web Components\\React\\React Native\\Webpack 组件化\n</code></pre><p>知道什么是SEO并且怎么优化么? 知道各种meta data的含义么?</p>\n<p>移动端（Android IOS）怎么做好用户体验?</p>\n<pre><code>清晰的视觉纵线、\n信息的分组、极致的减法、\n利用选择代替输入、\n标签及文字的排布方式、\n依靠明文确认密码、\n合理的键盘利用、\n\u0010\u0010\u0010\n</code></pre><p>简单描述一下你做过的移动APP项目研发流程？</p>\n<p>你在现在的团队处于什么样的角色，起到了什么明显的作用？</p>\n<p>你认为怎样才是全端工程师（Full Stack developer）？</p>\n<p>介绍一个你最得意的作品吧？</p>\n<p>你有自己的技术博客吗，用了哪些技术？</p>\n<p>对前端安全有什么看法？</p>\n<p>是否了解Web注入攻击，说下原理，最常见的两种攻击（XSS 和 CSRF）了解到什么程度？</p>\n<p>项目中遇到国哪些印象深刻的技术难题，具体是什么问题，怎么解决？。</p>\n<p>最近在学什么东西？</p>\n<p>你的优点是什么？缺点是什么？</p>\n<p>如何管理前端团队?</p>\n<p>最近在学什么？能谈谈你未来3，5年给自己的规划吗？</p>\n<h2 id=\"前端学习网站推荐\"><a href=\"#前端学习网站推荐\" class=\"headerlink\" title=\"前端学习网站推荐\"></a>前端学习网站推荐</h2><ol>\n<li><p>极客标签：     <a href=\"http://www.gbtags.com/\" target=\"_blank\" rel=\"external\">http://www.gbtags.com/</a></p>\n</li>\n<li><p>码农周刊：     <a href=\"http://weekly.manong.io/issues/\" target=\"_blank\" rel=\"external\">http://weekly.manong.io/issues/</a></p>\n</li>\n<li><p>前端周刊：     <a href=\"http://www.feweekly.com/issues\" target=\"_blank\" rel=\"external\">http://www.feweekly.com/issues</a></p>\n</li>\n<li><p>慕课网：       <a href=\"http://www.imooc.com/\" target=\"_blank\" rel=\"external\">http://www.imooc.com/</a></p>\n</li>\n<li><p>div.io：      <a href=\"http://div.io\" target=\"_blank\" rel=\"external\">http://div.io</a></p>\n</li>\n<li><p>Hacker News： <a href=\"https://news.ycombinator.com/news\" target=\"_blank\" rel=\"external\">https://news.ycombinator.com/news</a></p>\n</li>\n<li><p>InfoQ：       <a href=\"http://www.infoq.com/\" target=\"_blank\" rel=\"external\">http://www.infoq.com/</a></p>\n</li>\n<li><p>w3cplus：     <a href=\"http://www.w3cplus.com/\" target=\"_blank\" rel=\"external\">http://www.w3cplus.com/</a></p>\n</li>\n<li><p>Stack Overflow： <a href=\"http://stackoverflow.com/\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/</a></p>\n</li>\n<li><p>w3school：    <a href=\"http://www.w3school.com.cn/\" target=\"_blank\" rel=\"external\">http://www.w3school.com.cn/</a></p>\n</li>\n<li><p>mozilla：     <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript\" target=\"_blank\" rel=\"external\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript</a>  </p>\n</li>\n</ol>\n<p>文档推荐</p>\n<p><a href=\"http://docs.huihoo.com/jquery/jquery-fundamentals/zh-cn/index.html\" target=\"_blank\" rel=\"external\"><font style=\"color:blue\">jQuery 基本原理</font></a></p>\n<p><a href=\"http://bonsaiden.github.io/JavaScript-Garden/zh/\" target=\"_blank\" rel=\"external\"><font style=\"color:blue\">JavaScript 秘密花园</font></a></p>\n<p><a href=\"http://css.doyoe.com/\" target=\"_blank\" rel=\"external\"><font style=\"color:blue\">CSS参考手册</font></a></p>\n<p><a href=\"http://javascript.ruanyifeng.com/\" target=\"_blank\" rel=\"external\"><font style=\"color:blue\">JavaScript 标准参考教程</font></a></p>\n<p><a href=\"http://javascript.ruanyifeng.com/\" target=\"_blank\" rel=\"external\"><font style=\"color:blue\">ECMAScript 6入门</font></a></p>\n<p>备注：</p>\n<pre><code>根据自己需要选择性阅读，面试题是对理论知识的总结，让自己学会应该如何表达。\n\n资料答案不够正确和全面，欢迎欢迎Star和提交issues。\n\n格式不断修改更新中。\n\n在 github 项目的右上角，有三个按钮,分别是 watch、star、fork，新来的同学注意不要用错了，无休止的邮件提醒    会给你造成不必要的信息干扰。\n\n当你选择Watching，表示你以后会关注这个项目的全部动态，以后只要这个项目发生变动，被别人提交了pull     request、被发起了issue等情况你都会收到邮件通知。\n\nstar相当于是点赞或收藏，方便以后查找。\n\nfork表示你想要补充完善这个项目的内容。\n\n更新记录：\n\n2016年10月20日:更新一些已被发现的问题。\n\n2016年8月25日：新增ECMAScript6 相关问题   \n</code></pre>","excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><h2 id=\"只看问题点这里\"><a href=\"#只看问题点这里\" class=\"headerlink\" title=\"只看问题点这里\"></a><a href=\"http://markyun.github.io/2015/Front-end-Developer-Questions/\"><font style=\"color:blue\">只看问题点这里</font></a></h2><h2 id=\"看全部问题和答案点这里\"><a href=\"#看全部问题和答案点这里\" class=\"headerlink\" title=\"看全部问题和答案点这里\"></a><a href=\"https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions/Questions-and-Answers\"><font style=\"color:blue\">看全部问题和答案点这里</font></a></h2><p>本文由我收集总结了一些前端面试题，初学者阅后也要用心钻研其中的原理，重要知识需要系统学习、透彻学习，形成自己的知识链。万不可投机取巧，临时抱佛脚只求面试侥幸混过关是错误的！也是不可能的！不可能的！不可能的！</p>\n<p>前端还是一个年轻的行业，新的行业标准， 框架， 库都不断在更新和新增，正如赫门在2015深JS大会上的《前端服务化之路》主题演讲中说的一句话：“每18至24个月，前端都会难一倍”，这些变化使前端的能力更加丰富、创造的应用也会更加完美。所以关注各种前端技术，跟上快速变化的节奏，也是身为一个前端程序员必备的技能之一。</p>\n<p>最近也收到许多微博私信的鼓励和更正题目信息，后面会经常更新题目和答案到<a href=\"https://cuidapao.github.io/\"><font style=\"color:blue\">github</font></a>博客。希望前端er达到既能使用也会表达，对理论知识有自己的理解。可根据下面的知识点一个一个去进阶学习，形成自己的职业技能链。</p>\n<p>面试有几点需注意：(来源<a href=\"http://weibo.com/wintercn\"><font style=\"color:blue\">寒冬winter</font></a> 老师，github:@wintercn)</p>\n<p>面试题目： 根据你的等级和职位的变化，入门级到专家级，广度和深度都会有所增加。</p>\n<p>题目类型： 理论知识、算法、项目细节、技术视野、开放性题、工作案例。</p>\n<p>细节追问： 可以确保问到你开始不懂或面试官开始不懂为止，这样可以大大延展题目的区分度和深度，知道你的实际能力。因为这种知识关联是长时期的学习，临时抱佛脚绝对是记不住的。</p>\n<p>回答问题再棒，面试官（可能是你面试职位的直接领导），会考虑我要不要这个人做我的同事？所以态度很重要、除了能做事，还要会做人。（感觉更像是相亲( •̣̣̣̣̣̥́௰•̣̣̣̣̣̥̀ )）</p>\n<p>资深的前端开发能把absolute和relative弄混，这样的人不要也罢，因为团队需要的是：你这个人具有可以依靠的才能（靠谱）。</p>\n<h3 id=\"前端开发知识点：\"><a href=\"#前端开发知识点：\" class=\"headerlink\" title=\"前端开发知识点：\"></a>前端开发知识点：</h3><h4 id=\"HTML-amp-CSS：\"><a href=\"#HTML-amp-CSS：\" class=\"headerlink\" title=\"HTML&amp;CSS：\"></a>HTML&amp;CSS：</h4><pre><code>对Web标准的理解、浏览器内核差异、兼容性、hack、CSS基本功：布局、盒子模型、选择器优先级、\nHTML5、CSS3、Flexbox\n</code></pre><h4 id=\"JavaScript：\"><a href=\"#JavaScript：\" class=\"headerlink\" title=\"JavaScript：\"></a>JavaScript：</h4><pre><code>数据类型、运算、对象、Function、继承、闭包、作用域、原型链、事件、RegExp、JSON、Ajax、\nDOM、BOM、内存泄漏、跨域、异步装载、模板引擎、前端MVC、路由、模块化、Canvas、ECMAScript 6、Nodejs\n</code></pre><p>其他：<br>    移动端、响应式、自动化构建、HTTP、离线存储、WEB安全、优化、重构、团队协作、可维护、易用性、SEO、UED、架构、职业生涯、快速学习能力<br>作为一名前端工程师，无论工作年头长短都应该掌握的知识点：</p>\n<p>此条由 王子墨 发表在 攻城师的实验室</p>\n<pre><code>1、DOM结构 —— 两个节点之间可能存在哪些关系以及如何在节点之间任意移动。\n\n2、DOM操作 —— 如何添加、移除、移动、复制、创建和查找节点等。\n\n3、事件 —— 如何使用事件，以及IE和标准DOM事件模型之间存在的差别。\n\n4、XMLHttpRequest —— 这是什么、怎样完整地执行一次GET请求、怎样检测错误。\n\n5、严格模式与混杂模式 —— 如何触发这两种模式，区分它们有何意义。\n\n6、盒模型 —— 外边距、内边距和边框之间的关系，及IE8以下版本的浏览器中的盒模型\n\n7、块级元素与行内元素 —— 怎么用CSS控制它们、以及如何合理的使用它们\n\n8、浮动元素 —— 怎么使用它们、它们有什么问题以及怎么解决这些问题。\n\n9、HTML与XHTML —— 二者有什么区别，你觉得应该使用哪一个并说出理由。\n\n10、JSON —— 作用、用途、设计结构。\n</code></pre><h4 id=\"备注：\"><a href=\"#备注：\" class=\"headerlink\" title=\"备注：\"></a>备注：</h4><pre><code>根据自己需要选择性阅读，面试题是对理论知识的总结，让自己学会应该如何表达。\n\n资料答案不够正确和全面，欢迎欢迎Star和提交issues。\n\n格式不断修改更新中。\n</code></pre><h4 id=\"新增ECMAScript6-相关问题\"><a href=\"#新增ECMAScript6-相关问题\" class=\"headerlink\" title=\"新增ECMAScript6 相关问题\"></a>新增ECMAScript6 相关问题</h4><h4 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h4><p>Doctype作用？标准模式与兼容模式各有什么区别?</p>\n<pre><code>（1）、&lt;!DOCTYPE&gt;声明位于位于HTML文档中的第一行，处于 &lt;html&gt; 标签之前。告知浏览器的解析器用什么文档标准    解析这个文档。DOCTYPE不存在或格式不正确会导致文档以兼容模式呈现。\n\n（2）、标准模式的排版 和JS运作模式都是以该浏览器支持的最高标准运行。在兼容模式中，页面以宽松的向后兼容的方    式显示,模拟老式浏览器的行为以防止站点无法工作。\n</code></pre><p>HTML5 为什么只需要写 &lt;!DOCTYPE HTML&gt;？</p>\n<pre><code>HTML5 不基于 SGML，因此不需要对DTD进行引用，但是需要doctype来规范浏览器的行为（让浏览器按照它们应该的    方式来运行）；\n\n而HTML4.01基于SGML,所以需要对DTD进行引用，才能告知浏览器文档所使用的文档类型。\n</code></pre><p>行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？</p>\n<pre><code>首先：CSS规范规定，每个元素都有display属性，确定该元素的类型，每个元素都有默认的display值，如div的    display默认值为“block”，则为“块级”元素；span默认display属性值为“inline”，是“行内”元素。\n\n（1）行内元素有：a b span img input select strong（强调的语气）\n（2）块级元素有：div ul ol li dl dt dd h1 h2 h3 h4…p\n\n（3）常见的空元素：\n&lt;br&gt; &lt;hr&gt; &lt;img&gt; &lt;input&gt; &lt;link&gt; &lt;meta&gt;\n鲜为人知的是：\n&lt;area&gt; &lt;base&gt; &lt;col&gt; &lt;command&gt; &lt;embed&gt; &lt;keygen&gt; &lt;param&gt; &lt;source&gt; &lt;track&gt; &lt;wbr&gt;\n</code></pre><p>不同浏览器（版本）、HTML4（5）、CSS2等实际略有差异<br>参考: <a href=\"http://stackoverflow.com/questions/6867254/browsers-default-css-for-html-elements\">http://stackoverflow.com/questions/6867254/browsers-default-css-for-html-elements</a><br>页面导入样式时，使用link和@import有什么区别？</p>\n<pre><code>（1）link属于XHTML标签，除了加载CSS外，还能用于定义RSS, 定义rel连接属性等作用；而@import是CSS提供的，    只能用于加载CSS;\n\n（2）页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载;\n\n（3）import是CSS2.1 提出的，只在IE5以上才能被识别，而link是XHTML标签，无兼容问题;\n介绍一下你对浏览器内核的理解？    \n</code></pre><p>介绍一下你对浏览器内核的理解？</p>\n<pre><code>主要分成两部分：渲染引擎(layout engineer或Rendering Engine)和JS引擎。\n渲染引擎：负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入CSS等），以及计算网页的显示方式，    然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏    览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核。\n\nJS引擎则：解析和执行javascript来实现网页的动态效果。\n\n最开始渲染引擎和JS引擎并没有区分的很明确，后来JS引擎越来越独立，内核就倾向于只指渲染引擎。\n</code></pre><p>常见的浏览器内核有哪些？</p>\n<pre><code>Trident内核：IE,MaxThon,TT,The World,360,搜狗浏览器等。[又称MSHTML]\nGecko内核：Netscape6及以上版本，FF,MozillaSuite/SeaMonkey等\nPresto内核：Opera7及以上。      [Opera内核原为：Presto，现为：Blink;]\nWebkit内核：Safari,Chrome等。   [ Chrome的：Blink（WebKit的分支）]\n</code></pre><p>详细文章：<a href=\"http://www.cnblogs.com/fullhouse/archive/2011/12/19/2293455.html\"><font style=\"color:blue\">浏览器内核的解析和对比</font></a></p>\n<pre><code>html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？\n\n* HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加。\n  绘画 canvas;\n  用于媒介回放的 video 和 audio 元素;\n  本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失;\n  sessionStorage 的数据在浏览器关闭后自动删除;\n  语意化更好的内容元素，比如 article、footer、header、nav、section;\n  表单控件，calendar、date、time、email、url、search;\n  新的技术webworker, websocket, Geolocation;\n\n  移除的元素：\n      纯表现的元素：basefont，big，center，font, s，strike，tt，u;\n      对可用性产生负面影响的元素：frame，frameset，noframes；\n\n* 支持HTML5新标签：\n     IE8/IE7/IE6支持通过document.createElement方法产生的标签，\n     可以利用这一特性让这些浏览器支持HTML5新标签，\n     浏览器支持新标签后，还需要添加标签默认的样式。\n\n     当然也可以直接使用成熟的框架、比如html5shim;\n     &lt;!--[if lt IE 9]&gt;\n        &lt;script&gt; src=&quot;http://html5shim.googlecode.com/svn/trunk/html5.js&quot;&lt;/script&gt;\n     &lt;![endif]--&gt;\n\n* 如何区分HTML5： DOCTYPE声明\\新增的结构元素\\功能元素\n</code></pre><p>简述一下你对HTML语义化的理解？</p>\n<pre><code>用正确的标签做正确的事情。\nhtml语义化让页面的内容结构化，结构更清晰，便于对浏览器、搜索引擎解析;\n即使在没有样式CSS情况下也以一种文档格式显示，并且是容易阅读的;\n搜索引擎的爬虫也依赖于HTML标记来确定上下文和各个关键字的权重，利于SEO;\n使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。\n</code></pre><p>HTML5的离线储存怎么使用，工作原理能不能解释一下？</p>\n<pre><code>在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件。\n原理：HTML5的离线存储是基于一个新建的.appcache文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线    存储资源，这些资源就会像cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据    进行页面展示。\n\n\n如何使用：\n1、页面头部像下面一样加入一个manifest的属性；\n2、在cache.manifest文件的编写离线存储的资源；\n    CACHE MANIFEST\n    #v0.11\n        CACHE:\n    js/app.js\n    css/style.css\n    NETWORK:\n    resourse/logo.png\n       FALLBACK:\n    / /offline.html\n3、在离线状态时，操作window.applicationCache进行需求实现。\n</code></pre><p>\u0010\u0010\u0010\u0010\u0010\u0010详细的使用请参考：<a href=\"http://yanhaijing.com/html/2014/12/28/html5-manifest/\"><font style=\"color:blue\">HTML5 离线缓存-manifest简介</font></a></p>\n<p><a href=\"https://segmentfault.com/a/1190000000732617\"><font style=\"color:blue\">有趣的HTML5：离线存储</font></a></p>\n<p>浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢？</p>\n<pre><code>在线的情况下，浏览器发现html头部有manifest属性，它会请求manifest文件，如果是第一次访问app，那么浏览器就    会根据manifest文件的内容下载相应的资源并且进行离线存储。如果已经访问过app并且资源已经离线存储了，那么浏览    器就会使用离线的资源加载页面，然后浏览器会对比新的manifest文件与旧的manifest文件，如果文件没有发生改变，    就不做任何操作，如果文件改变了，那么就会重新下载文件中的资源并进行离线存储。\n离线的情况下，浏览器就直接使用离线存储的资源。\n</code></pre><p>详细请参考：<a href=\"https://segmentfault.com/a/1190000000732617\"><font style=\"color:blue\">有趣的HTML5：离线存储</font></a></p>\n<p>请描述一下 cookies，sessionStorage 和 localStorage 的区别？</p>\n<pre><code>cookie是网站为了标示用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）。\ncookie数据始终在同源的http请求中携带（即使不需要），记会在浏览器和服务器间来回传递。\nsessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。\n\n存储大小：\n    cookie数据大小不能超过4k。\n    sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。\n\n有期时间：\n       localStorage    存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；\n    sessionStorage  数据在当前浏览器窗口关闭后自动删除。\n    cookie          设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭\n</code></pre><p>iframe有那些缺点？</p>\n<pre><code>*iframe会阻塞主页面的Onload事件；\n*搜索引擎的检索程序无法解读这种页面，不利于SEO;\n\n*iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。\n\n使用iframe之前需要考虑这两个缺点。如果需要使用iframe，最好是通过javascript\n动态给iframe添加src属性值，这样可以绕开以上两个问题。\n</code></pre><p>Label的作用是什么？是怎么用的？</p>\n<pre><code>label标签来定义表单控制间的关系,当用户选择该标签时，浏览器会自动将焦点转到和标签相关的表单控件上。\n\n&lt;label for=&quot;Name&quot;&gt;Number:&lt;/label&gt;\n&lt;input type=“text“name=&quot;Name&quot; id=&quot;Name&quot;/&gt;\n\n&lt;label&gt;Date:&lt;input type=&quot;text&quot; name=&quot;B&quot;/&gt;&lt;/label&gt;\n</code></pre><p>HTML5的form如何关闭自动完成功能？</p>\n<pre><code>给不想要提示的 form 或某个 input 设置为 autocomplete=off。\n</code></pre><p>如何实现浏览器内多个标签页之间的通信? (阿里)</p>\n<pre><code>WebSocket、SharedWorker；\n也可以调用localstorge、cookies等本地存储方式；\n\nlocalstorge另一个浏览上下文里被添加、修改或删除时，它都会触发一个事件，\n我们通过监听事件，控制它的值来进行页面信息通信；\n注意quirks：Safari 在无痕模式下设置localstorge值时会抛出 QuotaExceededError 的异常；\n</code></pre><p>webSocket如何兼容低浏览器？(阿里)</p>\n<pre><code>Adobe Flash Socket 、\nActiveX HTMLFile (IE) 、\n基于 multipart 编码发送 XHR 、\n基于长轮询的 XHR\n页面可见性（Page Visibility API） 可以有哪些用途？\n\n通过 visibilityState 的值检测页面当前是否可见，以及打开网页的时间等;\n在页面被切换到其他后台进程的时候，自动暂停音乐或视频的播放；\n</code></pre><p>如何在页面上实现一个圆形的可点击区域？</p>\n<pre><code>1、map+area或者svg\n2、border-radius\n3、纯js实现 需要求一个点在不在圆上简单算法、获取鼠标坐标等等\n</code></pre><p>实现不使用 border 画出1px高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果。</p>\n<pre><code>&lt;div style=&quot;height:1px;overflow:hidden;background:red&quot;&gt;&lt;/div&gt;\n</code></pre><p>网页验证码是干嘛的，是为了解决什么安全问题?</p>\n<pre><code>区分用户是计算机还是人的公共全自动程序。可以防止恶意破解密码、刷票、论坛灌水；\n有效防止黑客对某一个特定注册用户用特定程序暴力破解方式进行不断的登陆尝试。\n</code></pre><p>title与h1的区别、b与strong的区别、i与em的区别？</p>\n<pre><code>title属性没有明确意义只表示是个标题，H1则表示层次明确的标题，对页面信息的抓取也有很大的影响；\n\nstrong是标明重点内容，有语气加强的含义，使用阅读设备阅读网络时：&lt;strong&gt;会重读，而&lt;B&gt;是展示强调内容。\n\ni内容展示为斜体，em表示强调的文本；\n\nPhysical Style Elements -- 自然样式标签\nb, i, u, s, pre\nSemantic Style Elements -- 语义样式标签\nstrong, em, ins, del, code\n应该准确使用语义样式标签, 但不能滥用, 如果不能确定时首选使用自然样式标签。\n</code></pre><h4 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h4><p>介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？</p>\n<pre><code>（1）有两种， IE 盒子模型、W3C 盒子模型；\n（2）盒模型： 内容(content)、填充(padding)、边界(margin)、 边框(border)；\n（3）区  别： IE的content部分把 border 和 padding计算了进去;\n</code></pre><p>CSS选择符有哪些？哪些属性可以继承？</p>\n<pre><code>*   1.id选择器（ # myid）\n    2.类选择器（.myclassname）\n        3.标签选择器（div, h1, p）\n    4.相邻选择器（h1 + p）\n    5.子选择器（ul &gt; li）\n    6.后代选择器（li a）\n    7.通配符选择器（ * ）\n    8.属性选择器（a[rel = &quot;external&quot;]）\n    9.伪类选择器（a:hover, li:nth-child）\n\n*   可继承的样式： font-size font-family color, UL LI DL DD DT;\n\n*   不可继承的样式：border padding margin width height ;\n</code></pre><p>CSS优先级算法如何计算？</p>\n<ul>\n<li><p>优先级就近原则，同权重情况下样式定义最近者为准;</p>\n</li>\n<li><p>载入样式以最后载入的定位为准;</p>\n</li>\n</ul>\n<p>优先级为:<br>   !important &gt;  id &gt; class &gt; tag<br>    important 比 内联优先级高<br>CSS3新增伪类有那些？</p>\n<pre><code>举例：\np:first-of-type 选择属于其父元素的首个 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。\np:last-of-type  选择属于其父元素的最后 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。\np:only-of-type  选择属于其父元素唯一的 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。\np:only-child        选择属于其父元素的唯一子元素的每个 &lt;p&gt; 元素。\np:nth-child(2)  选择属于其父元素的第二个子元素的每个 &lt;p&gt; 元素。\n\n:after          在元素之前添加内容,也可以用来做清除浮动。\n:before         在元素之后添加内容\n:enabled        \n:disabled       控制表单控件的禁用状态。\n:checked        单选框或复选框被选中。\n</code></pre><p>如何居中div？</p>\n<pre><code>* 水平居中：给div设置一个宽度，然后添加margin:0 auto属性\n\ndiv{\n    width:200px;\n    margin:0 auto;\n}\n* 让绝对定位的div居中\n\ndiv {\n    position: absolute;\n    width: 300px;\n    height: 300px;\n    margin: auto;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    background-color: pink; /* 方便看效果 */\n}\n* 水平垂直居中一\n\n确定容器的宽高 宽500 高 300 的层\n设置层的外边距\n\ndiv {\n    position: relative;     /* 相对定位或绝对定位均可 */\n    width:500px; \n    height:300px;\n    top: 50%;\n    left: 50%;\n    margin: -150px 0 0 -250px;      /* 外边距为自身宽高的一半 */\n    background-color: pink;     /* 方便看效果 */\n\n }\n\n* 水平垂直居中二\n\n未知容器的宽高，利用 `transform` 属性\n\ndiv {\n    position: absolute;     /* 相对定位或绝对定位均可 */\n    width:500px; \n    height:300px;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    background-color: pink;     /* 方便看效果 */\n\n}\n\n* 水平垂直居中三\n\n利用 flex 布局\n实际使用时应考虑兼容性\n\n.container {\n    display: flex; \n    align-items: center;        /* 垂直居中 */\n    justify-content: center;    /* 水平居中 */\n\n}\n.container div {\n    width: 100px;\n    height: 100px;\n    background-color: pink;     /* 方便看效果 */\n}      \n</code></pre><p>display有哪些值？说明他们的作用。</p>\n<pre><code>block         块类型。默认宽度为父元素宽度，可设置宽高，换行显示。\nnone          缺省值。象行内元素类型一样显示。\ninline        行内元素类型。默认宽度为内容宽度，不可设置宽高，同行显示。\ninline-block  默认宽度为内容宽度，可以设置宽高，同行显示。\nlist-item     象块类型元素一样显示，并添加样式列表标记。\ntable         此元素会作为块级表格来显示。\ninherit       规定应该从父元素继承 display 属性的值。\n</code></pre><p>position的值relative和absolute定位原点是？</p>\n<pre><code>  absolute\n生成绝对定位的元素，相对于值不为 static的第一个父元素进行定位。\n  fixed （老IE不支持）\n生成绝对定位的元素，相对于浏览器窗口进行定位。\n  relative\n生成相对定位的元素，相对于其正常位置进行定位。\n  static\n默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right z-index 声明）。\n  inherit\n规定从父元素继承 position 属性的值。\n</code></pre><p>CSS3有哪些新特性？</p>\n<pre><code>新增各种CSS选择器  （: not(.input)：所有 class 不是“input”的节点）\n圆角            （border-radius:8px）\n多列布局      （multi-column layout）\n阴影和反射   （Shadow\\Reflect）\n文字特效      （text-shadow、）\n文字渲染      （Text-decoration）\n线性渐变      （gradient）\n旋转            （transform）\n缩放,定位,倾斜,动画,多背景\n例如:transform:\\scale(0.85,0.90)\\ translate(0px,-30px)\\ skew(-9deg,0deg)\\Animation:\n</code></pre><p>请解释一下CSS3的Flexbox（弹性盒布局模型）,以及适用场景？</p>\n<pre><code>一个用于页面布局的全新CSS3功能，Flexbox可以把列表放在同一个方向（从上到下排列，从左到右），并让列表能延伸    到占用可用的空间。\n较为复杂的布局还可以通过嵌套一个伸缩容器（flex container）来实现。\n采用Flex布局的元素，称为Flex容器（flex container），简称&quot;容器&quot;。\n它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称&quot;项目&quot;。\n常规布局是基于块和内联流方向，而Flex布局是基于flex-flow流可以很方便的用来做局中，能对不同屏幕大小自适应。\n在布局上有了比以前更加灵活的空间。\n\n具体：http://www.w3cplus.com/css3/flexbox-basics.html\n</code></pre><p>用纯CSS创建一个三角形的原理是什么？</p>\n<pre><code>把上、左、右三条边隐藏掉（颜色设为 transparent）\n#demo {\n      width: 0;\n     height: 0;\n      border-width: 20px;\n      border-style: solid;\n      border-color: transparent transparent red transparent;\n}\n</code></pre><p>一个满屏 品 字布局 如何设计?</p>\n<pre><code>简单的方式：\n    上面的div宽100%，\n    下面的两个div分别宽50%，\n    然后用float或者inline使其不换行即可\n</code></pre><p>css多列等高如何实现？</p>\n<pre><code>利用padding-bottom|margin-bottom正负值相抵；\n设置父容器设置超出隐藏（overflow:hidden），这样子父容器的高度就还是它里面的列没有设定padding-bottom时    的高度，\n当它里面的任 一列高度增加了，则父容器的高度被撑到里面最高那列的高度，\n其他比这列矮的列会用它们的padding-bottom补偿这部分高度差。\n</code></pre><p>经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用hack的技巧 ？</p>\n<pre><code>* png24位的图片在iE6浏览器上出现背景，解决方案是做成PNG8.\n\n* 浏览器默认的margin和padding不同。解决方案是加一个全局的*{margin:0;padding:0;}来统一。\n\n* IE6双边距bug:块属性标签float后，又有横行的margin情况下，在ie6显示margin比设置的大。\n\n  浮动ie产生的双倍距离 #box{ float:left; width:10px; margin:0 0 0 100px;}\n\n  这种情况之下IE会产生20px的距离，解决方案是在float的标签样式控制中加入 ——_display:inline;将其转化为行    内属性。(_这个符号只有ie6会识别)\n\n  渐进识别的方式，从总体中逐渐排除局部。\n\n  首先，巧妙的使用“\\9”这一标记，将IE游览器从所有情况中分离出来。\n  接着，再次使用“+”将IE8和IE7、IE6分离开来，这样IE8已经独立识别。\n\n  css\n      .bb{\n          background-color:red;/*所有识别*/\n          background-color:#00deff\\9; /*IE6、7、8识别*/\n          +background-color:#a200ff;/*IE6、7识别*/\n          _background-color:#1e0bd1;/*IE6识别*/\n      }\n\n\n*  IE下,可以使用获取常规属性的方法来获取自定义属性,\n       也可以使用getAttribute()获取自定义属性;\n       Firefox下,只能使用getAttribute()获取自定义属性。\n       解决方法:统一通过getAttribute()获取自定义属性。\n\n*  IE下,even对象有x,y属性,但是没有pageX,pageY属性;\n       Firefox下,event对象有pageX,pageY属性,但是没有x,y属性。\n\n*  解决方法：（条件注释）缺点是在IE浏览器下可能会增加额外的HTTP请求数。\n\n*  Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示,\n       可通过加入 CSS 属性 -webkit-text-size-adjust: none; 解决。\n\n超链接访问过后hover样式就不出现了 被点击访问过的超链接样式不在具有hover和active了解决方法是改变CSS属性    的排列顺序:\nL-V-H-A :  a:link {} a:visited {} a:hover {} a:active {}\n</code></pre><p>li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？</p>\n<pre><code>行框的排列会受到中间空白（回车\\空格）等的影响，因为空格也属于字符,这些空白也会被应用样式，占据空间，所以会    有间隔，把字符大小设为0，就没有空格了。\n</code></pre><p>为什么要初始化CSS样式?</p>\n<pre><code>- 因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没对CSS初始化往往会出现浏览器之间的页面    显示差异。\n\n- 当然，初始化样式会对SEO有一定的影响，但鱼和熊掌不可兼得，但力求影响最小的情况下初始化。\n\n最简单的初始化方法： * {padding: 0; margin: 0;} （强烈不建议）\n\n淘宝的样式初始化代码：\nbody, h1, h2, h3, h4, h5, h6, hr, p, blockquote, dl, dt, dd, ul, ol, li, pre, form,     fieldset, legend, button, input, textarea, th, td { margin:0; padding:0; }\nbody, button, input, select, textarea { font:12px/1.5tahoma, arial, \\5b8b\\4f53; }\nh1, h2, h3, h4, h5, h6{ font-size:100%; }\naddress, cite, dfn, em, var { font-style:normal; }\ncode, kbd, pre, samp { font-family:couriernew, courier, monospace; }\nsmall{ font-size:12px; }\nul, ol { list-style:none; }\na { text-decoration:none; }\na:hover { text-decoration:underline; }\nsup { vertical-align:text-top; }\nsub{ vertical-align:text-bottom; }\nlegend { color:#000; }\nfieldset, img { border:0; }\nbutton, input, select, textarea { font-size:100%; }\ntable { border-collapse:collapse; border-spacing:0; }\n</code></pre><p>absolute的containing block(容器块)计算方式跟正常流有什么不同？</p>\n<pre><code>无论属于哪种，都要先找到其祖先元素中最近的 position 值不为 static 的元素，然后再判断：\n1、若此元素为 inline 元素，则 containing block 为能够包含这个元素生成的第一个和最后一个 inline box     的 padding box (除 margin, border 外的区域) 的最小矩形；\n2、否则,则由这个祖先元素的 padding box 构成。\n如果都找不到，则为 initial containing block。\n\n补充：\n1. static(默认的)/relative：简单说就是它的父元素的内容框（即去掉padding的部分）\n2. absolute: 向上找最近的定位为absolute/relative的元素\n3. fixed: 它的containing block一律为根元素(html/body)，根元素也是initial containing block\n</code></pre><h5 id=\"CSS里的visibility属性有个collapse属性值是干嘛用的？在不同浏览器下以后什么区别？\"><a href=\"#CSS里的visibility属性有个collapse属性值是干嘛用的？在不同浏览器下以后什么区别？\" class=\"headerlink\" title=\"CSS里的visibility属性有个collapse属性值是干嘛用的？在不同浏览器下以后什么区别？\"></a>CSS里的visibility属性有个collapse属性值是干嘛用的？在不同浏览器下以后什么区别？</h5><h5 id=\"position跟display、margin-collapse、overflow、float这些特性相互叠加后会怎么样？\"><a href=\"#position跟display、margin-collapse、overflow、float这些特性相互叠加后会怎么样？\" class=\"headerlink\" title=\"position跟display、margin collapse、overflow、float这些特性相互叠加后会怎么样？\"></a>position跟display、margin collapse、overflow、float这些特性相互叠加后会怎么样？</h5><h5 id=\"对BFC规范-块级格式化上下文：block-formatting-context-的理解？\"><a href=\"#对BFC规范-块级格式化上下文：block-formatting-context-的理解？\" class=\"headerlink\" title=\"对BFC规范(块级格式化上下文：block formatting context)的理解？\"></a>对BFC规范(块级格式化上下文：block formatting context)的理解？</h5><pre><code>（W3C CSS 2.1 规范中的一个概念,它是一个独立容器，决定了元素如何对其内容进行定位,以及与其他元素的关系和相    互作用。）\n     一个页面是由很多个 Box 组成的,元素的类型和 display 属性,决定了这个 Box 的类型。\n     不同类型的 Box,会参与不同的 Formatting Context（决定如何渲染文档的容器）,因此Box内的元素会以不同的方式渲染,也就是说BFC内部的元素和外部的元素不会互相影响。\n</code></pre><p>css定义的权重</p>\n<pre><code>以下是权重的规则：标签的权重为1，class的权重为10，id的权重为100，以下例子是演示各种定义的权重值：\n\n/*权重为1*/\ndiv{\n}\n/*权重为10*/\n.class1{\n}\n/*权重为100*/\n#id1{\n}\n/*权重为100+1=101*/\n#id1 div{\n}\n/*权重为10+1=11*/\n.class1 div{\n}\n/*权重为10+10+1=21*/\n.class1 .class2 div{\n}\n\n如果权重相同，则最后定义的样式会起作用，但是应该避免这种情况出现\n</code></pre><p>请解释一下为什么需要清除浮动？清除浮动的方式</p>\n<p>清除浮动是为了清除使用浮动元素产生的影响。浮动的元素，高度会塌陷，而高度的塌陷使我们页面后面的布局不能正常显示。</p>\n<pre><code>1、父级div定义height；\n2、父级div 也一起浮动；\n3、常规的使用一个class；\n    .clearfix:before, .clearfix:after {\n        content: &quot; &quot;;\n        display: table;\n    }\n        .clearfix:after {\n        clear: both;\n    }\n    .clearfix {\n        *zoom: 1;\n    }\n\n4、SASS编译的时候，浮动元素的父级div定义伪类:after\n    &amp;:after,&amp;:before{\n        content: &quot; &quot;;\n        visibility: hidden;\n        display: block;\n        height: 0;\n        clear: both;\n    }\n</code></pre><p>解析原理：<br>    1) display:block 使生成的元素以块级元素显示,占满剩余空间;<br>    2) height:0 避免生成内容破坏原有布局的高度。<br>    3) visibility:hidden 使生成的内容不可见，并允许可能被生成内容盖住的内容可以进行点击和交互;<br>    4）通过 content:”.”生成内容作为最后一个元素，至于content里面是点还是其他都是可以的，例如oocss里面就有    经典的 content:”.”,有些版本可能content 里面内容为空,一丝冰凉是不推荐这样做的,firefox直到7.0     content:”” 仍然会产生额外的空隙；<br>    5）zoom：1 触发IE hasLayout。</p>\n<pre><code>通过分析发现，除了clear：both用来闭合浮动的，其他代码无非都是为了隐藏掉content生成的内容，这也就是其他版    本的闭合浮动为什么会有font-size：0，line-height：0。\n</code></pre><p>zoom:1的清楚浮动原理?</p>\n<pre><code>清楚浮动，触发hasLayout；\nZoom属性是IE浏览器的专有属性，它可以设置或检索对象的缩放比例。解决ie下比较奇葩的bug。\n譬如外边距（margin）的重叠，浮动清除，触发ie的haslayout属性等。\n\n来龙去脉大概如下：\n当设置了zoom的值之后，所设置的元素就会就会扩大或者缩小，高度宽度就会重新计算了，这里一旦改变zoom值时其实也    会发生重新渲染，运用这个原理，也就解决了ie下子元素浮动时候父元素不随着自动扩大的问题。\n\nZoom属是IE浏览器的专有属性，火狐和老版本的webkit核心的浏览器都不支持这个属性。然而，zoom现在已经被逐步标    准化，出现在 CSS 3.0 规范草案中。\n\n目前非ie由于不支持这个属性，它们又是通过什么属性来实现元素的缩放呢？\n可以通过css3里面的动画属性scale进行缩放。\n</code></pre><p>移动端的布局用过媒体查询吗？</p>\n<pre><code>假设你现在正用一台显示设备来阅读这篇文章，同时你也想把它投影到屏幕上，或者打印出来， 而显示设备、屏幕投影和    打印等这些媒介都有自己的特点，CSS就是为文档提供在不同媒介上展示的适配方法\n\n当媒体查询为真时，相关的样式表或样式规则会按照正常的级联规被应用。 当媒体查询返回假， 标签上带有媒体查询的    样式表 仍将被下载 （只不过不会被应用）。\n\n包含了一个媒体类型和至少一个使用 宽度、高度和颜色等媒体属性来限制样式表范围的表达式。 CSS3加入的媒体查询使    得无需修改内容便可以使样式应用于某些特定的设备范围。\n\n@media (min-width: 700px) and (orientation: landscape){ .sidebar { display: none; } }\n</code></pre><p>使用 CSS 预处理器吗？喜欢那个？</p>\n<pre><code>SASS (SASS、LESS没有本质区别，只因为团队前端都是用的SASS)\nCSS优化、提高性能的方法有哪些？\n\n关键选择器（key selector）。选择器的最后面的部分为关键选择器（即用来匹配目标元素的部分）；\n如果规则拥有 ID 选择器作为其关键选择器，则不要为规则增加标签。过滤掉无关的规则（这样样式系统就不会浪费时间    去匹配它们了）；\n提取项目的通用公有样式，增强可复用性，按模块编写组件；增强项目的协同开发性、可维护性和可扩展性;\n使用预处理工具或构建工具（gulp对css进行语法检查、自动补前缀、打包压缩、自动优雅降级）；\n</code></pre><p>浏览器是怎样解析CSS选择器的？</p>\n<pre><code>样式系统从关键选择器开始匹配，然后左移查找规则选择器的祖先元素。\n只要选择器的子树一直在工作，样式系统就会持续左移，直到和规则匹配，或者是因为不匹配而放弃该规则。\n在网页中的应该使用奇数还是偶数的字体？为什么呢？\n</code></pre><p>margin和padding分别适合什么场景使用？</p>\n<pre><code>margin是用来隔开元素与元素的间距；padding是用来隔开元素与内容的间隔。\nmargin用于布局分开元素使元素与元素互不相干；\npadding用于元素与内容之间的间隔，让内容（文字）与（包裹）元素之间有一段\n抽离样式模块怎么写，说出思路，有无实践经验？[阿里航旅的面试题]\n</code></pre><p>元素竖向的百分比设定是相对于容器的高度吗？</p>\n<p>全屏滚动的原理是什么？用到了CSS的那些属性？</p>\n<p>什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE？</p>\n<p>视差滚动效果，如何给每页做不同的动画？（回到顶部，向下滑动要再次出现，和只出现一次分别怎么做？）</p>\n<pre><code>::before 和 :after中双冒号和单冒号 有什么区别？解释一下这2个伪元素的作用。\n\n单冒号(:)用于CSS3伪类，双冒号(::)用于CSS3伪元素。（伪元素由双冒号和伪元素名称组成）\n双冒号是在当前规范中引入的，用于区分伪类和伪元素。不过浏览器需要同时支持旧的已经存在的伪元素写法，\n比如:first-line、:first-letter、:before、:after等，\n而新的在CSS3中引入的伪元素则不允许再支持旧的单冒号的写法。\n\n想让插入的内容出现在其它内容前，使用::before，否者，使用::after；\n在代码顺序上，::after生成的内容也比::before生成的内容靠后。\n如果按堆栈视角，::after生成的内容会在::before生成的内容之上\n</code></pre><p>如何修改chrome记住密码后自动填充表单的黄色背景 ？</p>\n<pre><code>input:-webkit-autofill, textarea:-webkit-autofill, select:-webkit-autofill {\n      background-color: rgb(250, 255, 189); /* #FAFFBD; */\n      background-image: none;\n      color: rgb(0, 0, 0);\n}\n</code></pre><p>你对line-height是如何理解的？</p>\n<p>设置元素浮动后，该元素的display值是多少？</p>\n<pre><code>自动变成了 display:block\n</code></pre><p>怎么让Chrome支持小于12px 的文字？</p>\n<pre><code>1、用图片：如果是内容固定不变情况下，使用将小于12px文字内容切出做图片，这样不影响兼容也不影响美观。\n2、使用12px及12px以上字体大小：为了兼容各大主流浏览器，建议设计美工图时候设置大于或等于12px的字体大小，如    果是接单的这个时候就需要给客户讲解小于12px浏览器不兼容等事宜。\n3、继续使用小于12px字体大小样式设置：如果不考虑chrome可以不用考虑兼容，同时在设置小于12px对象设置-    webkit-text-size-adjust:none，做到最大兼容考虑。\n4、使用12px以上字体：为了兼容、为了代码更简单 从新考虑权重下兼容性。        \n</code></pre><p>让页面里的字体变清晰，变细用CSS怎么做？</p>\n<pre><code>-webkit-font-smoothing: antialiased;\n</code></pre><p>font-style属性可以让它赋值为“oblique” oblique是什么意思？</p>\n<pre><code>倾斜的字体样式\n</code></pre><p>position:fixed;在android下无效怎么处理？</p>\n<pre><code>fixed的元素是相对整个页面固定位置的，你在屏幕上滑动只是在移动这个所谓的viewport，\n原来的网页还好好的在那，fixed的内容也没有变过位置，\n所以说并不是iOS不支持fixed，只是fixed的元素不是相对手机屏幕固定的。\n&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0,     minimum-scale=1.0, user-scalable=no&quot;/&gt;\n</code></pre><p>如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里）</p>\n<pre><code>多数显示器默认频率是60Hz，即1秒刷新60次，所以理论上最小间隔为1/60＊1000ms ＝ 16.7ms\ndisplay:inline-block 什么时候会显示间隙？(携程)\n\n移除空格、使用margin负值、使用font-size:0、letter-spacing、word-spacing\n</code></pre><p>overflow: scroll时不能平滑滚动的问题怎么处理？</p>\n<pre><code>有一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度。\n</code></pre><p>png、jpg、gif 这些图片格式解释一下，分别什么时候用。有没有了解过webp？</p>\n<p>什么是Cookie 隔离？（或者说：请求资源的时候不要让它带cookie怎么做）</p>\n<pre><code>如果静态文件都放在主域名下，那静态文件请求的时候都带有的cookie的数据提交给server的，非常浪费流量，\n所以不如隔离开。\n\n因为cookie有域的限制，因此不能跨域提交请求，故使用非主要域名的时候，请求头中就不会带有cookie数据，\n这样可以降低请求头的大小，降低请求时间，从而达到降低整体请求延时的目的。\n\n同时这种方式不会将cookie传入Web Server，也减少了Web Server对cookie的处理分析环节，\n提高了webserver的http请求的解析速度。\n</code></pre><p>style标签写在body后与body前有什么区别？</p>\n<p>什么是CSS 预处理器 / 后处理器？</p>\n<pre><code>- 预处理器例如：LESS、Sass、Stylus，用来预编译Sass或less，增强了css代码的复用性，\n  还有层级、mixin、变量、循环、函数等，具有很方便的UI组件模块化开发能力，极大的提高工作效率。\n\n- 后处理器例如：PostCSS，通常被视为在完成的样式表中根据CSS规范处理CSS，让其更有效；目前最常做的\n  是给CSS属性添加浏览器私有前缀，实现跨浏览器兼容性的问题。\n</code></pre><h4 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h4><p>介绍js的基本数据类型。</p>\n<pre><code>Undefined、Null、Boolean、Number、String、\nECMAScript 2015 新增:Symbol(创建后独一无二且不可变的数据类型 )\n</code></pre><p>介绍js有哪些内置对象？</p>\n<pre><code>Object 是 JavaScript 中所有对象的父对象\n\n数据封装类对象：Object、Array、Boolean、Number 和 String\n其他对象：Function、Arguments、Math、Date、RegExp、Error\n\n参考：http://www.ibm.com/developerworks/cn/web/wa-objectsinjs-v1b/index.html\n</code></pre><p>说几条写JavaScript的基本规范？</p>\n<pre><code>1.不要在同一行声明多个变量。\n2.请使用 ===/!==来比较true/false或者数值\n3.使用对象字面量替代new Array这种形式\n4.不要使用全局函数。\n5.Switch语句必须带有default分支\n6.函数不应该有时候有返回值，有时候没有返回值。\n7.For循环必须使用大括号\n8.If语句必须使用大括号\n9.for-in循环中的变量 应该使用var关键字明确限定作用域，从而避免作用域污染。\n</code></pre><p>JavaScript原型，原型链 ? 有什么特点？</p>\n<pre><code>每个对象都会在其内部初始化一个属性，就是prototype(原型)，当我们访问一个对象的属性时，\n如果这个对象内部不存在这个属性，那么他就会去prototype里找这个属性，这个prototype又会有自己的    prototype，\n于是就这样一直找下去，也就是我们平时所说的原型链的概念。\n关系：instance.constructor.prototype = instance.__proto__\n\n特点：\n    JavaScript对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改        原型时，与之相关的对象也会继承这一改变。\n\n\n 当我们需要一个属性的时，Javascript引擎会先看当前对象中是否有这个属性， 如果没有的话，\n 就会查找他的Prototype对象是否有这个属性，如此递推下去，一直检索到 Object 内建对象。\n    function Func(){}\n    Func.prototype.name = &quot;Sean&quot;;\n    Func.prototype.getInfo = function() {\n          return this.name;\n    }\n    var person = new Func();//现在可以参考var person = Object.create(oldObject);\n    console.log(person.getInfo());//它拥有了Func的属性和方法\n    //&quot;Sean&quot;\n    console.log(Func.prototype);\n    // Func { name=&quot;Sean&quot;, getInfo=function()}\n</code></pre><p>JavaScript有几种类型的值？，你能画一下他们的内存图吗？</p>\n<pre><code>栈：原始数据类型（Undefined，Null，Boolean，Number、String） \n堆：引用数据类型（对象、数组和函数）\n\n两种类型的区别是：存储位置不同；\n原始数据类型直接存储在栈(stack)中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存    储；\n引用数据类型存储在堆(heap)中的对象,占据空间大、大小不固定。如果存储在栈中，将会影响程序运行的性能；引用数    据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得    地址后从堆中获得实体\n</code></pre><p><img src=\"https://camo.githubusercontent.com/d1947e624a0444d1032a85800013df487adc5550/687474703a2f2f7777772e77337363686f6f6c2e636f6d2e636e2f692f63745f6a735f76616c75652e676966\" alt=\"Mou icon\"></p>\n<p>Javascript如何实现继承？</p>\n<pre><code>1、构造继承\n2、原型继承\n3、实例继承\n4、拷贝继承\n\n原型prototype机制或apply和call方法去实现较简单，建议使用构造函数与原型混合方式。\n    function Parent(){\n        this.name = &apos;wang&apos;;\n    }\n\n    function Child(){\n        this.age = 28;\n    }\n    Child.prototype = new Parent();//继承了Parent，通过原型\n\n    var demo = new Child();\n    alert(demo.age);\n    alert(demo.name);//得到被继承的属性\n</code></pre><p>JavaScript继承的几种实现方式？</p>\n<p>参考：<a href=\"http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html\"><font style=\"color:blue\">构造函数的继承</font></a>，<a href=\"http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance_continued.html\"><font style=\"color:blue\">非构造函数的继承</font></a>；</p>\n<p>javascript创建对象的几种方式？</p>\n<pre><code>javascript创建对象简单的说,无非就是使用内置对象或各种自定义对象，当然还可以用JSON；但写法有很多种，也能    混合使用。\n\n\n1、对象字面量的方式   \n\n    person={firstname:&quot;Mark&quot;,lastname:&quot;Yun&quot;,age:25,eyecolor:&quot;black&quot;};\n\n2、用function来模拟无参的构造函数\n\n    function Person(){}\n    var person=new Person();//定义一个function，如果使用new&quot;实例化&quot;,该function可以看作是一个        Class\n    person.name=&quot;Mark&quot;;\n    person.age=&quot;25&quot;;\n    person.work=function(){\n    alert(person.name+&quot; hello...&quot;);\n    }\n    person.work();\n\n3、用function来模拟参构造函数来实现（用this关键字定义构造的上下文属性）\n\nfunction Pet(name,age,hobby){\n   this.name=name;//this作用域：当前对象\n   this.age=age;\n   this.hobby=hobby;\n   this.eat=function(){\n      alert(&quot;我叫&quot;+this.name+&quot;,我喜欢&quot;+this.hobby+&quot;,是个程序员&quot;);\n   }\n}\nvar maidou =new Pet(&quot;麦兜&quot;,25,&quot;coding&quot;);//实例化、创建对象\nmaidou.eat();//调用eat方法\n\n\n4、用工厂方式来创建（内置对象）\n\n var wcDog =new Object();\n wcDog.name=&quot;旺财&quot;;\n wcDog.age=3;\n wcDog.work=function(){\n   alert(&quot;我是&quot;+wcDog.name+&quot;,汪汪汪......&quot;);\n }\n wcDog.work();\n\n\n5、用原型方式来创建\n\nfunction Dog(){\n\n }\n Dog.prototype.name=&quot;旺财&quot;;\n Dog.prototype.eat=function(){\n alert(this.name+&quot;是个吃货&quot;);\n }\n var wangcai =new Dog();\n wangcai.eat();\n\n\n6、用混合方式来创建\n\nfunction Car(name,price){\n  this.name=name;\n  this.price=price; \n}\n Car.prototype.sell=function(){\n   alert(&quot;我是&quot;+this.name+&quot;，我现在卖&quot;+this.price+&quot;万元&quot;);\n  }\nvar camry =new Car(&quot;凯美瑞&quot;,27);\ncamry.sell();\n</code></pre><p>Javascript作用链域?</p>\n<pre><code>全局函数无法查看局部函数的内部细节，但局部函数可以查看其上层的函数细节，直至全局细节。\n当需要从局部函数查找某一属性或方法时，如果当前作用域没有找到，就会上溯到上层作用域查找，\n直至全局函数，这种组织形式就是作用域链。\n</code></pre><p>谈谈This对象的理解。</p>\n<pre><code>this总是指向函数的直接调用者（而非间接调用者）；\n如果有new关键字，this指向new出来的那个对象；\n在事件中，this指向触发这个事件的对象，特殊的是，IE中的attachEvent中的this总是指向全局对象Window；\n</code></pre><p>eval是做什么的？</p>\n<pre><code>它的功能是把对应的字符串解析成JS代码并运行；\n应该避免使用eval，不安全，非常耗性能（2次，一次解析成js语句，一次执行）。\n由JSON字符串转换为JSON对象的时候可以用eval，var obj =eval(&apos;(&apos;+ str +&apos;)&apos;);\n</code></pre><p>什么是window对象? 什么是document对象?</p>\n<p>null，undefined 的区别？</p>\n<pre><code>null        表示一个对象是“没有值”的值，也就是值为“空”；\nundefined   表示一个变量没有被声明，不存在这个值，或者被声明了但没有被赋值；\n\nundefined不是一个有效的JSON，而null是；\nundefined的类型(typeof)是undefined；\nnull的类型(typeof)是object；\n\n\nJavascript将未赋值的变量默认值设为undefined；\nJavascript从来不会将变量设为null。它是用来让程序员表明某个用var声明的变量时没有值的。\n\ntypeof undefined\n    //&quot;undefined&quot;\n    undefined :是一个表示&quot;无&quot;的原始值或者说表示&quot;缺少值&quot;，就是此处应该有一个值，但是还没有定义。当尝试读    取时会返回 undefined； \n例如变量被声明了，但没有赋值时，就等于undefined\n\ntypeof null\n    //&quot;object&quot;\n    null : 是一个对象(空对象, 没有任何属性和方法)；\n    例如作为函数的参数，表示该函数的参数不是对象；\n\n注意：\n    在验证null时，一定要使用　=== ，因为 == 无法分别 null 和　undefined\n    null == undefined // true\n    null === undefined // false\n\n再来一个例子：\n\n    null\n    Q：有张三这个人么？\n    A：有！\n    Q：张三有房子么？\n    A：没有！\n\n    undefined\n    Q：有张三这个人么？\n    A：没有！\n</code></pre><p>参考阅读：<a href=\"http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html\"><font style=\"color:blue\">undefined与null的区别</font></a></p>\n<p>写一个通用的事件侦听器函数。</p>\n<pre><code>// event(事件)工具集，来源：github.com/markyun\nmarkyun.Event = {\n    // 页面加载完成后\n    readyEvent : function(fn) {\n        if (fn==null) {\n            fn=document;\n        }\n        var oldonload = window.onload;\n        if (typeof window.onload != &apos;function&apos;) {\n            window.onload = fn;\n        } else {\n            window.onload = function() {\n                oldonload();\n                fn();\n            };\n        }\n    },\n    // 视能力分别使用dom0||dom2||IE方式 来绑定事件\n    // 参数： 操作的元素,事件名称 ,事件处理程序\n    addEvent : function(element, type, handler) {\n        if (element.addEventListener) {\n            //事件类型、需要执行的函数、是否捕捉\n            element.addEventListener(type, handler, false);\n        } else if (element.attachEvent) {\n            element.attachEvent(&apos;on&apos; + type, function() {\n                handler.call(element);\n            });\n        } else {\n            element[&apos;on&apos; + type] = handler;\n        }\n    },\n    // 移除事件\n    removeEvent : function(element, type, handler) {\n        if (element.removeEventListener) {\n            element.removeEventListener(type, handler, false);\n        } else if (element.datachEvent) {\n            element.detachEvent(&apos;on&apos; + type, handler);\n        } else {\n            element[&apos;on&apos; + type] = null;\n        }\n    },\n    // 阻止事件 (主要是事件冒泡，因为IE不支持事件捕获)\n    stopPropagation : function(ev) {\n        if (ev.stopPropagation) {\n            ev.stopPropagation();\n        } else {\n            ev.cancelBubble = true;\n        }\n    },\n    // 取消事件的默认行为\n    preventDefault : function(event) {\n        if (event.preventDefault) {\n            event.preventDefault();\n        } else {\n            event.returnValue = false;\n        }\n    },\n    // 获取事件目标\n    getTarget : function(event) {\n        return event.target || event.srcElement;\n    },\n    // 获取event对象的引用，取到事件的所有信息，确保随时能使用event；\n    getEvent : function(e) {\n        var ev = e || window.event;\n        if (!ev) {\n            var c = this.getEvent.caller;\n            while (c) {\n                ev = c.arguments[0];\n                if (ev &amp;&amp; Event == ev.constructor) {\n                    break;\n                }\n                c = c.caller;\n            }\n        }\n        return ev;\n    }\n};\n</code></pre><p>[“1”, “2”, “3”].map(parseInt) 答案是多少？</p>\n<pre><code>parseInt() 函数能解析一个字符串，并返回一个整数，需要两个参数 (val, radix)，\n其中 radix 表示要解析的数字的基数。【该值介于 2 ~ 36 之间，并且字符串中的数字不能大于radix才能正确返回    数字结果值】;\n但此处 map 传了 3 个 (element, index, array),我们重写parseInt函数测试一下是否符合上面的规则。\n\nfunction parseInt(str, radix) {   \n    return str+&apos;-&apos;+radix;   \n};  \nvar a=[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;];  \na.map(parseInt);  // [&quot;1-0&quot;, &quot;2-1&quot;, &quot;3-2&quot;] 不能大于radix\n\n因为二进制里面，没有数字3,导致出现超范围的radix赋值和不合法的进制解析，才会返回NaN\n所以[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;].map(parseInt) 答案也就是：[1, NaN, NaN]\n\n详细解析：http://blog.csdn.net/justjavac/article/details/19473199\n</code></pre><p>事件是？IE与火狐的事件机制有什么区别？ 如何阻止冒泡？</p>\n<pre><code>1. 我们在网页中的某个操作（有的操作对应多个事件）。例如：当我们点击一个按钮就会产生一个事件。是可以被     JavaScript 侦测到的行为。\n2. 事件处理机制：IE是事件冒泡、Firefox同时支持两种事件模型，也就是：捕获型事件和冒泡型事件；\n3. ev.stopPropagation();（旧ie的方法 ev.cancelBubble = true;）\n</code></pre><p>什么是闭包（closure），为什么要用它？</p>\n<pre><code>闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一    个函数访问这个函数的局部变量,利用闭包可以突破作用链域，将函数内部的变量和方法传递到外部。\n\n闭包的特性：\n\n    1.函数内再嵌套函数\n    2.内部函数可以引用外层的参数和变量\n    3.参数和变量不会被垃圾回收机制回收\n\n//li节点的onclick事件都能正确的弹出当前被点击的li索引\n     &lt;ul id=&quot;testUL&quot;&gt;\n        &lt;li&gt; index = 0&lt;/li&gt;\n        &lt;li&gt; index = 1&lt;/li&gt;\n        &lt;li&gt; index = 2&lt;/li&gt;\n        &lt;li&gt; index = 3&lt;/li&gt;\n    &lt;/ul&gt;\n&lt;script type=&quot;text/javascript&quot;&gt;\n    var nodes = document.getElementsByTagName(&quot;li&quot;);\n    for(i = 0;i&lt;nodes.length;i+= 1){\n        nodes[i].onclick = (function(i){\n              return function() {\n                 console.log(i);\n              } //不用闭包的话，值每次都是4\n            })(i);\n    }\n&lt;/script&gt;\n\n\n\n执行say667()后,say667()闭包内部变量会存在,而闭包内部函数的内部变量不会存在\n使得Javascript的垃圾回收机制GC不会收回say667()所占用的资源\n因为say667()的内部函数的执行需要依赖say667()中的变量\n这是对闭包作用的非常直白的描述\n\n  function say667() {\n    // Local variable that ends up within closure\n    var num = 666;\n    var sayAlert = function() {\n        alert(num);\n    }\n    num++;\n    return sayAlert;\n}\n\n var sayAlert = say667();\n sayAlert()//执行结果应该弹出的667\n</code></pre><p>javascript 代码中的”use strict”;是什么意思 ? 使用它区别是什么？</p>\n<pre><code>use strict是一种ECMAscript 5 添加的（严格）运行模式,这种模式使得 Javascript 在更严格的条件下运行,\n\n使JS编码更加规范化的模式,消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为。\n默认支持的糟糕特性都会被禁用，比如不能用with，也不能在意外的情况下给全局变量赋值;\n全局变量的显示声明,函数必须声明在顶层，不允许在非函数代码块内声明函数,arguments.callee也不允许使用；\n消除代码运行的一些不安全之处，保证代码运行的安全,限制函数中的arguments修改，严格模式下的eval函数的行为和    非严格模式的也不相同;\n\n提高编译器效率，增加运行速度；\n为未来新版本的Javascript标准化做铺垫。\n</code></pre><p>如何判断一个对象是否属于某个类？</p>\n<pre><code>使用instanceof （待完善）\n     if(a instanceof Person){\n         alert(&apos;yes&apos;);\n     }\n</code></pre><p>new操作符具体干了什么呢?</p>\n<pre><code> 1、创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。\n 2、属性和方法被加入到 this 引用的对象中。\n 3、新创建的对象由 this 所引用，并且最后隐式的返回 this 。\n\nvar obj  = {};\nobj.__proto__ = Base.prototype;\nBase.call(obj);\n</code></pre><p>用原生JavaScript的实现过什么功能吗？</p>\n<p>Javascript中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？</p>\n<pre><code>hasOwnProperty\n\njavaScript中hasOwnProperty函数方法是返回一个布尔值，指出一个对象是否具有指定名称的属性。此方法无法检查    该对象的原型链中是否具有该属性；该属性必须是对象本身的一个成员。\n使用方法：\nobject.hasOwnProperty(proName)\n其中参数object是必选项。一个对象的实例。\nproName是必选项。一个属性名称的字符串值。\n</code></pre><p>如果 object 具有指定名称的属性，那么JavaScript中hasOwnProperty函数方法返回 true，反之则返回 false。<br>JSON 的了解？</p>\n<pre><code>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。\n它是基于JavaScript的一个子集。数据格式简单, 易于读写, 占用带宽小\n如：{&quot;age&quot;:&quot;12&quot;, &quot;name&quot;:&quot;back&quot;}\n\nJSON字符串转换为JSON对象:\nvar obj =eval(&apos;(&apos;+ str +&apos;)&apos;);\nvar obj = str.parseJSON();\nvar obj = JSON.parse(str);\n\nJSON对象转换为JSON字符串：\nvar last=obj.toJSONString();\nvar last=JSON.stringify(obj);\n</code></pre><h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\" \"></a> </h1><pre><code>    [].forEach.call($$(&quot;*&quot;),function(a){a.style.outline=&quot;1px solid #&quot;+    (~~(Math.random()*(1&lt;&lt;24))).toString(16)}) \n能解释一下这段代码的意思吗？\n</code></pre><p>js延迟加载的方式有哪些？</p>\n<pre><code>defer和async、动态创建DOM方式（用得最多）、按需异步载入js\n</code></pre><p>Ajax 是什么? 如何创建一个Ajax？</p>\n<pre><code>ajax的全称：Asynchronous Javascript And XML。\n异步传输+js+xml。\n所谓异步，在这里简单地解释就是：向服务器发送请求的时候，我们不必等待结果，而是可以同时做其他的事情，等到有了    结果它自己会根据设定进行后续操作，与此同时，页面是不会发生整页刷新的，提高了用户体验。\n\n(1)创建XMLHttpRequest对象,也就是创建一个异步调用对象\n(2)创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息\n(3)设置响应HTTP请求状态变化的函数\n(4)发送HTTP请求\n(5)获取异步调用返回的数据\n(6)使用JavaScript和DOM实现局部刷新\n</code></pre><p>同步和异步的区别?</p>\n<pre><code>同步的概念应该是来自于OS中关于同步的概念:不同进程为协同完成某项工作而在先后次序上调整(通过阻塞,唤醒等方    式).同步强调的是顺序性.谁先谁后.异步则不存在这种顺序性.\n\n同步：浏览器访问服务器请求，用户看得到页面刷新，重新发请求,等请求完，页面刷新，新内容出现，用户看到新内容,进行下一步操作。\n\n异步：浏览器访问服务器请求，用户正常操作，浏览器后端进行请求。等请求完，页面不刷新，新内容也会出现，用户看到新内容。\n</code></pre><p>（待完善）</p>\n<p>如何解决跨域问题?</p>\n<pre><code>jsonp、 iframe、window.name、window.postMessage、服务器上设置代理页面\n</code></pre><p>页面编码和被请求的资源编码如果不一致如何处理？</p>\n<p>模块化开发怎么做？</p>\n<p><a href=\"http://benalman.com/news/2010/11/immediately-invoked-function-expression/\">立即执行函数</a>,不暴露私有成员</p>\n<pre><code>var module1 = (function(){\n　　　　var _count = 0;\n　　　　var m1 = function(){\n　　　　　　//...\n　　　　};\n　　　　var m2 = function(){\n　　　　　　//...\n　　　　};\n　　　　return {\n　　　　　　m1 : m1,\n　　　　　　m2 : m2\n　　　　};\n　　})();\n</code></pre><p>（待完善）</p>\n<p>AMD（Modules/Asynchronous-Definition）、CMD（Common Module Definition）规范区别？</p>\n<p>AMD 规范在这里：<a href=\"https://github.com/amdjs/amdjs-api/wiki/AMD\">https://github.com/amdjs/amdjs-api/wiki/AMD</a></p>\n<p>CMD 规范在这里：<a href=\"https://github.com/seajs/seajs/issues/242\">https://github.com/seajs/seajs/issues/242</a></p>\n<pre><code>Asynchronous Module Definition，异步模块定义，所有的模块将被异步加载，模块加载不影响后面语句运行。所    有依赖某些模块的语句均放置在回调函数中。\n\n 区别：\n\n1. 对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible.\n2. CMD 推崇依赖就近，AMD 推崇依赖前置。看代码：\n\n// CMD\ndefine(function(require, exports, module) {\n    var a = require(&apos;./a&apos;)\n    a.doSomething()\n    // 此处略去 100 行\n    var b = require(&apos;./b&apos;) // 依赖可以就近书写\n    b.doSomething()\n    // ...\n})\n\n// AMD 默认推荐\ndefine([&apos;./a&apos;, &apos;./b&apos;], function(a, b) { // 依赖必须一开始就写好\n    a.doSomething()\n    // 此处略去 100 行\n    b.doSomething()\n    // ...\n})\n</code></pre><p>requireJS的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何 缓存的？）</p>\n<pre><code>参考：http://annn.me/how-to-realize-cmd-loader/\n</code></pre><p>JS模块加载器的轮子怎么造，也就是如何实现一个模块加载器？</p>\n<p>谈一谈你对ECMAScript6的了解？</p>\n<p>ECMAScript6 怎么写class么，为什么会出现class这种东西?</p>\n<p>异步加载JS的方式有哪些？</p>\n<pre><code>(1) defer，只支持IE\n\n(2) async：\n\n(3) 创建script，插入到DOM中，加载完毕后callBack\n</code></pre><p>documen.write和 innerHTML的区别</p>\n<pre><code>document.write只能重绘整个页面\n\ninnerHTML可以重绘页面的一部分\n</code></pre><p>DOM操作——怎样添加、移除、移动、复制、创建和查找节点?</p>\n<pre><code>（1）创建新节点\n  createDocumentFragment()    //创建一个DOM片段\n   createElement()   //创建一个具体的元素\n   createTextNode()   //创建一个文本节点\n（2）添加、移除、替换、插入\n  appendChild()\n  removeChild()\n  replaceChild()\n  insertBefore() //在已有的子节点前插入一个新的子节点\n（3）查找\n  getElementsByTagName()    //通过标签名称\n  getElementsByName()    //通过元素的Name属性的值(IE容错能力较强，会得到一个数组，其中包括id等于    name值的)\n  getElementById()    //通过元素Id，唯一性\n</code></pre><p>.call() 和 .apply() 的区别？</p>\n<pre><code>  例子中用 add 来替换 sub，add.call(sub,3,1) == add(3,1) ，所以运行结果为：alert(4);\n\n  注意：js 中的函数其实是对象，函数名是对 Function 对象的引用。\n\nfunction add(a,b)\n{\n    alert(a+b);\n}\n\nfunction sub(a,b)\n{\n    alert(a-b);\n}\n\nadd.call(sub,3,1);\n</code></pre><p>数组和对象有哪些原生方法，列举一下？</p>\n<p>JS 怎么实现一个类。怎么实例化这个类</p>\n<p>JavaScript中的作用域与变量声明提升？</p>\n<p>如何编写高性能的Javascript？</p>\n<p>那些操作会造成内存泄漏？</p>\n<p>JQuery的源码看过吗？能不能简单概况一下它的实现原理？</p>\n<p>jQuery.fn的init方法返回的this指的是什么对象？为什么要返回this？</p>\n<p>jquery中如何将数组转化为json字符串，然后再转化回来？</p>\n<p>jQuery 的属性拷贝(extend)的实现原理是什么，如何实现深拷贝？</p>\n<p>jquery.extend 与 jquery.fn.extend的区别？</p>\n<p>jQuery 的队列是如何实现的？队列可以用在哪些地方？</p>\n<p>谈一下Jquery中的bind(),live(),delegate(),on()的区别？</p>\n<p>JQuery一个对象可以同时绑定多个事件，这是如何实现的？</p>\n<p>是否知道自定义事件。jQuery里的fire函数是什么意思，什么时候用？</p>\n<p>jQuery 是通过哪个方法和 Sizzle 选择器结合的？（jQuery.fn.find()进入Sizzle）</p>\n<p>针对 jQuery性能的优化方法？</p>\n<p>Jquery与jQuery UI 有啥区别？</p>\n<pre><code>*jQuery是一个js库，主要提供的功能是选择器，属性修改和事件绑定等等。\n\n*jQuery UI则是在jQuery的基础上，利用jQuery的扩展性，设计的插件。\n 提供了一些常用的界面元素，诸如对话框、拖动行为、改变大小行为等等\n</code></pre><p>JQuery的源码看过吗？能不能简单说一下它的实现原理？</p>\n<p>jquery 中如何将数组转化为json字符串，然后再转化回来？</p>\n<p>jQuery中没有提供这个功能，所以你需要先编写两个jQuery的扩展：</p>\n<pre><code>$.fn.stringifyArray = function(array) {\n    return JSON.stringify(array)\n}\n\n$.fn.parseArray = function(array) {\n    return JSON.parse(array)\n}\n\n然后调用：\n$(&quot;&quot;).stringifyArray(array)\n</code></pre><p>jQuery和Zepto的区别？各自的使用场景？</p>\n<p>针对 jQuery 的优化方法？</p>\n<pre><code>*基于Class的选择性的性能相对于Id选择器开销很大，因为需遍历所有DOM元素。\n\n*频繁操作的DOM，先缓存起来再操作。用Jquery的链式调用更好。\n 比如：var str=$(&quot;a&quot;).attr(&quot;href&quot;);\n\n*for (var i = size; i &lt; arr.length; i++) {}\n for 循环每一次循环都查找了数组 (arr) 的.length 属性，在开始循环的时候设置一个变量来存储这个数字，可以让    循环跑得更快：\n for (var i = size, length = arr.length; i &lt; length; i++) {}\n \u0010\u0010\u0010\u0010\u0010\n</code></pre><p>Zepto的点透问题如何解决？</p>\n<p>jQueryUI如何自定义组件?</p>\n<p>需求：实现一个页面操作不会整页刷新的网站，并且能在浏览器前进、后退时正确响应。给出你的技术实现方案？</p>\n<p>如何判断当前脚本运行在浏览器还是node环境中？（阿里）</p>\n<p>通过判断Global对象是否为window，如果不为window，当前脚本没有运行在浏览器中<br>移动端最小触控区域是多大？</p>\n<p>jQuery 的 slideUp动画 ，如果目标元素是被外部事件驱动, 当鼠标快速地连续触发外部元素事件, 动画会滞后的反复执行，该如何处理呢?</p>\n<p>把 Script 标签 放在页面的最底部的body封闭之前 和封闭之后有什么区别？浏览器会如何解析它们？</p>\n<p>移动端的点击事件的有延迟，时间是多久，为什么会有？ 怎么解决这个延时？（click 有 300ms 延迟,为了实现safari的双击事件的设计，浏览器要知道你是不是要双击操作。）</p>\n<p>知道各种JS框架(Angular, Backbone, Ember, React, Meteor, Knockout…)么? 能讲出他们各自的优点和缺点么?</p>\n<p>Underscore 对哪些 JS 原生对象进行了扩展以及提供了哪些好用的函数方法？</p>\n<p>解释JavaScript中的作用域与变量声明提升？</p>\n<p>那些操作会造成内存泄漏？</p>\n<pre><code>内存泄漏指任何对象在您不再拥有或需要它之后仍然存在。\n垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为 0（没有其他对象引用    过该对象），或对该对象的惟一引用是循环的，那么该对象的内存即可回收。\n\nsetTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏。\n闭包、控制台日志、循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）\n</code></pre><p>JQuery一个对象可以同时绑定多个事件，这是如何实现的？</p>\n<p>Node.js的适用场景？</p>\n<p>(如果会用node)知道route, middleware, cluster, nodemon, pm2, server-side rendering么?</p>\n<p>解释一下 Backbone 的 MVC 实现方式？</p>\n<p>什么是“前端路由”?什么时候适合使用“前端路由”? “前端路由”有哪些优点和缺点?</p>\n<p>知道什么是webkit么? 知道怎么用浏览器的各种工具来调试和debug代码么?</p>\n<p>如何测试前端代码么? 知道BDD, TDD, Unit Test么? 知道怎么测试你的前端工程么(mocha, sinon, jasmin, qUnit..)?</p>\n<p>前端templating(Mustache, underscore, handlebars)是干嘛的, 怎么用?</p>\n<p>简述一下 Handlebars 的基本用法？</p>\n<p>简述一下 Handlerbars 的对模板的基本处理流程， 如何编译的？如何缓存的？</p>\n<p>用js实现千位分隔符?(来源：<a href=\"http://div.io/topic/744\">前端农民工</a>，提示：正则+replace)</p>\n<pre><code>参考：http://www.tuicool.com/articles/ArQZfui\n    function commafy(num) {\n        return num &amp;&amp; num\n            .toString()\n            .replace(/(\\d)(?=(\\d{3})+\\.)/g, function($0, $1) {\n            return $1 + &quot;,&quot;;\n    });\n}\n</code></pre><p>console.log(commafy(1234567.90)); //1,234,567.90</p>\n<p>检测浏览器版本版本有哪些方式？</p>\n<pre><code>功能检测、userAgent特征检测\n\n比如：navigator.userAgent\n//&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36\n  (KHTML, like Gecko) Chrome/41.0.2272.101 Safari/537.36&quot;\n</code></pre><p>What is a Polyfill?</p>\n<pre><code>polyfill 是“在旧版浏览器上复制标准 API 的 JavaScript 补充”,可以动态地加载 JavaScript 代码或库，在不    支持这些标准 API 的浏览器中模拟它们。\n例如，geolocation（地理位置）polyfill 可以在 navigator 对象上添加全局的 geolocation 对象，还能添加     getCurrentPosition 函数以及“坐标”回调对象，\n所有这些都是 W3C 地理位置 API 定义的对象和函数。因为 polyfill 模拟标准 API，所以能够以一种面向所有浏览    器未来的方式针对这些 API 进行开发，\n一旦对这些 API 的支持变成绝对大多数，则可以方便地去掉 polyfill，无需做任何额外工作。\n</code></pre><p>做的项目中，有没有用过或自己实现一些 polyfill 方案（兼容性处理方案）？</p>\n<pre><code>比如： html5shiv、Geolocation、Placeholder \n</code></pre><p>我们给一个dom同时绑定两个点击事件，一个用捕获，一个用冒泡。会执行几次事件，会先执行冒泡还是捕获？</p>\n<p>使用JS实现获取文件扩展名？</p>\n<pre><code>function getFileExtension(filename) {\n      return filename.slice((filename.lastIndexOf(&quot;.&quot;) - 1 &gt;&gt;&gt; 0) + 2);\n}   \n\nString.lastIndexOf() 方法返回指定值（本例中的&apos;.&apos;）在调用该方法的字符串中最后出现的位置，如果没找到则返    回 -1。\n对于&apos;filename&apos;和&apos;.hiddenfile&apos;，lastIndexOf的返回值分别为0和-1无符号右移操作符(»&gt;) 将-1转换为    4294967295，将-2转换为4294967294，这个方法可以保证边缘情况时文件名不变。\nString.prototype.slice() 从上面计算的索引处提取文件的扩展名。如果索引比文件名的长度大，结果为&quot;&quot;。\n</code></pre><p>ECMAScript6 相关</p>\n<p>Object.is() 与原来的比较操作符“ ===”、“ ==”的区别？</p>\n<pre><code>两等号判等，会在比较时进行类型转换；\n三等号判等(判断严格)，比较时不进行隐式类型转换,（类型不同则会返回false）； \n\nObject.is 在三等号判等的基础上特别处理了 NaN 、-0 和 +0 ，保证 -0 和 +0 不再相同，\n但 Object.is(NaN, NaN) 会返回 true.\n\nObject.is 应被认为有其特殊的用途，而不能用它认为它比其它的相等对比更宽松或严格。\n</code></pre><p>前端框架相关</p>\n<p>react-router 路由系统的实现原理？</p>\n<p>React中如何解决第三方类库的问题?</p>\n<p>其他问题</p>\n<p>原来公司工作流程是怎么样的，如何与其他人协作的？如何夸部门合作的？</p>\n<p>你遇到过比较难的技术问题是？你是如何解决的？</p>\n<p>设计模式 知道什么是singleton, factory, strategy, decrator么?</p>\n<p>常使用的库有哪些？常用的前端开发工具？开发过什么应用或组件？</p>\n<p>页面重构怎么操作？</p>\n<pre><code>网站重构：在不改变外部行为的前提下，简化结构、添加可读性，而在网站前端保持一致的行为。\n也就是说是在不改变UI的情况下，对网站进行优化，在扩展的同时保持一致的UI。\n\n对于传统的网站来说重构通常是：\n\n表格(table)布局改为DIV+CSS\n使网站前端兼容于现代浏览器(针对于不合规范的CSS、如对IE6有效的)\n对于移动平台的优化\n针对于SEO进行优化\n深层次的网站重构应该考虑的方面\n\n减少代码间的耦合\n让代码保持弹性\n严格按规范编写代码\n设计可扩展的API\n代替旧有的框架、语言(如VB)\n增强用户体验\n通常来说对于速度的优化也包含在重构中\n\n压缩JS、CSS、image等前端资源(通常是由服务器来解决)\n程序的性能优化(如数据读写)\n采用CDN来加速资源加载\n对于JS DOM的优化\nHTTP服务器的文件缓存\n</code></pre><p>列举IE与其他浏览器不一样的特性？</p>\n<pre><code>1、事件不同之处：\n\n触发事件的元素被认为是目标（target）。而在 IE 中，目标包含在 event 对象的 srcElement 属性；\n\n获取字符代码、如果按键代表一个字符（shift、ctrl、alt除外），IE 的 keyCode 会返回字符代码（Unicode），DOM 中按键的代码和字符是分离的，要获取字符代码，需要使用 charCode 属性；\n\n阻止某个事件的默认行为，IE 中阻止某个事件的默认行为，必须将 returnValue 属性设置为 false，Mozilla 中，需要调用 preventDefault() 方法；\n\n停止事件冒泡，IE 中阻止事件进一步冒泡，需要设置 cancelBubble 为 true，Mozzilla 中，需要调用 stopPropagation()；\n</code></pre><p>99%的网站都需要被重构是那本书上写的？</p>\n<pre><code>网站重构：应用web标准进行设计（第2版）\n</code></pre><p>什么叫优雅降级和渐进增强？</p>\n<pre><code>优雅降级：Web站点在所有新式浏览器中都能正常工作，如果用户使用的是老式浏览器，则代码会针对旧版本的IE进行降    级处理了,使之在旧式浏览器上以某种形式降级体验却不至于完全不能用。\n如：border-shadow\n\n渐进增强：从被所有浏览器支持的基本功能开始，逐步地添加那些只有新版本浏览器才支持的功能,向页面增加不影响基础    浏览器的额外样式和功能的。当浏览器支持时，它们会自动地呈现出来并发挥作用。\n如：默认使用flash上传，但如果浏览器支持 HTML5 的文件上传功能，则使用HTML5实现更好的体验；\n</code></pre><p>是否了解公钥加密和私钥加密?</p>\n<pre><code>一般情况下是指私钥用于对数据进行签名，公钥用于对签名进行验证;\nHTTP网站在浏览器端用公钥加密敏感数据，然后在服务器端再用私钥解密。\n</code></pre><p>WEB应用从服务器主动推送Data到客户端有那些方式？</p>\n<pre><code>html5提供的Websocket\n不可见的iframe\nWebSocket通过Flash\nXHR长时间连接\nXHR Multipart Streaming\n&lt;script&gt;标签的长时间连接(可跨域)\n</code></pre><p>对Node的优点和缺点提出了自己的看法？</p>\n<pre><code>*（优点）因为Node是基于事件驱动和无阻塞的，所以非常适合处理并发请求，\n  因此构建在Node上的代理服务器相比其他技术实现（如Ruby）的服务器表现要好得多。\n  此外，与Node代理服务器交互的客户端代码是由javascript语言编写的，\n  因此客户端和服务器端都用同一种语言编写，这是非常美妙的事情。\n\n*（缺点）Node是一个相对新的开源项目，所以不太稳定，它总是一直在变，\n  而且缺少足够多的第三方库支持。看起来，就像是Ruby/Rails当年的样子。\n</code></pre><p>你有用过哪些前端性能优化的方法？</p>\n<pre><code>  （1） 减少http请求次数：CSS Sprites, JS、CSS源码压缩、图片大小控制合适；网页Gzip，CDN托管，data缓    存 ，图片服务器。\n\n（2） 前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数\n\n  （3） 用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能。\n\n  （4） 当需要设置的样式很多时设置className而不是直接操作style。\n\n  （5） 少用全局变量、缓存DOM节点查找的结果。减少IO读取操作。\n\n  （6） 避免使用CSS Expression（css表达式)又称Dynamic properties(动态属性)。\n\n  （7） 图片预加载，将样式表放在顶部，将脚本放在底部  加上时间戳。\n\n  （8） 避免在页面的主体布局中使用table，table要等其中的内容完全下载之后才会显示出来，显示比div+css布局    慢。\n  对普通的网站有一个统一的思路，就是尽量向前端优化、减少数据库操作、减少磁盘IO。向前端优化指的是，在不影响    功能和体验的情况下，能在浏览器执行的不要在服务端执行，能在缓存服务器上直接返回的不要到应用服务器，程序能直接    取得的结果不要到外部取得，本机内能取得的数据不要到远程取，内存能取到的不要到磁盘取，缓存中有的不要去数据库查    询。减少数据库操作指减少更新次数、缓存结果减少查询次数、将数据库执行的操作尽可能的让你的程序完成（例如join    查询），减少磁盘IO指尽量不使用文件系统作为缓存、减少读写文件次数等。程序优化永远要优化慢的部分，换语言是无    法“优化”的。\n  \u0010\n</code></pre><p>http状态码有那些？分别代表是什么意思？</p>\n<pre><code>简单版\n[\n    100  Continue   继续，一般在发送post请求时，已发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息\n    200  OK         正常返回信息\n    201  Created    请求成功并且服务器创建了新的资源\n    202  Accepted   服务器已接受请求，但尚未处理\n    301  Moved Permanently  请求的网页已永久移动到新位置。\n    302 Found       临时性重定向。\n    303 See Other   临时性重定向，且总是使用 GET 请求新的 URI。\n    304  Not Modified 自从上次请求后，请求的网页未修改过。\n\n    400 Bad Request  服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。\n    401 Unauthorized 请求未授权。\n    403 Forbidden   禁止访问。\n    404 Not Found   找不到如何与 URI 相匹配的资源。\n\n    500 Internal Server Error  最常见的服务器端错误。\n    503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）。\n]\n\n  完整版\n  1**(信息类)：表示接收到请求并且继续处理\n    100——客户必须继续发出请求\n    101——客户要求服务器根据请求转换HTTP协议版本\n\n  2**(响应成功)：表示动作被成功接收、理解和接受\n    200——表明该请求被成功地完成，所请求的资源发送回客户端\n    201——提示知道新文件的URL\n    202——接受和处理、但处理未完成\n    203——返回信息不确定或不完整\n    204——请求收到，但返回信息为空\n    205——服务器完成了请求，用户代理必须复位当前已经浏览过的文件\n    206——服务器已经完成了部分用户的GET请求\n\n  3**(重定向类)：为了完成指定的动作，必须接受进一步处理\n    300——请求的资源可在多处得到\n    301——本网页被永久性转移到另一个URL\n     302——请求的网页被转移到一个新的地址，但客户访问仍继续通过原始URL地址，重定向，新的URL会在response中的    Location中返回，浏览器将会使用新的URL发出新的Request。\n    303——建议客户访问其他URL或访问方式\n    304——自从上次请求后，请求的网页未修改过，服务器返回此响应时，不会返回网页内容，代表上次的文档已经被缓    存了，还可以继续使用\n    305——请求的资源必须从服务器指定的地址得到\n    306——前一版本HTTP中使用的代码，现行版本中不再使用\n    307——申明请求的资源临时性删除\n\n  4**(客户端错误类)：请求包含错误语法或不能正确执行\n    400——客户端请求有语法错误，不能被服务器所理解\n    401——请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用\n    HTTP 401.1 - 未授权：登录失败\n　　HTTP 401.2 - 未授权：服务器配置问题导致登录失败\n　　HTTP 401.3 - ACL 禁止访问资源\n　　HTTP 401.4 - 未授权：授权被筛选器拒绝\nHTTP 401.5 - 未授权：ISAPI 或 CGI 授权失败\n402——保留有效ChargeTo头响应\n403——禁止访问，服务器收到请求，但是拒绝提供服务\nHTTP 403.1 禁止访问：禁止可执行访问\n　　HTTP 403.2 - 禁止访问：禁止读访问\n　　HTTP 403.3 - 禁止访问：禁止写访问\n　　HTTP 403.4 - 禁止访问：要求 SSL\n　　HTTP 403.5 - 禁止访问：要求 SSL 128\n　　HTTP 403.6 - 禁止访问：IP 地址被拒绝\n　　HTTP 403.7 - 禁止访问：要求客户证书\n　　HTTP 403.8 - 禁止访问：禁止站点访问\n　　HTTP 403.9 - 禁止访问：连接的用户过多\n　　HTTP 403.10 - 禁止访问：配置无效\n　　HTTP 403.11 - 禁止访问：密码更改\n　　HTTP 403.12 - 禁止访问：映射器拒绝访问\n　　HTTP 403.13 - 禁止访问：客户证书已被吊销\n　　HTTP 403.15 - 禁止访问：客户访问许可过多\n　　HTTP 403.16 - 禁止访问：客户证书不可信或者无效\nHTTP 403.17 - 禁止访问：客户证书已经到期或者尚未生效\n404——一个404错误表明可连接服务器，但服务器无法取得所请求的网页，请求资源不存在。eg：输入了错误的URL\n405——用户在Request-Line字段定义的方法不允许\n406——根据用户发送的Accept拖，请求资源不可访问\n407——类似401，用户必须首先在代理服务器上得到授权\n408——客户端没有在用户指定的饿时间内完成请求\n409——对当前资源状态，请求不能完成\n410——服务器上不再有此资源且无进一步的参考地址\n411——服务器拒绝用户定义的Content-Length属性请求\n412——一个或多个请求头字段在当前请求中错误\n413——请求的资源大于服务器允许的大小\n414——请求的资源URL长于服务器允许的长度\n415——请求资源不支持请求项目格式\n416——请求中包含Range请求头字段，在当前请求资源范围内没有range指示值，请求也不包含If-Range请求头字段\n417——服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求长。\n\n  5**(服务端错误类)：服务器不能正确执行一个正确的请求\n    HTTP 500 - 服务器遇到错误，无法完成请求\n　　HTTP 500.100 - 内部服务器错误 - ASP 错误\n　　HTTP 500-11 服务器关闭\n　　HTTP 500-12 应用程序重新启动\n　　HTTP 500-13 - 服务器太忙\n　　HTTP 500-14 - 应用程序无效\n　　HTTP 500-15 - 不允许请求 global.asa\n　　Error 501 - 未实现\n     HTTP 502 - 网关错误\n      HTTP 503：由于超载或停机维护，服务器目前无法使用，一段时间后可能恢复正常\n</code></pre><p>一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？（流程说的越详细越好）</p>\n<pre><code>注：这题胜在区分度高，知识点覆盖广，再不懂的人，也能答出几句，\n而高手可以根据自己擅长的领域自由发挥，从URL规范、HTTP协议、DNS、CDN、数据库查询、\n到浏览器流式解析、CSS规则构建、layout、paint、onload/domready、JS执行、JS API绑定等等；\n\n详细版：\n  1、浏览器会开启一个线程来处理这个请求，对 URL 分析判断如果是 http 协议就按照 Web 方式来处理;\n  2、调用浏览器内核中的对应方法，比如 WebView 中的 loadUrl 方法;\n  3、通过DNS解析获取网址的IP地址，设置 UA 等信息发出第二个GET请求;\n  4、进行HTTP协议会话，客户端发送报头(请求报头);\n  5、进入到web服务器上的 Web Server，如 Apache、Tomcat、Node.JS 等服务器;\n  6、进入部署好的后端应用，如 PHP、Java、JavaScript、Python 等，找到对应的请求处理;\n  7、处理结束回馈报头，此处如果浏览器访问过，缓存上有对应资源，会与服务器最后修改时间对比，一致则返回304;\n  8、浏览器开始下载html文档(响应报头，状态码200)，同时使用缓存;\n  9、文档树建立，根据标记请求所需指定MIME类型的文件（比如css、js）,同时设置了cookie;\n  10、页面开始渲染DOM，JS根据DOM API操作DOM,执行事件绑定等，页面显示完成。\n\n简洁版：\n  浏览器根据请求的URL交给DNS域名解析，找到真实IP，向服务器发起请求；\n  服务器交给后台处理完成后返回数据，浏览器接收文件（HTML、JS、CSS、图象等）；\n  浏览器对加载到的资源（HTML、JS、CSS等）进行语法解析，建立相应的内部数据结构（如HTML的DOM）；\n  载入解析到的资源文件，渲染页面，完成。\n</code></pre><p>部分地区用户反应网站很卡，请问有哪些可能性的原因，以及解决方法？</p>\n<p>从打开app到刷新出内容，整个过程中都发生了什么，如果感觉慢，怎么定位问题，怎么解决?</p>\n<p>除了前端以外还了解什么其它技术么？你最最厉害的技能是什么？</p>\n<p>你用的得心应手用的熟练地编辑器&amp;开发环境是什么样子？</p>\n<pre><code>Sublime Text 3 + 相关插件编写前端代码\nGoogle chrome 、Mozilla Firefox浏览器 +firebug 兼容测试和预览页面UI、动画效果和交互功能\nNode.js+Gulp\ngit 用于版本控制和Code Review\n</code></pre><p>对前端工程师这个职位是怎么样理解的？它的前景会怎么样？</p>\n<pre><code>前端是最贴近用户的程序员，比后端、数据库、产品经理、运营、安全都近。\n1、实现界面交互\n2、提升用户体验\n3、有了Node.js，前端可以实现服务端的一些事情\n\n\n前端是最贴近用户的程序员，前端的能力就是能让产品从 90分进化到 100 分，甚至更好，\n\n参与项目，快速高质量完成实现效果图，精确到1px；\n\n与团队成员，UI设计，产品经理的沟通；\n\n做好的页面结构，页面重构和用户体验；\n\n处理hack，兼容、写出优美的代码格式；\n\n针对服务器的优化、拥抱最新前端技术。\n</code></pre><p>你怎么看待Web App 、hybrid App、Native App？</p>\n<p>你移动端前端开发的理解？（和 Web 前端开发的主要区别是什么？）</p>\n<p>你对加班的看法？</p>\n<pre><code>加班就像借钱，原则应当是------救急不救穷\n</code></pre><p>平时如何管理你的项目？</p>\n<pre><code>先期团队必须确定好全局样式（globe.css），编码模式(utf-8) 等；\n\n编写习惯必须一致（例如都是采用继承式的写法，单样式都写成一行）；\n\n标注样式编写人，各模块都及时标注（标注关键样式调用的地方）；\n\n页面进行标注（例如 页面 模块 开始和结束）；\n\nCSS跟HTML 分文件夹并行存放，命名都得统一（例如style.css）；\n\nJS 分文件夹存放 命名以该JS功能为准的英文翻译。\n\n图片采用整合的 images.png png8 格式文件使用 尽量整合在一起使用方便将来的管理\n</code></pre><p>如何设计突发大规模并发架构？</p>\n<p>当团队人手不足，把功能代码写完已经需要加班的情况下，你会做前端代码的测试吗？</p>\n<p>说说最近最流行的一些东西吧？常去哪些网站？</p>\n<pre><code>ES6\\WebAssembly\\Node\\MVVM\\Web Components\\React\\React Native\\Webpack 组件化\n</code></pre><p>知道什么是SEO并且怎么优化么? 知道各种meta data的含义么?</p>\n<p>移动端（Android IOS）怎么做好用户体验?</p>\n<pre><code>清晰的视觉纵线、\n信息的分组、极致的减法、\n利用选择代替输入、\n标签及文字的排布方式、\n依靠明文确认密码、\n合理的键盘利用、\n\u0010\u0010\u0010\n</code></pre><p>简单描述一下你做过的移动APP项目研发流程？</p>\n<p>你在现在的团队处于什么样的角色，起到了什么明显的作用？</p>\n<p>你认为怎样才是全端工程师（Full Stack developer）？</p>\n<p>介绍一个你最得意的作品吧？</p>\n<p>你有自己的技术博客吗，用了哪些技术？</p>\n<p>对前端安全有什么看法？</p>\n<p>是否了解Web注入攻击，说下原理，最常见的两种攻击（XSS 和 CSRF）了解到什么程度？</p>\n<p>项目中遇到国哪些印象深刻的技术难题，具体是什么问题，怎么解决？。</p>\n<p>最近在学什么东西？</p>\n<p>你的优点是什么？缺点是什么？</p>\n<p>如何管理前端团队?</p>\n<p>最近在学什么？能谈谈你未来3，5年给自己的规划吗？</p>\n<h2 id=\"前端学习网站推荐\"><a href=\"#前端学习网站推荐\" class=\"headerlink\" title=\"前端学习网站推荐\"></a>前端学习网站推荐</h2><ol>\n<li><p>极客标签：     <a href=\"http://www.gbtags.com/\">http://www.gbtags.com/</a></p>\n</li>\n<li><p>码农周刊：     <a href=\"http://weekly.manong.io/issues/\">http://weekly.manong.io/issues/</a></p>\n</li>\n<li><p>前端周刊：     <a href=\"http://www.feweekly.com/issues\">http://www.feweekly.com/issues</a></p>\n</li>\n<li><p>慕课网：       <a href=\"http://www.imooc.com/\">http://www.imooc.com/</a></p>\n</li>\n<li><p>div.io：      <a href=\"http://div.io\">http://div.io</a></p>\n</li>\n<li><p>Hacker News： <a href=\"https://news.ycombinator.com/news\">https://news.ycombinator.com/news</a></p>\n</li>\n<li><p>InfoQ：       <a href=\"http://www.infoq.com/\">http://www.infoq.com/</a></p>\n</li>\n<li><p>w3cplus：     <a href=\"http://www.w3cplus.com/\">http://www.w3cplus.com/</a></p>\n</li>\n<li><p>Stack Overflow： <a href=\"http://stackoverflow.com/\">http://stackoverflow.com/</a></p>\n</li>\n<li><p>w3school：    <a href=\"http://www.w3school.com.cn/\">http://www.w3school.com.cn/</a></p>\n</li>\n<li><p>mozilla：     <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript</a>  </p>\n</li>\n</ol>\n<p>文档推荐</p>\n<p><a href=\"http://docs.huihoo.com/jquery/jquery-fundamentals/zh-cn/index.html\"><font style=\"color:blue\">jQuery 基本原理</font></a></p>\n<p><a href=\"http://bonsaiden.github.io/JavaScript-Garden/zh/\"><font style=\"color:blue\">JavaScript 秘密花园</font></a></p>\n<p><a href=\"http://css.doyoe.com/\"><font style=\"color:blue\">CSS参考手册</font></a></p>\n<p><a href=\"http://javascript.ruanyifeng.com/\"><font style=\"color:blue\">JavaScript 标准参考教程</font></a></p>\n<p><a href=\"http://javascript.ruanyifeng.com/\"><font style=\"color:blue\">ECMAScript 6入门</font></a></p>\n<p>备注：</p>\n<pre><code>根据自己需要选择性阅读，面试题是对理论知识的总结，让自己学会应该如何表达。\n\n资料答案不够正确和全面，欢迎欢迎Star和提交issues。\n\n格式不断修改更新中。\n\n在 github 项目的右上角，有三个按钮,分别是 watch、star、fork，新来的同学注意不要用错了，无休止的邮件提醒    会给你造成不必要的信息干扰。\n\n当你选择Watching，表示你以后会关注这个项目的全部动态，以后只要这个项目发生变动，被别人提交了pull     request、被发起了issue等情况你都会收到邮件通知。\n\nstar相当于是点赞或收藏，方便以后查找。\n\nfork表示你想要补充完善这个项目的内容。\n\n更新记录：\n\n2016年10月20日:更新一些已被发现的问题。\n\n2016年8月25日：新增ECMAScript6 相关问题   \n</code></pre>"},{"title":"实现图片的拖放","date":"2016-07-15T12:13:07.000Z","_content":"\n\n## 拖放\n##### 拖放是一种常见的特性，即抓取对象以后拖到另一个位置\n\n## Examples\n\n## dragenter\n\n\n\t开始拖动\n\t\n## dragover\t\n\n\t拖动中\n\n## dragleave\t\n\n\t拖动放开\n\t\n## drop\t\n\n\t拖动完成\n\n## Basis\n\n\t把图片拖到这里试试\t\t（这里就不做演示了）\n\n\t\n## css代码\n\n\t#target_box{\n  \t\t\tmax-width : 100%;\n  \t\t\twidth: 300px;\n  \t\t\theight: 100px;\n  \t\t\tborder: 1px solid red;\n  \t\t\tdisplay: flex;\n  \t\t\tjustify-content: center;\n  \t\t\talign-items: center;\n  \t\t\tfont-size: 18px; transition: all 0.5s;\n\t\t}\n\t#target_box.droping{\n  \t\t\tcolor: red;\n  \t\t\tfont-weight: blod;\n  \t\t\tfont-size: 30px;\n\t\t}\n\n\t#show-drop img{\n \t\t\t max-width : 100%;\n \t\t\t display: block;\n\t\t}\n\t\t\n## html代码\n\n\t\n\t<div id=\"target_box\">把图片拖到这里试试</div>\n\t<div id=\"show-drop\" title=\"将拖动的图片在这里显示出来\"></div>\n\t\n\t\n## js代码\n\n\tfunction addEventListener(dom,event,callback){\n    if(typeof dom == \"string\"){\n      document.querySelector(dom).addEventListener(event,callback);\n    }else{\n      dom.addEventListener(event,callback);\n    \t}\n\t}\n\t//开始拖动\n\taddEventListener(document,\"dragenter\",function(e){\n \t\t e.preventDefault();\n\t\t document.querySelector(\"#target_box\").setAttribute(\"class\",\"droping\");\n\t});\n\n\t//拖动中\n\taddEventListener(document,\"dragover\",function(e){\n \t\t e.preventDefault();\n\t});\n\n\t//拖放完成\n\taddEventListener(document,\"drop\",function(e){\n \t\t e.preventDefault();\n\t});\n\t//拖放离开\n\taddEventListener(document,\"dragleave\",function(e){\n \t\t e.preventDefault();\n \t document.querySelector(\"#target_box\").setAttribute(\"class\",\"\");\n\t});\n\t//监听是否拖放当元素上后离开的\n\t\taddEventListener(\"#target_box\",'drop',function(e){\n \t\t e.preventDefault();//移除原有浏览器监听效果\n \t\t var dataTransfer = e.dataTransfer;//获取文件对象\n  \t\t var files = dataTransfer.files[0];\n  \t//获取文件后缀\n \t var match = files.name ? files.name.match(/\\.([a-zA-Z]+)$/) || [] : false;\n  \t var suffix = match ? match[1] : \"\";\n \t//如果后缀不是图片\n  \tif(!suffix || [\"jpg\",\"jpeg\",\"png\",\"gif\"].indexOf(suffix.toLocaleLowerCase()) < 0){\n    \treturn alert(\"你拖动的不是图片\");\n  \t}\n  \t//读取文件的 base64 值\n  \t\tvar filereader = new FileReader();\n  \t\taddEventListener(filereader,'load',function(ee){\n    //获取 base64 编码\n    var base64 = ee.target.result;\n    var img = document.createElement(\"img\");\n    img.src = base64;\n    //将图片添加到页面中\n    document.querySelector(\"#show-drop\").appendChild(img);\n  \t});\n  \tfilereader.readAsDataURL(files);\n\t});\t\n\n## base64图片\n\n\t如果需要实现图片上传，可以将转行后的 base64 上传到服务器，服务器将 base64 生成为图片\n\t\n\t\n#### 希望大家能帮到大家的地方\t\n\t\n\t","source":"_posts/实现图片拖放.md","raw":"---\ntitle: 实现图片的拖放\ndate: 2016-7-15 20:13:07\ntags: [javascript,CSS]\n---\n\n\n## 拖放\n##### 拖放是一种常见的特性，即抓取对象以后拖到另一个位置\n\n## Examples\n\n## dragenter\n\n\n\t开始拖动\n\t\n## dragover\t\n\n\t拖动中\n\n## dragleave\t\n\n\t拖动放开\n\t\n## drop\t\n\n\t拖动完成\n\n## Basis\n\n\t把图片拖到这里试试\t\t（这里就不做演示了）\n\n\t\n## css代码\n\n\t#target_box{\n  \t\t\tmax-width : 100%;\n  \t\t\twidth: 300px;\n  \t\t\theight: 100px;\n  \t\t\tborder: 1px solid red;\n  \t\t\tdisplay: flex;\n  \t\t\tjustify-content: center;\n  \t\t\talign-items: center;\n  \t\t\tfont-size: 18px; transition: all 0.5s;\n\t\t}\n\t#target_box.droping{\n  \t\t\tcolor: red;\n  \t\t\tfont-weight: blod;\n  \t\t\tfont-size: 30px;\n\t\t}\n\n\t#show-drop img{\n \t\t\t max-width : 100%;\n \t\t\t display: block;\n\t\t}\n\t\t\n## html代码\n\n\t\n\t<div id=\"target_box\">把图片拖到这里试试</div>\n\t<div id=\"show-drop\" title=\"将拖动的图片在这里显示出来\"></div>\n\t\n\t\n## js代码\n\n\tfunction addEventListener(dom,event,callback){\n    if(typeof dom == \"string\"){\n      document.querySelector(dom).addEventListener(event,callback);\n    }else{\n      dom.addEventListener(event,callback);\n    \t}\n\t}\n\t//开始拖动\n\taddEventListener(document,\"dragenter\",function(e){\n \t\t e.preventDefault();\n\t\t document.querySelector(\"#target_box\").setAttribute(\"class\",\"droping\");\n\t});\n\n\t//拖动中\n\taddEventListener(document,\"dragover\",function(e){\n \t\t e.preventDefault();\n\t});\n\n\t//拖放完成\n\taddEventListener(document,\"drop\",function(e){\n \t\t e.preventDefault();\n\t});\n\t//拖放离开\n\taddEventListener(document,\"dragleave\",function(e){\n \t\t e.preventDefault();\n \t document.querySelector(\"#target_box\").setAttribute(\"class\",\"\");\n\t});\n\t//监听是否拖放当元素上后离开的\n\t\taddEventListener(\"#target_box\",'drop',function(e){\n \t\t e.preventDefault();//移除原有浏览器监听效果\n \t\t var dataTransfer = e.dataTransfer;//获取文件对象\n  \t\t var files = dataTransfer.files[0];\n  \t//获取文件后缀\n \t var match = files.name ? files.name.match(/\\.([a-zA-Z]+)$/) || [] : false;\n  \t var suffix = match ? match[1] : \"\";\n \t//如果后缀不是图片\n  \tif(!suffix || [\"jpg\",\"jpeg\",\"png\",\"gif\"].indexOf(suffix.toLocaleLowerCase()) < 0){\n    \treturn alert(\"你拖动的不是图片\");\n  \t}\n  \t//读取文件的 base64 值\n  \t\tvar filereader = new FileReader();\n  \t\taddEventListener(filereader,'load',function(ee){\n    //获取 base64 编码\n    var base64 = ee.target.result;\n    var img = document.createElement(\"img\");\n    img.src = base64;\n    //将图片添加到页面中\n    document.querySelector(\"#show-drop\").appendChild(img);\n  \t});\n  \tfilereader.readAsDataURL(files);\n\t});\t\n\n## base64图片\n\n\t如果需要实现图片上传，可以将转行后的 base64 上传到服务器，服务器将 base64 生成为图片\n\t\n\t\n#### 希望大家能帮到大家的地方\t\n\t\n\t","slug":"实现图片拖放","published":1,"updated":"2016-11-16T09:40:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civoyb9oy000v9xsmeuajcnf1","content":"<h2 id=\"拖放\"><a href=\"#拖放\" class=\"headerlink\" title=\"拖放\"></a>拖放</h2><h5 id=\"拖放是一种常见的特性，即抓取对象以后拖到另一个位置\"><a href=\"#拖放是一种常见的特性，即抓取对象以后拖到另一个位置\" class=\"headerlink\" title=\"拖放是一种常见的特性，即抓取对象以后拖到另一个位置\"></a>拖放是一种常见的特性，即抓取对象以后拖到另一个位置</h5><h2 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples\"></a>Examples</h2><h2 id=\"dragenter\"><a href=\"#dragenter\" class=\"headerlink\" title=\"dragenter\"></a>dragenter</h2><pre><code>开始拖动\n</code></pre><h2 id=\"dragover\"><a href=\"#dragover\" class=\"headerlink\" title=\"dragover\"></a>dragover</h2><pre><code>拖动中\n</code></pre><h2 id=\"dragleave\"><a href=\"#dragleave\" class=\"headerlink\" title=\"dragleave\"></a>dragleave</h2><pre><code>拖动放开\n</code></pre><h2 id=\"drop\"><a href=\"#drop\" class=\"headerlink\" title=\"drop\"></a>drop</h2><pre><code>拖动完成\n</code></pre><h2 id=\"Basis\"><a href=\"#Basis\" class=\"headerlink\" title=\"Basis\"></a>Basis</h2><pre><code>把图片拖到这里试试        （这里就不做演示了）\n</code></pre><h2 id=\"css代码\"><a href=\"#css代码\" class=\"headerlink\" title=\"css代码\"></a>css代码</h2><pre><code>#target_box{\n          max-width : 100%;\n          width: 300px;\n          height: 100px;\n          border: 1px solid red;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          font-size: 18px; transition: all 0.5s;\n    }\n#target_box.droping{\n          color: red;\n          font-weight: blod;\n          font-size: 30px;\n    }\n\n#show-drop img{\n          max-width : 100%;\n          display: block;\n    }\n</code></pre><h2 id=\"html代码\"><a href=\"#html代码\" class=\"headerlink\" title=\"html代码\"></a>html代码</h2><pre><code>&lt;div id=&quot;target_box&quot;&gt;把图片拖到这里试试&lt;/div&gt;\n&lt;div id=&quot;show-drop&quot; title=&quot;将拖动的图片在这里显示出来&quot;&gt;&lt;/div&gt;\n</code></pre><h2 id=\"js代码\"><a href=\"#js代码\" class=\"headerlink\" title=\"js代码\"></a>js代码</h2><pre><code>function addEventListener(dom,event,callback){\nif(typeof dom == &quot;string&quot;){\n  document.querySelector(dom).addEventListener(event,callback);\n}else{\n  dom.addEventListener(event,callback);\n    }\n}\n//开始拖动\naddEventListener(document,&quot;dragenter&quot;,function(e){\n      e.preventDefault();\n     document.querySelector(&quot;#target_box&quot;).setAttribute(&quot;class&quot;,&quot;droping&quot;);\n});\n\n//拖动中\naddEventListener(document,&quot;dragover&quot;,function(e){\n      e.preventDefault();\n});\n\n//拖放完成\naddEventListener(document,&quot;drop&quot;,function(e){\n      e.preventDefault();\n});\n//拖放离开\naddEventListener(document,&quot;dragleave&quot;,function(e){\n      e.preventDefault();\n  document.querySelector(&quot;#target_box&quot;).setAttribute(&quot;class&quot;,&quot;&quot;);\n});\n//监听是否拖放当元素上后离开的\n    addEventListener(&quot;#target_box&quot;,&apos;drop&apos;,function(e){\n      e.preventDefault();//移除原有浏览器监听效果\n      var dataTransfer = e.dataTransfer;//获取文件对象\n       var files = dataTransfer.files[0];\n  //获取文件后缀\n  var match = files.name ? files.name.match(/\\.([a-zA-Z]+)$/) || [] : false;\n   var suffix = match ? match[1] : &quot;&quot;;\n //如果后缀不是图片\n  if(!suffix || [&quot;jpg&quot;,&quot;jpeg&quot;,&quot;png&quot;,&quot;gif&quot;].indexOf(suffix.toLocaleLowerCase()) &lt; 0){\n    return alert(&quot;你拖动的不是图片&quot;);\n  }\n  //读取文件的 base64 值\n      var filereader = new FileReader();\n      addEventListener(filereader,&apos;load&apos;,function(ee){\n//获取 base64 编码\nvar base64 = ee.target.result;\nvar img = document.createElement(&quot;img&quot;);\nimg.src = base64;\n//将图片添加到页面中\ndocument.querySelector(&quot;#show-drop&quot;).appendChild(img);\n  });\n  filereader.readAsDataURL(files);\n});    \n</code></pre><h2 id=\"base64图片\"><a href=\"#base64图片\" class=\"headerlink\" title=\"base64图片\"></a>base64图片</h2><pre><code>如果需要实现图片上传，可以将转行后的 base64 上传到服务器，服务器将 base64 生成为图片\n</code></pre><h4 id=\"希望大家能帮到大家的地方\"><a href=\"#希望大家能帮到大家的地方\" class=\"headerlink\" title=\"希望大家能帮到大家的地方\"></a>希望大家能帮到大家的地方</h4>","excerpt":"","more":"<h2 id=\"拖放\"><a href=\"#拖放\" class=\"headerlink\" title=\"拖放\"></a>拖放</h2><h5 id=\"拖放是一种常见的特性，即抓取对象以后拖到另一个位置\"><a href=\"#拖放是一种常见的特性，即抓取对象以后拖到另一个位置\" class=\"headerlink\" title=\"拖放是一种常见的特性，即抓取对象以后拖到另一个位置\"></a>拖放是一种常见的特性，即抓取对象以后拖到另一个位置</h5><h2 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples\"></a>Examples</h2><h2 id=\"dragenter\"><a href=\"#dragenter\" class=\"headerlink\" title=\"dragenter\"></a>dragenter</h2><pre><code>开始拖动\n</code></pre><h2 id=\"dragover\"><a href=\"#dragover\" class=\"headerlink\" title=\"dragover\"></a>dragover</h2><pre><code>拖动中\n</code></pre><h2 id=\"dragleave\"><a href=\"#dragleave\" class=\"headerlink\" title=\"dragleave\"></a>dragleave</h2><pre><code>拖动放开\n</code></pre><h2 id=\"drop\"><a href=\"#drop\" class=\"headerlink\" title=\"drop\"></a>drop</h2><pre><code>拖动完成\n</code></pre><h2 id=\"Basis\"><a href=\"#Basis\" class=\"headerlink\" title=\"Basis\"></a>Basis</h2><pre><code>把图片拖到这里试试        （这里就不做演示了）\n</code></pre><h2 id=\"css代码\"><a href=\"#css代码\" class=\"headerlink\" title=\"css代码\"></a>css代码</h2><pre><code>#target_box{\n          max-width : 100%;\n          width: 300px;\n          height: 100px;\n          border: 1px solid red;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          font-size: 18px; transition: all 0.5s;\n    }\n#target_box.droping{\n          color: red;\n          font-weight: blod;\n          font-size: 30px;\n    }\n\n#show-drop img{\n          max-width : 100%;\n          display: block;\n    }\n</code></pre><h2 id=\"html代码\"><a href=\"#html代码\" class=\"headerlink\" title=\"html代码\"></a>html代码</h2><pre><code>&lt;div id=&quot;target_box&quot;&gt;把图片拖到这里试试&lt;/div&gt;\n&lt;div id=&quot;show-drop&quot; title=&quot;将拖动的图片在这里显示出来&quot;&gt;&lt;/div&gt;\n</code></pre><h2 id=\"js代码\"><a href=\"#js代码\" class=\"headerlink\" title=\"js代码\"></a>js代码</h2><pre><code>function addEventListener(dom,event,callback){\nif(typeof dom == &quot;string&quot;){\n  document.querySelector(dom).addEventListener(event,callback);\n}else{\n  dom.addEventListener(event,callback);\n    }\n}\n//开始拖动\naddEventListener(document,&quot;dragenter&quot;,function(e){\n      e.preventDefault();\n     document.querySelector(&quot;#target_box&quot;).setAttribute(&quot;class&quot;,&quot;droping&quot;);\n});\n\n//拖动中\naddEventListener(document,&quot;dragover&quot;,function(e){\n      e.preventDefault();\n});\n\n//拖放完成\naddEventListener(document,&quot;drop&quot;,function(e){\n      e.preventDefault();\n});\n//拖放离开\naddEventListener(document,&quot;dragleave&quot;,function(e){\n      e.preventDefault();\n  document.querySelector(&quot;#target_box&quot;).setAttribute(&quot;class&quot;,&quot;&quot;);\n});\n//监听是否拖放当元素上后离开的\n    addEventListener(&quot;#target_box&quot;,&apos;drop&apos;,function(e){\n      e.preventDefault();//移除原有浏览器监听效果\n      var dataTransfer = e.dataTransfer;//获取文件对象\n       var files = dataTransfer.files[0];\n  //获取文件后缀\n  var match = files.name ? files.name.match(/\\.([a-zA-Z]+)$/) || [] : false;\n   var suffix = match ? match[1] : &quot;&quot;;\n //如果后缀不是图片\n  if(!suffix || [&quot;jpg&quot;,&quot;jpeg&quot;,&quot;png&quot;,&quot;gif&quot;].indexOf(suffix.toLocaleLowerCase()) &lt; 0){\n    return alert(&quot;你拖动的不是图片&quot;);\n  }\n  //读取文件的 base64 值\n      var filereader = new FileReader();\n      addEventListener(filereader,&apos;load&apos;,function(ee){\n//获取 base64 编码\nvar base64 = ee.target.result;\nvar img = document.createElement(&quot;img&quot;);\nimg.src = base64;\n//将图片添加到页面中\ndocument.querySelector(&quot;#show-drop&quot;).appendChild(img);\n  });\n  filereader.readAsDataURL(files);\n});    \n</code></pre><h2 id=\"base64图片\"><a href=\"#base64图片\" class=\"headerlink\" title=\"base64图片\"></a>base64图片</h2><pre><code>如果需要实现图片上传，可以将转行后的 base64 上传到服务器，服务器将 base64 生成为图片\n</code></pre><h4 id=\"希望大家能帮到大家的地方\"><a href=\"#希望大家能帮到大家的地方\" class=\"headerlink\" title=\"希望大家能帮到大家的地方\"></a>希望大家能帮到大家的地方</h4>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"civoyb9my00009xsmlgw1hwg5","tag_id":"civoyb9n600029xsmf749l2ks","_id":"civoyb9nx00099xsmorlu2ocr"},{"post_id":"civoyb9my00009xsmlgw1hwg5","tag_id":"civoyb9nh00069xsmtnocq5s9","_id":"civoyb9ny000a9xsmjyc3bzcs"},{"post_id":"civoyb9n900039xsmaf7bxpev","tag_id":"civoyb9nx00089xsm6tb6pmp9","_id":"civoyb9nz000d9xsmu5bh50xu"},{"post_id":"civoyb9n900039xsmaf7bxpev","tag_id":"civoyb9ny000b9xsmzcmemno5","_id":"civoyb9nz000e9xsm9l7xqk93"},{"post_id":"civoyb9nb00049xsmx4mx85fj","tag_id":"civoyb9nz000c9xsmpbi2tgi4","_id":"civoyb9o3000h9xsmb7od6gjp"},{"post_id":"civoyb9nb00049xsmx4mx85fj","tag_id":"civoyb9o0000f9xsmb0ebml5t","_id":"civoyb9o3000i9xsm69ynivmh"},{"post_id":"civoyb9ne00059xsmf9d1s7v6","tag_id":"civoyb9o2000g9xsmksjwv1ec","_id":"civoyb9o8000m9xsm063etjhn"},{"post_id":"civoyb9ne00059xsmf9d1s7v6","tag_id":"civoyb9o3000j9xsmyi2twibi","_id":"civoyb9o9000n9xsm6rbv93dr"},{"post_id":"civoyb9ne00059xsmf9d1s7v6","tag_id":"civoyb9o5000k9xsmmk1dc2n7","_id":"civoyb9oa000p9xsmfnq7mmh4"},{"post_id":"civoyb9ni00079xsmckvympdb","tag_id":"civoyb9o6000l9xsmy2b4b3sf","_id":"civoyb9oa000q9xsm1nge669c"},{"post_id":"civoyb9ni00079xsmckvympdb","tag_id":"civoyb9o9000o9xsmlh1tmlkm","_id":"civoyb9ob000r9xsm1h43qep3"},{"post_id":"civoyb9oy000v9xsmeuajcnf1","tag_id":"civoyb9nz000c9xsmpbi2tgi4","_id":"civoyb9p0000w9xsmrbpd6ui9"},{"post_id":"civoyb9oy000v9xsmeuajcnf1","tag_id":"civoyb9o6000l9xsmy2b4b3sf","_id":"civoyb9p1000y9xsm16ww11xb"},{"post_id":"civoyb9ot000s9xsmxpe8rmes","tag_id":"civoyb9nz000c9xsmpbi2tgi4","_id":"civoyb9p1000z9xsmemq6pzhq"},{"post_id":"civoyb9ot000s9xsmxpe8rmes","tag_id":"civoyb9ox000u9xsmx4jzz3gb","_id":"civoyb9p200109xsmh0i4d5l6"},{"post_id":"civoyb9ov000t9xsmgpazdxsn","tag_id":"civoyb9p0000x9xsmj21p3m0z","_id":"civoyb9p200119xsmluxnsg3j"}],"Tag":[{"name":"gulp","_id":"civoyb9n600029xsmf749l2ks"},{"name":"gulp入门教程详解","_id":"civoyb9nh00069xsmtnocq5s9"},{"name":"vue","_id":"civoyb9nx00089xsm6tb6pmp9"},{"name":"基于vue直播播放器实战","_id":"civoyb9ny000b9xsmzcmemno5"},{"name":"javascript","_id":"civoyb9nz000c9xsmpbi2tgi4"},{"name":"7种创建对象的方法","_id":"civoyb9o0000f9xsmb0ebml5t"},{"name":"js","_id":"civoyb9o2000g9xsmksjwv1ec"},{"name":"canvas","_id":"civoyb9o3000j9xsmyi2twibi"},{"name":"面试题","_id":"civoyb9o5000k9xsmmk1dc2n7"},{"name":"CSS","_id":"civoyb9o6000l9xsmy2b4b3sf"},{"name":"实现简单的轮播图","_id":"civoyb9o9000o9xsmlh1tmlkm"},{"name":"函数详解","_id":"civoyb9ox000u9xsmx4jzz3gb"},{"name":"前端开发面试题","_id":"civoyb9p0000x9xsmj21p3m0z"}]}}